3,page,About LeechCraft,1433702597,about,"<div style=""width: 40%; min-width: 460px; max-width: 1150px; float:right; margin-left: 4em; border-color: #CDCCCC; border-width: 1px; border-style: solid; border-radius: 5px; -moz-border-radius: 5px; padding-left: 5px; padding-right: 5px"">
[img_assist|nid=59|title=Poshuku|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=139|title=Azoth|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=474|title=LMP|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=478|title=LMP|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=484|title=Monocle|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=58|title=Summary|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=514|title=LackMan|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=501|title=Blogique|desc=|link=popup|align=inline|width=220|height=133]
</div>
<div style='font-size: 1.3em;'>
<strong>LeechCraft</strong> is a <strong>free</strong> open source cross-platform modular <strong>live environment</strong>.
</div>

<style media=""all"" type=""text/css"">
    .downbutton a {
        display: inline;
        background-image: linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -o-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -moz-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -webkit-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -ms-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0.6, #8692a7), color-stop(1, #282e39));
        padding: 15px;
        text-decoration: none;
        color: #eeeeee;
        font-family: sans-serif;
        font-size: 1.1em;
        text-transform: uppercase;
        border-radius: 5px;
        -moz-border-radius: 5px;
        font-weight: bold;
    }

    .downbutton img {
        margin-top: 20px;
        margin-left: 0.5em;
        margin-right: 0.5em;
    }

    .downbutton {
        margin-top: 20px;
        margin-bottom: 15px;
        text-align: center;
    }
</style>

It has [6: modules] for everything:
<div>
<ul>
<li>Full-featured [26: web-browser] with support for all major web-standards.</li>
<li>Advanced multiprotocol modular [143: IM client] currently supporting [144: XMPP (Jabber)], [145: IRC], [294: WLM/MSN], [295: MRIM] and [315: quite a few other] protocols and with a bunch of features from metacontacts and Off-The-Record support to audio calls.</li>
<li>Collection-oriented [20: media player] with a lot of features from gapless playback and transcoding for removable devices to social features like recommended artists and nearby events.</li>
<li>Efficient and fast [10: BitTorrent client] with full support for the BitTorrent protocol and all its widespread <strong>extensions</strong> and <strong>magnet links</strong>.</li>
<li>Modular [381: document viewer] supporting PDF, DjVu, PostScript, MOBI and other formats.</li>
<li>[7: RSS feed reader] supporting common feed formats with extensions like MediaRSS or GeoRSS as well as with extensive support for <strong>Broadcatching</strong> and <strong>podcasts</strong> and their automatic retrieval.</li>
<li>User-space [153: package manager] with its own repository of plugins, themes, icons and much more.</li>
<li>A bunch of <strong>Desktop Environment</strong>-enabling modules from window manager controller to power manager, taskbar, tray and a customizable panel.</li>
<li>The [25: ""Summary"" tab] that displays all your <strong>downloads</strong>, <strong>updates</strong> and <strong>statuses</strong> (like new articles in news feeds).</li>
</ul>
</div>

LeechCraft is a modular system, and by installing different modules you can customize the feature set, keeping off the things you don't need and getting a decent IM client, media player or a feed reader, for example.

<div class=""downbutton"">[5: Get LeechCraft!]
<img src=""https://files.leechcraft.org/imgs/distro_logos/Linux_24.png"" /><img src=""https://files.leechcraft.org/imgs/distro_logos/mac_osx_24.png"" /><img src=""https://files.leechcraft.org/imgs/distro_logos/Windows_24.png"" />
</div>

<div style='clear:both'></div>

<div style=""float:right"">
<div class=""fb-like"" data-href=""http://leechcraft.org"" data-send=""true"" data-layout=""button_count"" data-width=""180"" data-show-faces=""true""></div>
</div>
<div style=""float:right"">
<div id=""vk_like""></div>
</div>
<div style=""float:right"">
<g:plusone href=""http://leechcraft.org""></g:plusone>
</div>
<script type=""text/javascript"">VK.Widgets.Like(""vk_like"", {type: ""mini"", pageUrl: ""http://leechcraft.org""});</script>","<div style=""width: 40%; min-width: 460px; max-width: 1150px; float:right; margin-left: 4em; border-color: #CDCCCC; border-width: 1px; border-style: solid; border-radius: 5px; -moz-border-radius: 5px; padding-left: 5px; padding-right: 5px"">
[img_assist|nid=59|title=Poshuku|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=139|title=Azoth|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=474|title=LMP|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=478|title=LMP|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=484|title=Monocle|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=58|title=Summary|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=514|title=LackMan|desc=|link=popup|align=inline|width=220|height=133][img_assist|nid=501|title=Blogique|desc=|link=popup|align=inline|width=220|height=133]
</div>
<div style='font-size: 1.3em;'>
<strong>LeechCraft</strong> is a <strong>free</strong> open source cross-platform modular <strong>live environment</strong>.
</div>

<style media=""all"" type=""text/css"">
    .downbutton a {
        display: inline;
        background-image: linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -o-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -moz-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -webkit-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -ms-linear-gradient(top, #8692a7 60%, #282e39 100%);
        background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0.6, #8692a7), color-stop(1, #282e39));
        padding: 15px;
        text-decoration: none;
        color: #eeeeee;
        font-family: sans-serif;
        font-size: 1.1em;
        text-transform: uppercase;
        border-radius: 5px;
        -moz-border-radius: 5px;
        font-weight: bold;
    }

    .downbutton img {
        margin-top: 20px;
        margin-left: 0.5em;
        margin-right: 0.5em;
    }

    .downbutton {
        margin-top: 20px;
        margin-bottom: 15px;
        text-align: center;
    }
</style>

It has [6: modules] for everything:
<div>
<ul>
<li>Full-featured [26: web-browser] with support for all major web-standards.</li>
<li>Advanced multiprotocol modular [143: IM client] currently supporting [144: XMPP (Jabber)], [145: IRC], [294: WLM/MSN], [295: MRIM] and [315: quite a few other] protocols and with a bunch of features from metacontacts and Off-The-Record support to audio calls.</li>
<li>Collection-oriented [20: media player] with a lot of features from gapless playback and transcoding for removable devices to social features like recommended artists and nearby events.</li>
<li>Efficient and fast [10: BitTorrent client] with full support for the BitTorrent protocol and all its widespread <strong>extensions</strong> and <strong>magnet links</strong>.</li>
<li>Modular [381: document viewer] supporting PDF, DjVu, PostScript, MOBI and other formats.</li>
<li>[7: RSS feed reader] supporting common feed formats with extensions like MediaRSS or GeoRSS as well as with extensive support for <strong>Broadcatching</strong> and <strong>podcasts</strong> and their automatic retrieval.</li>
<li>User-space [153: package manager] with its own repository of plugins, themes, icons and much more.</li>
<li>A bunch of <strong>Desktop Environment</strong>-enabling modules from window manager controller to power manager, taskbar, tray and a customizable panel.</li>
<li>The [25: ""Summary"" tab] that displays all your <strong>downloads</strong>, <strong>updates</strong> and <strong>statuses</strong> (like new articles in news feeds).</li>
</ul>
</div>

LeechCraft is a modular system, and by installing different modules you can customize the feature set, keeping off the things you don't need and getting a decent IM client, media player or a feed reader, for example.

<div class=""downbutton"">[5: Get LeechCraft!]
<img src=""https://files.leechcraft.org/imgs/distro_logos/Linux_24.png"" /><img src=""https://files.leechcraft.org/imgs/distro_logos/mac_osx_24.png"" /><img src=""https://files.leechcraft.org/imgs/distro_logos/Windows_24.png"" />
</div>

<div style='clear:both'></div>

<div style=""float:right"">
<div class=""fb-like"" data-href=""http://leechcraft.org"" data-send=""true"" data-layout=""button_count"" data-width=""180"" data-show-faces=""true""></div>
</div>
<div style=""float:right"">
<div id=""vk_like""></div>
</div>
<div style=""float:right"">
<g:plusone href=""http://leechcraft.org""></g:plusone>
</div>
<script type=""text/javascript"">VK.Widgets.Like(""vk_like"", {type: ""mini"", pageUrl: ""http://leechcraft.org""});</script>"
5,page,Download,1407328987,download,"<h2 style=""visibility:hidden;"">Linux</h2>
<h3 style=""visibility:hidden;"">Agilia</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/agilia.png"" />

First, you need to enable the <em>edge</em> repository. For that, issue

<code type=""bash"">
mpkg-list_rep
mpkg-enable_rep repo_num
mpkg-update
</code>

where <em>repo_num</em> is the number of <em>edge</em> repo in the output of <code type=""bash"">mkpg-list_rep</code>. If there is no <em>edge</em> repository, you need to add it manually:

<code type=""bash"">
mpkg-add_rep http://edge.agilialinux.ru
mpkg-update
</code>

After that, you can issue

<code type=""bash"">
mpkg search leechcraft
</code>

to see what packages of LeechCraft are available and install the ones you want, for example, for Aggregator, Azoth and Poshuku:

<code type=""bash"">
mpkg install leechcraft-aggregator leechcraft-azoth leechcraft-poshuku
</code>

<h3 style=""visibility:hidden;"">Arch</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/arch.png"" />

LeechCraft has PKGBUILDs in AUR, so to install it, you first need yaourt:

<code type=""bash"">
pacman -Sy yaourt
</code>

Then, just issue

<code type=""bash"">
yaourt -S leechcraft-git
</code>

<h3 style=""visibility:hidden;"">Debian</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/debian.png"" />

Packages for Debian Wheezy/Sid are available in <a href=""http://notesalexp.org/"">this unofficial repo</a>. Instructions for enabling that repository could be found on the linked page.

Each LeechCraft plugin is packaged in a separate package. To install all LeechCraft plugins, just select <em>leechcraft</em>, the rest will be pulled automatically.

<h3 style=""visibility:hidden;"">Fedora</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/fedora.png"" />

LeechCraft is currently available in <a href=""http://software.opensuse.org/download.html?project=home:DarkSS:fedora&package=leechcraft"">an OBS repo</a> for Fedora 19 and 20.

After adding the repo, issue the following command to install all LeechCraft modules (which is recommended):
<code type=""bash"">
sudo yum install ""leechcraft*""
</code>

You may also want to install only a part of the modules. In this case issue the following to find all available packages with LeechCraft modules:
<code type=""bash"">
yum search leechcraft
</code>

<h3 style=""visibility:hidden;"">Gentoo</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/gentoo.png"" />

LeechCraft is available in the official Gentoo Portage tree. The most recent version is currently in <em>~arch</em>, and live ebuilds for the master branch are masked.

To install the metapackage which would pull all the plugins available, issue:
<code type=""bash"">
emerge -av leechcraft-meta
</code>

All LeechCraft packages reside in a single category <em>app-leechcraft/</em>. To see the list of available ebuild, issue the following (assuming you have <em>eix</em> installed):
<code type=""bash"">
eix -c app-leechcraft/
</code>

If you prefer sets (starting with Portage 2.2), you can select any of the following loosely categorized ones:

<ul><li><code>leechcraft-clients-live</code> for clients for various services like [23: SeekThru] or [24: vGrabber];</li>
<li><code>leechcraft-net-live</code> for networking utilities and modules like [7: Aggregator] or [26: Poshuku];</li>
<li><code>leechcraft-tools-live</code> for various helper utilities like [25: Summary] or [18: HistoryHolder].</li>
<li><code>leechcraft-live</code> for all of them.</li></ul>

Alternatively, you could manually install every plugin.

Please note that subplugins are toggled via USE flags of first-level plugins.

<h3 style=""visibility:hidden;"">openSUSE</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/suse.png"" />

Starting with openSUSE 12.2 LeechCraft is in default OSS repositories. To install it, just issue the following:
<code type=""bash"">
zypper in leechcraft*
</code>

For the latest milestone of LeechCraft the <em>network</em> repository needs to be added, so issue
<code type=""bash"">
zypper ar -f -r http://download.opensuse.org/repositories/network/openSUSE_13.2/network.repo
zypper in leechcraft*
</code>
replacing <em>13.2</em> in the first command with your current distro version.

To be on the bleeding edge and get most recent snapshots of the master development branch. add the corresponding repo by issuing
<code type=""bash"">
zypper ar -f -r http://download.opensuse.org/repositories/home:Reki:leechcraft:masterbranch/openSUSE_13.1/home:Reki:leechcraft:masterbranch.repo
</code>

If you feel like the packages are too old, don't hesitate <a href=""http://dev.leechcraft.org/projects/leechcraft/issues/new"">filling an issue</a> against DA for a version bump.

Alternatively, you can use official openSUSE <a href=""http://software.opensuse.org/"">packages search</a>.

<h3 style=""visibility:hidden;"">Slackware</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/slackware.png"" />

Installation for Slackware is pretty simple: just download packages for your architecture (pkg for x86, pkg64 for x86_64) from our <a href=""/repos/slackware/repo/"">repo</a> and install them with:
<code type=""bash"">
updatepkg --install-new packagename
</code>

For running LeechCraft, you would also need qjson, which could be obtained from here: http://www.slackers.it/repository/qjson/ or be installed using <code type=""bash"">slapt-get</code> from slackers.it repository.

The <code type=""bash"">source</code> directory contains scripts for building the packages and all the required information. Documentation regarding using and modifying slackbuilds could be obtained at http://slackbuilds.org

Have fun!

<h3 style=""visibility:hidden;"">Ubuntu</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/ubuntu.png"" />

LeechCraft 0.5.60 and later is available for Ubuntu Oneiric and Precise. Version 0.5.0 is also available for Maverick and Natty.

Add PPA with Weekly Builds (recommended):
<code type=""bash"">
sudo add-apt-repository ppa:tehnick/leechcraft-unstable
</code>
Alternatively, you can use PPA with stable releases:
<code type=""bash"">
sudo add-apt-repository ppa:tehnick/leechcraft-stable
</code>

Update (like <code type=""bash"">aptitude update</code>) and install <em>leechcraft</em> via <code type=""bash"">aptitude</code>, Ubuntu Software Center, Synaptic, Muon or whatever package manager you like.

The <em>leechcraft</em> package pulls the full LeechCraft set. To install only parts of it, you can just select relevant plugins (they all begin with <em>leechcraft-</em>). If you want to help us with debugging LeechCraft, install <em>leechcraft-dbg</em> package.

<h2 style=""visibility:hidden;"">FreeBSD</h2>
<img src=""http://files.leechcraft.org/imgs/distro_logos/freebsd.png"" />

LeechCraft is available for FreeBSD-current. To install, issue
<code type=""bash"">
portmaster x11/leechcraft
</code>
or
<code>
make -C x11/leechcraft install clean
</code>

Currently LeechCraft is represented by a single port file for all plugins.

<h2 style=""visibility:hidden;"">Mac OS X</h2>
<img src=""http://files.leechcraft.org/imgs/distro_logos/mac_osx.png"" />

LeechCraft supports Mac OS X 10.9 and more recent versions. 

The latest installer is for the 0.6.70 version, dated July 28, 2014. You can get it <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/LeechCraft-0.6.70.dmg"">here</a>.

Previous LeechCraft build supporting previous Mac OS versions (10.7 and 10.8) is for the 0.6.0 version, dated September 12, 2013. It is available <a href=""http://dist.leechcraft.org/LeechCraft/0.6.0/leechcraft-0.6.0.dmg"">here</a>.

<h2 style=""visibility:hidden;"">Microsoft Windows</h2>
<img src=""http://files.leechcraft.org/imgs/distro_logos/Windows.png"" />

There are two installers, for <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/leechcraft-installer-0.6.70-0_x86_64.exe"">x86_64</a> and <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/leechcraft-installer-0.6.70-0_i686.exe"">i686</a> architectures. Both are for LeechCraft 0.6.70, dated August 04, 2014.

Please note that Windows is not as supported as other OSes, so crashes and bugs that can't be reproduced on Linux won't be considered.

<h2>Source</h2>

The sources for the git HEAD could be downloaded from <a href=""https://github.com/0xd34df00d/leechcraft/archive/master.zip"">Github</a>. There are also tar.xz archives with weekly snapshots at <a href=""http://dist.leechcraft.org/LeechCraft/"">our server</a>.

If you want the last bleeding-edge LeechCraft, you could always <a href=""development-building-from-source"">build from source</a>.","<h2 style=""visibility:hidden;"">Linux</h2>
<h3 style=""visibility:hidden;"">Agilia</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/agilia.png"" />

First, you need to enable the <em>edge</em> repository. For that, issue

<code type=""bash"">
mpkg-list_rep
mpkg-enable_rep repo_num
mpkg-update
</code>

where <em>repo_num</em> is the number of <em>edge</em> repo in the output of <code type=""bash"">mkpg-list_rep</code>. If there is no <em>edge</em> repository, you need to add it manually:

<code type=""bash"">
mpkg-add_rep http://edge.agilialinux.ru
mpkg-update
</code>

After that, you can issue

<code type=""bash"">
mpkg search leechcraft
</code>

to see what packages of LeechCraft are available and install the ones you want, for example, for Aggregator, Azoth and Poshuku:

<code type=""bash"">
mpkg install leechcraft-aggregator leechcraft-azoth leechcraft-poshuku
</code>

<h3 style=""visibility:hidden;"">Arch</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/arch.png"" />

LeechCraft has PKGBUILDs in AUR, so to install it, you first need yaourt:

<code type=""bash"">
pacman -Sy yaourt
</code>

Then, just issue

<code type=""bash"">
yaourt -S leechcraft-git
</code>

<h3 style=""visibility:hidden;"">Debian</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/debian.png"" />

Packages for Debian Wheezy/Sid are available in <a href=""http://notesalexp.org/"">this unofficial repo</a>. Instructions for enabling that repository could be found on the linked page.

Each LeechCraft plugin is packaged in a separate package. To install all LeechCraft plugins, just select <em>leechcraft</em>, the rest will be pulled automatically.

<h3 style=""visibility:hidden;"">Fedora</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/fedora.png"" />

LeechCraft is currently available in <a href=""http://software.opensuse.org/download.html?project=home:DarkSS:fedora&package=leechcraft"">an OBS repo</a> for Fedora 19 and 20.

After adding the repo, issue the following command to install all LeechCraft modules (which is recommended):
<code type=""bash"">
sudo yum install ""leechcraft*""
</code>

You may also want to install only a part of the modules. In this case issue the following to find all available packages with LeechCraft modules:
<code type=""bash"">
yum search leechcraft
</code>

<h3 style=""visibility:hidden;"">Gentoo</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/gentoo.png"" />

LeechCraft is available in the official Gentoo Portage tree. The most recent version is currently in <em>~arch</em>, and live ebuilds for the master branch are masked.

To install the metapackage which would pull all the plugins available, issue:
<code type=""bash"">
emerge -av leechcraft-meta
</code>

All LeechCraft packages reside in a single category <em>app-leechcraft/</em>. To see the list of available ebuild, issue the following (assuming you have <em>eix</em> installed):
<code type=""bash"">
eix -c app-leechcraft/
</code>

If you prefer sets (starting with Portage 2.2), you can select any of the following loosely categorized ones:

<ul><li><code>leechcraft-clients-live</code> for clients for various services like [23: SeekThru] or [24: vGrabber];</li>
<li><code>leechcraft-net-live</code> for networking utilities and modules like [7: Aggregator] or [26: Poshuku];</li>
<li><code>leechcraft-tools-live</code> for various helper utilities like [25: Summary] or [18: HistoryHolder].</li>
<li><code>leechcraft-live</code> for all of them.</li></ul>

Alternatively, you could manually install every plugin.

Please note that subplugins are toggled via USE flags of first-level plugins.

<h3 style=""visibility:hidden;"">openSUSE</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/suse.png"" />

Starting with openSUSE 12.2 LeechCraft is in default OSS repositories. To install it, just issue the following:
<code type=""bash"">
zypper in leechcraft*
</code>

For the latest milestone of LeechCraft the <em>network</em> repository needs to be added, so issue
<code type=""bash"">
zypper ar -f -r http://download.opensuse.org/repositories/network/openSUSE_13.2/network.repo
zypper in leechcraft*
</code>
replacing <em>13.2</em> in the first command with your current distro version.

To be on the bleeding edge and get most recent snapshots of the master development branch. add the corresponding repo by issuing
<code type=""bash"">
zypper ar -f -r http://download.opensuse.org/repositories/home:Reki:leechcraft:masterbranch/openSUSE_13.1/home:Reki:leechcraft:masterbranch.repo
</code>

If you feel like the packages are too old, don't hesitate <a href=""http://dev.leechcraft.org/projects/leechcraft/issues/new"">filling an issue</a> against DA for a version bump.

Alternatively, you can use official openSUSE <a href=""http://software.opensuse.org/"">packages search</a>.

<h3 style=""visibility:hidden;"">Slackware</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/slackware.png"" />

Installation for Slackware is pretty simple: just download packages for your architecture (pkg for x86, pkg64 for x86_64) from our <a href=""/repos/slackware/repo/"">repo</a> and install them with:
<code type=""bash"">
updatepkg --install-new packagename
</code>

For running LeechCraft, you would also need qjson, which could be obtained from here: http://www.slackers.it/repository/qjson/ or be installed using <code type=""bash"">slapt-get</code> from slackers.it repository.

The <code type=""bash"">source</code> directory contains scripts for building the packages and all the required information. Documentation regarding using and modifying slackbuilds could be obtained at http://slackbuilds.org

Have fun!

<h3 style=""visibility:hidden;"">Ubuntu</h3>
<img src=""http://files.leechcraft.org/imgs/distro_logos/ubuntu.png"" />

LeechCraft 0.5.60 and later is available for Ubuntu Oneiric and Precise. Version 0.5.0 is also available for Maverick and Natty.

Add PPA with Weekly Builds (recommended):
<code type=""bash"">
sudo add-apt-repository ppa:tehnick/leechcraft-unstable
</code>
Alternatively, you can use PPA with stable releases:
<code type=""bash"">
sudo add-apt-repository ppa:tehnick/leechcraft-stable
</code>

Update (like <code type=""bash"">aptitude update</code>) and install <em>leechcraft</em> via <code type=""bash"">aptitude</code>, Ubuntu Software Center, Synaptic, Muon or whatever package manager you like.

The <em>leechcraft</em> package pulls the full LeechCraft set. To install only parts of it, you can just select relevant plugins (they all begin with <em>leechcraft-</em>). If you want to help us with debugging LeechCraft, install <em>leechcraft-dbg</em> package.

<h2 style=""visibility:hidden;"">FreeBSD</h2>
<img src=""http://files.leechcraft.org/imgs/distro_logos/freebsd.png"" />

LeechCraft is available for FreeBSD-current. To install, issue
<code type=""bash"">
portmaster x11/leechcraft
</code>
or
<code>
make -C x11/leechcraft install clean
</code>

Currently LeechCraft is represented by a single port file for all plugins.

<h2 style=""visibility:hidden;"">Mac OS X</h2>
<img src=""http://files.leechcraft.org/imgs/distro_logos/mac_osx.png"" />

LeechCraft supports Mac OS X 10.9 and more recent versions. 

The latest installer is for the 0.6.70 version, dated July 28, 2014. You can get it <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/LeechCraft-0.6.70.dmg"">here</a>.

Previous LeechCraft build supporting previous Mac OS versions (10.7 and 10.8) is for the 0.6.0 version, dated September 12, 2013. It is available <a href=""http://dist.leechcraft.org/LeechCraft/0.6.0/leechcraft-0.6.0.dmg"">here</a>.

<h2 style=""visibility:hidden;"">Microsoft Windows</h2>
<img src=""http://files.leechcraft.org/imgs/distro_logos/Windows.png"" />

There are two installers, for <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/leechcraft-installer-0.6.70-0_x86_64.exe"">x86_64</a> and <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/leechcraft-installer-0.6.70-0_i686.exe"">i686</a> architectures. Both are for LeechCraft 0.6.70, dated August 04, 2014.

Please note that Windows is not as supported as other OSes, so crashes and bugs that can't be reproduced on Linux won't be considered.

<h2>Source</h2>

The sources for the git HEAD could be downloaded from <a href=""https://github.com/0xd34df00d/leechcraft/archive/master.zip"">Github</a>. There are also tar.xz archives with weekly snapshots at <a href=""http://dist.leechcraft.org/LeechCraft/"">our server</a>.

If you want the last bleeding-edge LeechCraft, you could always <a href=""development-building-from-source"">build from source</a>."
6,page,List of plugins,1406498992,plugins,"LeechCraft currently has over 120 plugins, and not all of them are listed here.

<h2>Key plugins</h2>

<dl>
<dt>[210: AdvancedNotifications]</dt>
<dd>A highly flexible, powerful and configurable notifications framework.</dd>
<dt>[7: Aggregator]</dt>
<dd>RSS/Atom feed reader with support for lots of formats, RSS extensions. It also supports broadcasting and autodiscovery.</dd>
<dt>[143: Azoth]<dt>
<dd>Modular multiprotocol IM client. Following protocols are supported:
<ul>
<li>[145: IRC].</li>
<li>[295: Mail.Ru Agent].</li>
<li>[294: Windows Live Messenger] (former MSN).</li>
<li>[144: XMPP].</li>
<li>[472: VKontakte].</li>
<li>[453: Everything from libpurple].</li>
<li>[315: Everything from Telepathy].</li>
</ul>
Other sub-plugins:
<ul>
<li>[196: AdiumStyles] — supporting Adium styles.</li>
<li>Autoidle — autochanging status due to inactivity timeout.</li>
<li>Autopaste — plugin for automatic pasting of long texts to pastebins instead of chat sessions.</li>
<li>[163: ChatHistory] — adds support for storing history of chats and related features.</li>
<li>Depester — allows to ignore specific multiuser chatrooms participants.</li>
<li>EmbedMedia — plugin for showing media objects like flash videos or images directly in the chat window.</li>
<li>Herbicide — a basic antispam plugin.</li>
<li>HiLi — allows to customize parameters of highlights in conferences.</li>
<li>Juick — enhances experience with the <a href=""http://juick.com"">juick.com</a> microblogging service.</li>
<li>LastSeen — records contacts' last online and availability time on client-side.</li>
<li>[214: Metacontacts] — support for metacontacts.</li>
<li>[191: Modnok] — inline displaying LaTeX formulae.</li>
<li>[618: MuCommands] — provides IRC-style commands.</li>
<li>NativeEmoticons — for supporting emoticons packs in Psi+, Kopete and own format.</li>
<li>[161: p100q] — enhances experience with the <a href=""http://psto.net"">psto.net</a> microblogging service.</li>
<li>Rosenthal — enables spellchecking based on Hunspell or Myspell dictionaries.</li>
<li>StandardStyles — basic styling support.</li>
<li>Xtazy — plugin for publishing currently playing tune.</li>
</ul>
</dd>
<dt>[10: BitTorrent]</dt>
<dd>Fast and feature-rich client for the BitTorrent network with support for DHT, magnet links, sequential and selective downloading, renaming and lots of other features.</dd>
<dt>[153: LackMan]</dt>
<dd>LeechCraft package manager for installing script plugins, iconsets, additional data and other similar packages.</dd>
<dt>[20: LMP]</dt>
<dd>Collection-oriented media player with support for Last.FM, MP3tunes and a bunch of other features.</dd>
<dt>[381: Monocle]</dt>
<dd>Modular document reader, with support for different document formats, like PDF, DjVu, PostScript and fb2.</dd>
<dt>[26: Poshuku]</dt>
<dd>Full-featured WebKit-based web browser.
<ul>
<li>[27: Poshuku CleanWeb] — AdBlock+-compatible ads filter.</li>
<li>[305: Poshuku FatApe] — GreaseMonkey support layer.</li>
<li>[28: Poshuku FileScheme] — Provides support for the file: scheme.</li>
<li>[29: Poshuku FUA] — allows to set fake user agents for different URLs.</li>
<li>Poshuku OnlineBookmarks — allows to synchronize bookmarks with services like Read It Later.</li>
<li>Poshuku Pogooglue — for instant googling of selected text.</li>
</ul>
<dt>Qrosp</dt>
<dd>Provides support for scriptable plugins, currently JavaScript and Python are supported.</dd>
<dt>[433: SB2]</dt>
<dd>Next-generation side panel with tab manager, quick launch area and support for quarks like [435: TPI] and [437: Lemon].</dd>
<dt>[25: Summary]</dt>
<dd>Plugin showing current tasks, recent events like unread channels in Aggregator, allowing to perform searches and much more.</dd>
</dl>

<h2>Other plugins</h2>
<ul>
<li>[8: AnHero] — KDE-based crash handler.</li>
<li>[12: Auscrie] — makes screenshots of the LeechCraft window and sends them to the an imagebin service.</li>
<li>[503: Blogique] — the blogging client.</li>
<li>[13: CSTP] — clean & simple HTTP implementation.</li>
<li>[14: DBusManager] — provides communications with the external world via D-Bus.</li>
<li>DeadLyrics — fetches sont lyrics.</li>
<li>[335: Dolozhee] — bug/feature request reporter.</li>
<li>[492: Fenet] — the window manager and compositing manager controller.</li>
<li>GActs — global shortcut manager.</li>
<li>Glance — provides thumbnailed grid overview of tabs.</li>
<li>[154: GMail Notifier] — provides notifications about new mail in your GMail inbox.</li>
<li>[18: HistoryHolder] — stores downloads history.</li>
<li>[496: KBSwitch] — keyboard layout configurator.</li>
<li>[155: Kinotify] — provides fancy kinetic notifications.</li>
<li>[508: Krigstask] — taskbar and desktop pager.</li>
<li>Lads — Unity integration layer.</li>
<li>[344: LastFMScrobble] — adds support for Last.FM.</li>
<li>[397: Launchy] — allows one to launch third-party applications.</li>
<li>[437: Lemon] — network interfaces monitor quark.</li>
<li>[310: Liznoo] — LeechCraft power manager.</li>
<li>[510: Mellonetray] — system tray for LeechCraft.</li>
<li>[429: MusicZombie] — MusicBrainz client plugin.</li>
<li>[313: NetStoreManager] — manages network storages like Yandex.Disk allowing to upload new files and maintaining the list of uploaded ones.</li>
<li>[21: NetworkMonitor] — monitors HTTP requests passing around LeechCraft.</li>
<li>[22: New Life] — settings importer from various other web browsers, feed readers, BitTorrent clients etc.</li>
<li>[333: Otlozhu] — GTD-inspired TODO manager.</li>
<li>Pintab — allows to pin important tabs so that they occupy less space.</li>
<li>[158: Popishu] — simple text editor with basic syntax highlighting, code folding and such.</li>
<li>SecMan — provides storage for sensitive personal data like passwords and such.</li>
<li>[23: SeekThru] — client for OpenSearch-enabled web sites and engines.</li>
<li>ShellOpen — simplifies opening files downloaded via LeechCraft by other applications.</li>
<li>Syncer — allows to synchronize data and settings between LeechCraft instances running on different machines.</li>
<li>[311: TabSessManager] — manages tab sessions.</li>
<li>TabsList — shows the list of currently opened tabs and allows to quickly navigate between them.</li>
<li>[431: TouchStreams] — VK.com client plugin for audio streaming.</li>
<li>[435: TPI] — task progress indicator quark.</li>
<li>[24: vGrabber] — audio/video finder/grabber for the vkontakte.ru web site.</li>
<li>[366: Vrooby] — removable devices manager.</li>
<li>[329: XProxy] — advanced proxy server configuration manager.</li>
</ul>","LeechCraft currently has over 120 plugins, and not all of them are listed here.

<h2>Key plugins</h2>

<dl>
<dt>[210: AdvancedNotifications]</dt>
<dd>A highly flexible, powerful and configurable notifications framework.</dd>
<dt>[7: Aggregator]</dt>
<dd>RSS/Atom feed reader with support for lots of formats, RSS extensions. It also supports broadcasting and autodiscovery.</dd>
<dt>[143: Azoth]<dt>
<dd>Modular multiprotocol IM client. Following protocols are supported:
<ul>
<li>[145: IRC].</li>
<li>[295: Mail.Ru Agent].</li>
<li>[294: Windows Live Messenger] (former MSN).</li>
<li>[144: XMPP].</li>
<li>[472: VKontakte].</li>
<li>[453: Everything from libpurple].</li>
<li>[315: Everything from Telepathy].</li>
</ul>
Other sub-plugins:
<ul>
<li>[196: AdiumStyles] — supporting Adium styles.</li>
<li>Autoidle — autochanging status due to inactivity timeout.</li>
<li>Autopaste — plugin for automatic pasting of long texts to pastebins instead of chat sessions.</li>
<li>[163: ChatHistory] — adds support for storing history of chats and related features.</li>
<li>Depester — allows to ignore specific multiuser chatrooms participants.</li>
<li>EmbedMedia — plugin for showing media objects like flash videos or images directly in the chat window.</li>
<li>Herbicide — a basic antispam plugin.</li>
<li>HiLi — allows to customize parameters of highlights in conferences.</li>
<li>Juick — enhances experience with the <a href=""http://juick.com"">juick.com</a> microblogging service.</li>
<li>LastSeen — records contacts' last online and availability time on client-side.</li>
<li>[214: Metacontacts] — support for metacontacts.</li>
<li>[191: Modnok] — inline displaying LaTeX formulae.</li>
<li>[618: MuCommands] — provides IRC-style commands.</li>
<li>NativeEmoticons — for supporting emoticons packs in Psi+, Kopete and own format.</li>
<li>[161: p100q] — enhances experience with the <a href=""http://psto.net"">psto.net</a> microblogging service.</li>
<li>Rosenthal — enables spellchecking based on Hunspell or Myspell dictionaries.</li>
<li>StandardStyles — basic styling support.</li>
<li>Xtazy — plugin for publishing currently playing tune.</li>
</ul>
</dd>
<dt>[10: BitTorrent]</dt>
<dd>Fast and feature-rich client for the BitTorrent network with support for DHT, magnet links, sequential and selective downloading, renaming and lots of other features.</dd>
<dt>[153: LackMan]</dt>
<dd>LeechCraft package manager for installing script plugins, iconsets, additional data and other similar packages.</dd>
<dt>[20: LMP]</dt>
<dd>Collection-oriented media player with support for Last.FM, MP3tunes and a bunch of other features.</dd>
<dt>[381: Monocle]</dt>
<dd>Modular document reader, with support for different document formats, like PDF, DjVu, PostScript and fb2.</dd>
<dt>[26: Poshuku]</dt>
<dd>Full-featured WebKit-based web browser.
<ul>
<li>[27: Poshuku CleanWeb] — AdBlock+-compatible ads filter.</li>
<li>[305: Poshuku FatApe] — GreaseMonkey support layer.</li>
<li>[28: Poshuku FileScheme] — Provides support for the file: scheme.</li>
<li>[29: Poshuku FUA] — allows to set fake user agents for different URLs.</li>
<li>Poshuku OnlineBookmarks — allows to synchronize bookmarks with services like Read It Later.</li>
<li>Poshuku Pogooglue — for instant googling of selected text.</li>
</ul>
<dt>Qrosp</dt>
<dd>Provides support for scriptable plugins, currently JavaScript and Python are supported.</dd>
<dt>[433: SB2]</dt>
<dd>Next-generation side panel with tab manager, quick launch area and support for quarks like [435: TPI] and [437: Lemon].</dd>
<dt>[25: Summary]</dt>
<dd>Plugin showing current tasks, recent events like unread channels in Aggregator, allowing to perform searches and much more.</dd>
</dl>

<h2>Other plugins</h2>
<ul>
<li>[8: AnHero] — KDE-based crash handler.</li>
<li>[12: Auscrie] — makes screenshots of the LeechCraft window and sends them to the an imagebin service.</li>
<li>[503: Blogique] — the blogging client.</li>
<li>[13: CSTP] — clean & simple HTTP implementation.</li>
<li>[14: DBusManager] — provides communications with the external world via D-Bus.</li>
<li>DeadLyrics — fetches sont lyrics.</li>
<li>[335: Dolozhee] — bug/feature request reporter.</li>
<li>[492: Fenet] — the window manager and compositing manager controller.</li>
<li>GActs — global shortcut manager.</li>
<li>Glance — provides thumbnailed grid overview of tabs.</li>
<li>[154: GMail Notifier] — provides notifications about new mail in your GMail inbox.</li>
<li>[18: HistoryHolder] — stores downloads history.</li>
<li>[496: KBSwitch] — keyboard layout configurator.</li>
<li>[155: Kinotify] — provides fancy kinetic notifications.</li>
<li>[508: Krigstask] — taskbar and desktop pager.</li>
<li>Lads — Unity integration layer.</li>
<li>[344: LastFMScrobble] — adds support for Last.FM.</li>
<li>[397: Launchy] — allows one to launch third-party applications.</li>
<li>[437: Lemon] — network interfaces monitor quark.</li>
<li>[310: Liznoo] — LeechCraft power manager.</li>
<li>[510: Mellonetray] — system tray for LeechCraft.</li>
<li>[429: MusicZombie] — MusicBrainz client plugin.</li>
<li>[313: NetStoreManager] — manages network storages like Yandex.Disk allowing to upload new files and maintaining the list of uploaded ones.</li>
<li>[21: NetworkMonitor] — monitors HTTP requests passing around LeechCraft.</li>
<li>[22: New Life] — settings importer from various other web browsers, feed readers, BitTorrent clients etc.</li>
<li>[333: Otlozhu] — GTD-inspired TODO manager.</li>
<li>Pintab — allows to pin important tabs so that they occupy less space.</li>
<li>[158: Popishu] — simple text editor with basic syntax highlighting, code folding and such.</li>
<li>SecMan — provides storage for sensitive personal data like passwords and such.</li>
<li>[23: SeekThru] — client for OpenSearch-enabled web sites and engines.</li>
<li>ShellOpen — simplifies opening files downloaded via LeechCraft by other applications.</li>
<li>Syncer — allows to synchronize data and settings between LeechCraft instances running on different machines.</li>
<li>[311: TabSessManager] — manages tab sessions.</li>
<li>TabsList — shows the list of currently opened tabs and allows to quickly navigate between them.</li>
<li>[431: TouchStreams] — VK.com client plugin for audio streaming.</li>
<li>[435: TPI] — task progress indicator quark.</li>
<li>[24: vGrabber] — audio/video finder/grabber for the vkontakte.ru web site.</li>
<li>[366: Vrooby] — removable devices manager.</li>
<li>[329: XProxy] — advanced proxy server configuration manager.</li>
</ul>"
7,page,Aggregator,1378905562,plugins-aggregator,"[img_assist|nid=58|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=33|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=34|title=|desc=|link=popup|align=right|width=220]

Aggregator is a client for RSS/RDF/Atom feeds with support for various RSS extensions. It also allows to subscribe and automatically fetch podcasts and any other data.

<h3>Plugins</h3>
<ul>
<li>[198: BodyFetch] for automatic fetching of full news bodies.</li>
</ul>

<h3>Features</h3>
<ul>
<li>Support for feeds in <strong>RSS 2.0, RSS 0.93, RDF, Atom 0.3, Atom 1.0</strong>.</li>
<li>Support for common RSS/Atom extensions and modules like <strong>GeoRSS</strong>, <strong>MediaRSS</strong>, iTunes <strong>podcasting</strong> and <strong>Comment API</strong>.</li>
<li>Support for <strong>OPML</strong> — format for exchanging feed lists. Both local lists and lists stored on remote servers are supported.</li>
<li>Support for <strong>podcasts</strong> and <strong>automatic retrieval</strong> of enclosures.</li>
<li>With a suitable media player plugin like [20: LMP] it's possible to <strong>play (stream) podcasts</strong> without downloading.</li>
<li><strong>Fetch arbitrary data</strong> with regular expressions from news items and download it.</li>
<li><strong>Tagging</strong> channels and support for the application-wide LeechCraft tag base.</li>
<li>Grouping of channels by their tags.</li>
<li><strong>Filter</strong> news by string, wildcard or a regular expression and by their categories.</li>
<li>Show news from several feeds simultaneously.</li>
<li>Show news as a <strong>tape</strong>.</li>
<li>Set <strong>individual options</strong> for each channel like the update timeout, maximum number of stored news and their age and enclosures downloading.</li>
<li>Store data either in <strong>SQLite</strong> or in <strong>PostgreSQL</strong>.</li>
<li>Use a [26: web browser] plugin to show news in a fancy way if it's available.</li>
<li><strong>Autodiscovery</strong> feature to automatically find news feeds on web sites.</li>
<li><strong>Export</strong> feeds to the <strong>FB2</strong> format which is suitable to read on <strong>handheld devices</strong>.</li>
</ul>","[img_assist|nid=58|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=33|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=34|title=|desc=|link=popup|align=right|width=220]

Aggregator is a client for RSS/RDF/Atom feeds with support for various RSS extensions. It also allows to subscribe and automatically fetch podcasts and any other data.

<h3>Plugins</h3>
<ul>
<li>[198: BodyFetch] for automatic fetching of full news bodies.</li>
</ul>

<h3>Features</h3>
<ul>
<li>Support for feeds in <strong>RSS 2.0, RSS 0.93, RDF, Atom 0.3, Atom 1.0</strong>.</li>
<li>Support for common RSS/Atom extensions and modules like <strong>GeoRSS</strong>, <strong>MediaRSS</strong>, iTunes <strong>podcasting</strong> and <strong>Comment API</strong>.</li>
<li>Support for <strong>OPML</strong> — format for exchanging feed lists. Both local lists and lists stored on remote servers are supported.</li>
<li>Support for <strong>podcasts</strong> and <strong>automatic retrieval</strong> of enclosures.</li>
<li>With a suitable media player plugin like [20: LMP] it's possible to <strong>play (stream) podcasts</strong> without downloading.</li>
<li><strong>Fetch arbitrary data</strong> with regular expressions from news items and download it.</li>
<li><strong>Tagging</strong> channels and support for the application-wide LeechCraft tag base.</li>
<li>Grouping of channels by their tags.</li>
<li><strong>Filter</strong> news by string, wildcard or a regular expression and by their categories.</li>
<li>Show news from several feeds simultaneously.</li>
<li>Show news as a <strong>tape</strong>.</li>
<li>Set <strong>individual options</strong> for each channel like the update timeout, maximum number of stored news and their age and enclosures downloading.</li>
<li>Store data either in <strong>SQLite</strong> or in <strong>PostgreSQL</strong>.</li>
<li>Use a [26: web browser] plugin to show news in a fancy way if it's available.</li>
<li><strong>Autodiscovery</strong> feature to automatically find news feeds on web sites.</li>
<li><strong>Export</strong> feeds to the <strong>FB2</strong> format which is suitable to read on <strong>handheld devices</strong>.</li>
</ul>"
8,page,AnHero,1388389695,plugins-anhero,"*NIX-only (including Mac OS X) crash handler which uses gdb to handle crashes and automatically creates reports for [335: Dolozhee] to send them.

[img_assist|nid=35|title=|desc=|link=popup|width=440]

AnHero depended on KDE before version 0.6.60. It has been rewritten with its own implementation in 0.6.60 and thus doesn't depend on KDE anymore.","*NIX-only (including Mac OS X) crash handler which uses gdb to handle crashes and automatically creates reports for [335: Dolozhee] to send them.

[img_assist|nid=35|title=|desc=|link=popup|width=440]

AnHero depended on KDE before version 0.6.60. It has been rewritten with its own implementation in 0.6.60 and thus doesn't depend on KDE anymore."
9,page,Contact us,1384332496,contact-us,"You can join our Jabber conference at <a href=""xmpp:leechcraft@conference.leechcraft.org?join"">leechcraft@conference.leechcraft.org</a>.

We are also on <a href=""https://groups.google.com/forum/#!forum/leechcraft"">Google Groups</a>.","You can join our Jabber conference at <a href=""xmpp:leechcraft@conference.leechcraft.org?join"">leechcraft@conference.leechcraft.org</a>.

We are also on <a href=""https://groups.google.com/forum/#!forum/leechcraft"">Google Groups</a>."
10,page,BitTorrent,1356129359,plugins-bittorrent,"BitTorrent is a feature-rich, fast and efficient client for BitTorrent protocol.

[img_assist|nid=416|title=Torrent tab|desc=|link=popup|width=440]

[img_assist|nid=417|title=Torrent tab|desc=|link=popup|width=440]

[img_assist|nid=418|title=Torrents in Summary|desc=|link=popup|width=440]

<h3>Features</h3>
<ul>
<li>Support for <strong>DHT</strong>.</li>
<li><strong>Magnet links</strong> support.</li>
<li><strong>Sequential download</strong> mode where torrent is download sequentially instead of typically random behavior.</li>
<li>Torrents <strong>queue</strong>, limiting number of seeding/leeching torrents and <strong>smartly rotating</strong> them. Rotation depends on torrent's seed time, ratio and other parameters.</li>
<li>Ability to <strong>rename</strong> files and directories in the torrent and to <strong>change directory layout</strong>.</li>
<li><strong>Selective download</strong>: possibility to select specific files from torrent for download and set per-file priorities.</li>
<li>Continue downloads left by any other client.</li>
<li>Support for <strong>sparse files</strong>.</li>
<li><strong>Tags</strong> for torrents.</li>
<li>Global and per-torrent <strong>speed limits</strong>.</li>
<li>Connection number limits.</li>
<li><strong>Fast resume</strong> support to avoid long startup times.</li>
<li><strong>IP filter</strong> to block/unblock unwanted peers.</li>
<li>Support for extension protocol</li>
<ul><li><strong>PeX</strong></li>
<li>lt trackers</li>
<li>BEP 17 and BEP 19-compatible web seeds.</li></ul>
<li>Local peers discovery.</li>
<li><strong>Multitracker</strong> torrents support. Tracker requests can be either sequnetial or parallel (in µTorrent style).</li>
<li>Scrape support.</li>
<li><strong>UDP trackers</strong> support.</li>
<li>Support for super seeding mode.</li>
<li><strong>IPv6</strong></li>
<li>Merkle hash tree torrent format.</li>
<li><strong>Seed mode</strong>, in which files are checked on first request instead of full check on startup.</li>
<li>Support for <strong>HTTP/SOCKS proxy</strong> servers.</li>
<li>Support for tracker connection compression.</li>
<li>Support for <strong>automatic port mapping</strong> on routers supporting NAT-PMP and UPnP.</li></ul>","BitTorrent is a feature-rich, fast and efficient client for BitTorrent protocol.

[img_assist|nid=416|title=Torrent tab|desc=|link=popup|width=440]

[img_assist|nid=417|title=Torrent tab|desc=|link=popup|width=440]

[img_assist|nid=418|title=Torrents in Summary|desc=|link=popup|width=440]

<h3>Features</h3>
<ul>
<li>Support for <strong>DHT</strong>.</li>
<li><strong>Magnet links</strong> support.</li>
<li><strong>Sequential download</strong> mode where torrent is download sequentially instead of typically random behavior.</li>
<li>Torrents <strong>queue</strong>, limiting number of seeding/leeching torrents and <strong>smartly rotating</strong> them. Rotation depends on torrent's seed time, ratio and other parameters.</li>
<li>Ability to <strong>rename</strong> files and directories in the torrent and to <strong>change directory layout</strong>.</li>
<li><strong>Selective download</strong>: possibility to select specific files from torrent for download and set per-file priorities.</li>
<li>Continue downloads left by any other client.</li>
<li>Support for <strong>sparse files</strong>.</li>
<li><strong>Tags</strong> for torrents.</li>
<li>Global and per-torrent <strong>speed limits</strong>.</li>
<li>Connection number limits.</li>
<li><strong>Fast resume</strong> support to avoid long startup times.</li>
<li><strong>IP filter</strong> to block/unblock unwanted peers.</li>
<li>Support for extension protocol</li>
<ul><li><strong>PeX</strong></li>
<li>lt trackers</li>
<li>BEP 17 and BEP 19-compatible web seeds.</li></ul>
<li>Local peers discovery.</li>
<li><strong>Multitracker</strong> torrents support. Tracker requests can be either sequnetial or parallel (in µTorrent style).</li>
<li>Scrape support.</li>
<li><strong>UDP trackers</strong> support.</li>
<li>Support for super seeding mode.</li>
<li><strong>IPv6</strong></li>
<li>Merkle hash tree torrent format.</li>
<li><strong>Seed mode</strong>, in which files are checked on first request instead of full check on startup.</li>
<li>Support for <strong>HTTP/SOCKS proxy</strong> servers.</li>
<li>Support for tracker connection compression.</li>
<li>Support for <strong>automatic port mapping</strong> on routers supporting NAT-PMP and UPnP.</li></ul>"
12,page,Auscrie,1334659992,plugins-auscrie,"Auscrie makes screenshots of LeechCraft window and allows to upload or save them.

<h2>Features</h2>
<ul>
<li>Screenshots of LeechCraft window, current screen or current desktop.</li>
<li>Delays for screenshots.</li>
<li>Saving or uploading to various image bins.</li>
</ul>

The following image bins are supported:
<ul>
<li>dump.bitcheese.net</li>
<li>savepic.ru</li>
<li>imagebin.ca</li>
</ul>
","Auscrie makes screenshots of LeechCraft window and allows to upload or save them.

<h2>Features</h2>
<ul>
<li>Screenshots of LeechCraft window, current screen or current desktop.</li>
<li>Delays for screenshots.</li>
<li>Saving or uploading to various image bins.</li>
</ul>

The following image bins are supported:
<ul>
<li>dump.bitcheese.net</li>
<li>savepic.ru</li>
<li>imagebin.ca</li>
</ul>
"
13,page,CSTP,1276291227,plugins-cstp,"Clean & simple HTTP implementation. Mainly used by many other plugins, like <a href=""/plugins-aggregator"">Aggregator</a> or <a href=""/plugins-seekthru"">SeekThru</a> or <a href=""/plugins-vgrabber"">vGrabber</a>.

<h3>Features</h3>
<ul>
<li>Support for redirects.</li>
<li>Automatic downloads from other plugins.</li>
<li>Support for continuing of interrupted downloads.</li>
</ul>","Clean & simple HTTP implementation. Mainly used by many other plugins, like <a href=""/plugins-aggregator"">Aggregator</a> or <a href=""/plugins-seekthru"">SeekThru</a> or <a href=""/plugins-vgrabber"">vGrabber</a>.

<h3>Features</h3>
<ul>
<li>Support for redirects.</li>
<li>Automatic downloads from other plugins.</li>
<li>Support for continuing of interrupted downloads.</li>
</ul>"
14,page,DBusManager,1276249270,plugins-dbusmanager,"Enables LeechCraft to use D-Bus. Currently, this only means showing notifications via implementations supporting FreeDesktop's notifications standard, like KDE 4.4 (or higher), Gnome, XFCE and others.

Currently DBusManager only exists under *NIX.","Enables LeechCraft to use D-Bus. Currently, this only means showing notifications via implementations supporting FreeDesktop's notifications standard, like KDE 4.4 (or higher), Gnome, XFCE and others.

Currently DBusManager only exists under *NIX."
18,page,HistoryHolder,1276290918,plugins-historyholder,"Stores download history and allows to search it by text, wildcard, regexp or tags.","Stores download history and allows to search it by text, wildcard, regexp or tags."
19,page,LCFTP,1276290901,plugins-lcftp,"Transfers files via FTP and allows to browse a remote host via a two-panel interface.

<h3>Features</h3>
<ul>
<li>Supports all major FTP servers.</li>
<li>Supports multiple tabs.</li>
<li>Mirroring support.</li>
<li>Tasks queue with limits for max total tasks and max total tasks per host.</li>
<li>SSL support.</li>
</ul>","Transfers files via FTP and allows to browse a remote host via a two-panel interface.

<h3>Features</h3>
<ul>
<li>Supports all major FTP servers.</li>
<li>Supports multiple tabs.</li>
<li>Mirroring support.</li>
<li>Tasks queue with limits for max total tasks and max total tasks per host.</li>
<li>SSL support.</li>
</ul>"
20,page,LMP,1396468321,plugins-lmp,"LeechCraft Music Player is a collection-oriented music player based on GStreamer<sup>1</sup>.

<h2>Features</h2>

<ul>
<li>Collection-oriented music player with playback statistics.</li>
<li>Collection synchronization with portable media players, with transcoding.</li>
<li>Support for scrobbling played tracks to services like Last.FM.</li>
<li>Automatic fetching of album art if it's not present.</li>
<li>Support for requesting a bunch of information from services like Last.FM, including:
<ul>
<li>artist biography;</li>
<li>similar artists;</li>
<li>personalized recommendations;</li>
<li>recent releases by the artists in user's library;</li>
<li>events nearby;</li>
<li>hyped tracks and artists.</li>
</ul>
</li>
<li>Fetching artists' discographies from MusicBrainz.</li>
<li>Previewing artsits, tracks and albums from VKontakte.</li>
<li>Support for fetching lyrics.</li>
<li>Gapless playback.</li>
<li>ReplayGain support.</li>
<li>Support for automatic calculation of ReplayGain metadata for audio tracks in collection, with support for album mode. The calculated data is stored in the collection database, leaving audio files intact.</li>
<li>Support for radio streams (of course, including Last.FM radio).</li>
<li>Play queue with different play modes like sequential, shuffle, repeating track/album/whole playlist.</li>
<li>MPRIS support.</li>
<li>Undo/redo for play queue.</li>
<li>Dynamic playlists like ""50 Random Tracks"".</li>
<li>Static playlists.</li>
<li>Support for M3U8, PLS and XSPF playlist formats.</li>
<li>Fast threaded collection scanner.</li>
</ul>

Some features in the above list rely on other plugins like [344: LastFMScrobble].

<h2>Screenshots</h2>

[img_assist|nid=474|title=Biography|desc=|link=popup|width=440]

[img_assist|nid=475|title=Collection|desc=|link=popup|width=440]

[img_assist|nid=476|title=Similar artists|desc=|link=popup|width=440]

[img_assist|nid=483|title=Artists browser|desc=|link=popup|width=440]

[img_assist|nid=477|title=Lyrics|desc=|link=popup|width=440]

[img_assist|nid=478|title=Recommendations|desc=|link=popup|width=440]

[img_assist|nid=480|title=Recommended events nearby|desc=|link=popup|width=440]

[img_assist|nid=479|title=Recent releases with discography|desc=|link=popup|width=440]

[img_assist|nid=481|title=Hypes|desc=|link=popup|width=440]

[img_assist|nid=482|title=Transcoding parameters on sync|desc=|link=popup|width=440]

[img_assist|nid=353|title=Tray icon|desc=|link=popup|width=440]

<h2>Subplugins</h2>

<h3>Graffiti</h3>

Audo tags editor.

Features:
<ul>
<li>Mass audio tags editor.</li>
<li>Automatic fetching of audio tags via audio fingerprinting and plugins like [429: MusicZombie].</li>
<li>Renaming according to the mask and tags.</li>
<li>Splitting CUE files into separate tracks.</li>
</ul>

<h3>MTPSync</h3>

Allows LMP to synchronize and upload music collection to MTP-enabled portable devices.

<h2>Notes</h2>
<sup>1</sup> LMP uses Phonon instead of GStreamer in versions before and including 0.6.0.","LeechCraft Music Player is a collection-oriented music player based on GStreamer<sup>1</sup>.

<h2>Features</h2>

<ul>
<li>Collection-oriented music player with playback statistics.</li>
<li>Collection synchronization with portable media players, with transcoding.</li>
<li>Support for scrobbling played tracks to services like Last.FM.</li>
<li>Automatic fetching of album art if it's not present.</li>
<li>Support for requesting a bunch of information from services like Last.FM, including:
<ul>
<li>artist biography;</li>
<li>similar artists;</li>
<li>personalized recommendations;</li>
<li>recent releases by the artists in user's library;</li>
<li>events nearby;</li>
<li>hyped tracks and artists.</li>
</ul>
</li>
<li>Fetching artists' discographies from MusicBrainz.</li>
<li>Previewing artsits, tracks and albums from VKontakte.</li>
<li>Support for fetching lyrics.</li>
<li>Gapless playback.</li>
<li>ReplayGain support.</li>
<li>Support for automatic calculation of ReplayGain metadata for audio tracks in collection, with support for album mode. The calculated data is stored in the collection database, leaving audio files intact.</li>
<li>Support for radio streams (of course, including Last.FM radio).</li>
<li>Play queue with different play modes like sequential, shuffle, repeating track/album/whole playlist.</li>
<li>MPRIS support.</li>
<li>Undo/redo for play queue.</li>
<li>Dynamic playlists like ""50 Random Tracks"".</li>
<li>Static playlists.</li>
<li>Support for M3U8, PLS and XSPF playlist formats.</li>
<li>Fast threaded collection scanner.</li>
</ul>

Some features in the above list rely on other plugins like [344: LastFMScrobble].

<h2>Screenshots</h2>

[img_assist|nid=474|title=Biography|desc=|link=popup|width=440]

[img_assist|nid=475|title=Collection|desc=|link=popup|width=440]

[img_assist|nid=476|title=Similar artists|desc=|link=popup|width=440]

[img_assist|nid=483|title=Artists browser|desc=|link=popup|width=440]

[img_assist|nid=477|title=Lyrics|desc=|link=popup|width=440]

[img_assist|nid=478|title=Recommendations|desc=|link=popup|width=440]

[img_assist|nid=480|title=Recommended events nearby|desc=|link=popup|width=440]

[img_assist|nid=479|title=Recent releases with discography|desc=|link=popup|width=440]

[img_assist|nid=481|title=Hypes|desc=|link=popup|width=440]

[img_assist|nid=482|title=Transcoding parameters on sync|desc=|link=popup|width=440]

[img_assist|nid=353|title=Tray icon|desc=|link=popup|width=440]

<h2>Subplugins</h2>

<h3>Graffiti</h3>

Audo tags editor.

Features:
<ul>
<li>Mass audio tags editor.</li>
<li>Automatic fetching of audio tags via audio fingerprinting and plugins like [429: MusicZombie].</li>
<li>Renaming according to the mask and tags.</li>
<li>Splitting CUE files into separate tracks.</li>
</ul>

<h3>MTPSync</h3>

Allows LMP to synchronize and upload music collection to MTP-enabled portable devices.

<h2>Notes</h2>
<sup>1</sup> LMP uses Phonon instead of GStreamer in versions before and including 0.6.0."
21,page,NetworkMonitor,1276290871,plugins-networkmonitor,Shows active HTTP requests and allows to inspect them and search through the list.,Shows active HTTP requests and allows to inspect them and search through the list.
22,page,New Life,1394092109,plugins-newlife,"New Life imports settings from various other web browsers, feed readers, BitTorrent clients etc.

<h2>Features and supported applications</h2>
<h3>IM</h3>
<dl>
<dt>Kopete</dt>
<dd><ul><li>Chat history.</li></ul></dd>
<dt>Psi+</dt>
<dd><ul><li>Account settings.</li><li>Chat history.</li></ul></dd>
<dt>Vacuum IM</dt>
<dd><ul><li>Account settings.</li><li>Chat history.</li></ul></dd>
</dl>

<h3>RSS</h3>
<dl>
<dt>Akregator</dt>
<dd><ul><li>Feeds list.</li>
<li>Individual settings for each feed, like update interval and custom storage parameters.</li>
<li>Akregator's settings.</li></dd>
<dt>Firefox</dt>
<dd><ul><li>History</li>
<li>Bookmarks</li>
<li>RSS feeds (aka Live bookmarks)</li></dd>
<dt>Liferea</dt>
<dd><ul><li>Feeds list.</li></ul></dd>
</dl>

<h3>Web browsers</h3>
<dl>
<dt>Opera</dt>
<dd><ul><li>Browsing history.</li></ul></dd>
</dl>","New Life imports settings from various other web browsers, feed readers, BitTorrent clients etc.

<h2>Features and supported applications</h2>
<h3>IM</h3>
<dl>
<dt>Kopete</dt>
<dd><ul><li>Chat history.</li></ul></dd>
<dt>Psi+</dt>
<dd><ul><li>Account settings.</li><li>Chat history.</li></ul></dd>
<dt>Vacuum IM</dt>
<dd><ul><li>Account settings.</li><li>Chat history.</li></ul></dd>
</dl>

<h3>RSS</h3>
<dl>
<dt>Akregator</dt>
<dd><ul><li>Feeds list.</li>
<li>Individual settings for each feed, like update interval and custom storage parameters.</li>
<li>Akregator's settings.</li></dd>
<dt>Firefox</dt>
<dd><ul><li>History</li>
<li>Bookmarks</li>
<li>RSS feeds (aka Live bookmarks)</li></dd>
<dt>Liferea</dt>
<dd><ul><li>Feeds list.</li></ul></dd>
</dl>

<h3>Web browsers</h3>
<dl>
<dt>Opera</dt>
<dd><ul><li>Browsing history.</li></ul></dd>
</dl>"
23,page,SeekThru,1386591981,plugins-seekthru,"Client for OpenSearch-enabled web sites and engines.

SeekThru also implements the [529: data filters] concept for text data.

<h3>Features</h3>
<ul>
<li>Support for autodiscovery of OpenSearch-capable web sites.</li>
<li>Tagging of search engines.</li>
<li>Support for queries to several search engines at once.</li>
<li>Support search results in RSS/Atom format and subscribe to them with a suitable plugin like [7: Aggregator].</li>
<li>Show results in HTML format with a suitable plugin like [26: Poshuku].</li>
</ul>","Client for OpenSearch-enabled web sites and engines.

SeekThru also implements the [529: data filters] concept for text data.

<h3>Features</h3>
<ul>
<li>Support for autodiscovery of OpenSearch-capable web sites.</li>
<li>Tagging of search engines.</li>
<li>Support for queries to several search engines at once.</li>
<li>Support search results in RSS/Atom format and subscribe to them with a suitable plugin like [7: Aggregator].</li>
<li>Show results in HTML format with a suitable plugin like [26: Poshuku].</li>
</ul>"
24,page,vGrabber,1276296974,plugins-vgrabber,"Audio/video grabber/player from the Vkontakte social network.

<h3>Features</h3>
<ul>
<li>Download or stream audios and videos from Vkontakte.</li>
<li>Search for audios and videos.</li>
</ul>","Audio/video grabber/player from the Vkontakte social network.

<h3>Features</h3>
<ul>
<li>Download or stream audios and videos from Vkontakte.</li>
<li>Search for audios and videos.</li>
</ul>"
25,page,Summary,1378905517,plugins-summary,"Summary shows a quick overview of LeechCraft's state. It shows current tasks like leeching or seeding torrents, IM file transfers or music transcoding progress with context-dependent actions and views. It also can collect status information from other plugins like unread channels.

Summary also allows to perform searches via the installed plugins like [23: SeekThru], [18: HistoryHolder] or [24: vGrabber].

[img_assist|nid=58|title=|desc=|link=popup|width=440]

<h3>Features</h3>
<ul>
<li>List of current tasks and events with context-dependant actions and views for selected items.</li>
<li>Support for gathering status information from other plugins.</li>
<li>Category-based search query support via other plugins.</li>
</ul>","Summary shows a quick overview of LeechCraft's state. It shows current tasks like leeching or seeding torrents, IM file transfers or music transcoding progress with context-dependent actions and views. It also can collect status information from other plugins like unread channels.

Summary also allows to perform searches via the installed plugins like [23: SeekThru], [18: HistoryHolder] or [24: vGrabber].

[img_assist|nid=58|title=|desc=|link=popup|width=440]

<h3>Features</h3>
<ul>
<li>List of current tasks and events with context-dependant actions and views for selected items.</li>
<li>Support for gathering status information from other plugins.</li>
<li>Category-based search query support via other plugins.</li>
</ul>"
26,page,Poshuku,1404496508,plugins-poshuku,"[img_assist|nid=59|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=250|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=602|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=603|title=|desc=|link=popup|align=right|width=220]

Poshuku is a full-featured WebKit-based web browser.

<h2>Features</h2>
<ul>
<li>Poshuku is <strong>WebKit</strong>-based thus supporting all major modern <strong>web-standards</strong>.</li>
<li>Infinite undo of page closes.</li>
<li>Integration with other plugins. For example, [7: Aggregator] uses Poshuku to show items' texts, and [23: SeekThru] shows search results with Poshuku.</li>
<li>Support for international domain names.</li>
<li>Saving forms data (via additional plugins as storage backends).</li>
<li>Support for <strong>autodiscovery</strong>-links on external entities. This way links to <strong>news feeds</strong> and <strong>OpenSearch</strong> descriptions are automatically found and suggested with [7: Aggregator] and [23: SeekThru] installed.</li>
<li><strong>Tagging</strong> bookmarks and support for the common LeechCraft tags base.</li>
<li>Filter history and bookmarks by a string, wildcard or regular expression.</li>
<li>Address line with smart autocomplete which suggests more probable URLs based visits frequency and dates.</li>
<li>Support for <storng>SQLite</strong>, <strong>PostgreSQL</strong> and <strong>MySQL</strong> for data storage.</li>
<li>Easy lookup of selected words in installed search engines, for example, via [23: SeekThru].</li>
<li>Search in installed search engines from the address bar.</li>
<li>Support for <strong>XBel</strong>.</li>
<li>Support for full-length page <strong>screenshots</strong> with [529: data filters] concept.</li>
<li>Reload timer.</li>
<li><strong>Adjustable notifications</strong> about page load events.</li>
<li><strong>Cookies manager</strong> to edit and delete cookies.</li>
<li><strong>Bookmarks checker</strong> to keep your bookmarks up-to-date.</li>
<li>Support for <strong>inspecting</strong> and changing the DOM tree on the fly.</li>
<li>JavaScript debugging and profiling.</li>
<li>Detailed statistics for the page load.</li>
</ul>

<h2>Subplugins</h2>
<ul>
<li>[27: CleanWeb], the AdBlock-compatible ad blocker.</li>
<li>[614: DC/AC], the color invertor.</li>
<li>[305: FatApe], our GreaseMonkey userscripts support layer.</li>
<li>[28: FileScheme], support for the file:// URLs.</li>
<li>[29: FUA], which allows to set different user agents for different URLs.</li>
<li>[600: SpeedDial], providing the speed dial start page.</li>
</ul>","[img_assist|nid=59|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=250|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=602|title=|desc=|link=popup|align=right|width=220]

[img_assist|nid=603|title=|desc=|link=popup|align=right|width=220]

Poshuku is a full-featured WebKit-based web browser.

<h2>Features</h2>
<ul>
<li>Poshuku is <strong>WebKit</strong>-based thus supporting all major modern <strong>web-standards</strong>.</li>
<li>Infinite undo of page closes.</li>
<li>Integration with other plugins. For example, [7: Aggregator] uses Poshuku to show items' texts, and [23: SeekThru] shows search results with Poshuku.</li>
<li>Support for international domain names.</li>
<li>Saving forms data (via additional plugins as storage backends).</li>
<li>Support for <strong>autodiscovery</strong>-links on external entities. This way links to <strong>news feeds</strong> and <strong>OpenSearch</strong> descriptions are automatically found and suggested with [7: Aggregator] and [23: SeekThru] installed.</li>
<li><strong>Tagging</strong> bookmarks and support for the common LeechCraft tags base.</li>
<li>Filter history and bookmarks by a string, wildcard or regular expression.</li>
<li>Address line with smart autocomplete which suggests more probable URLs based visits frequency and dates.</li>
<li>Support for <storng>SQLite</strong>, <strong>PostgreSQL</strong> and <strong>MySQL</strong> for data storage.</li>
<li>Easy lookup of selected words in installed search engines, for example, via [23: SeekThru].</li>
<li>Search in installed search engines from the address bar.</li>
<li>Support for <strong>XBel</strong>.</li>
<li>Support for full-length page <strong>screenshots</strong> with [529: data filters] concept.</li>
<li>Reload timer.</li>
<li><strong>Adjustable notifications</strong> about page load events.</li>
<li><strong>Cookies manager</strong> to edit and delete cookies.</li>
<li><strong>Bookmarks checker</strong> to keep your bookmarks up-to-date.</li>
<li>Support for <strong>inspecting</strong> and changing the DOM tree on the fly.</li>
<li>JavaScript debugging and profiling.</li>
<li>Detailed statistics for the page load.</li>
</ul>

<h2>Subplugins</h2>
<ul>
<li>[27: CleanWeb], the AdBlock-compatible ad blocker.</li>
<li>[614: DC/AC], the color invertor.</li>
<li>[305: FatApe], our GreaseMonkey userscripts support layer.</li>
<li>[28: FileScheme], support for the file:// URLs.</li>
<li>[29: FUA], which allows to set different user agents for different URLs.</li>
<li>[600: SpeedDial], providing the speed dial start page.</li>
</ul>"
27,page,Poshuku CleanWeb,1328776541,plugins-poshuku-cleanweb,"Ads filter compatible with block lists from AdBlock+ for Firefox.

<h3>Features</h3>
<ul>
<li>Support for AdBlock+ block lists.</li>
<li>Support for detection and subscription to such lists.</li>
<li>Automatic updates of block lists.</li>
<li>User filters: blocking arbitrary images.</li>
<li>Support for replacing Adobe Flash objects with a ""Load flash"" button.</li>
<li>Whitelists for Flash blocker.</li>
</ul>","Ads filter compatible with block lists from AdBlock+ for Firefox.

<h3>Features</h3>
<ul>
<li>Support for AdBlock+ block lists.</li>
<li>Support for detection and subscription to such lists.</li>
<li>Automatic updates of block lists.</li>
<li>User filters: blocking arbitrary images.</li>
<li>Support for replacing Adobe Flash objects with a ""Load flash"" button.</li>
<li>Whitelists for Flash blocker.</li>
</ul>"
28,page,Poshuku FileScheme,1328776572,plugins-poshuku-filescheme,"Allows to navigate local resource via the <code>file://</code> scheme. Of course, FileScheme supports ""downloading"" files from local resources.","Allows to navigate local resource via the <code>file://</code> scheme. Of course, FileScheme supports ""downloading"" files from local resources."
29,page,Poshuku FUA,1328776559,plugins-poshuku-fua,"Allows to set different User-Agent strings for different URLs.

<h3>Features</h3>
<ul>
<li>URLs are defined either by their substring or by regular expression.</li>
<li>Several popular predefined user agents are present.</li>
<li>Support for custom user-defined strings.</li>
<li>Support automatic insertion of current platform, language, WebKit's version etc. into the User-Agent string in arbitrary places.</li>
</ul>","Allows to set different User-Agent strings for different URLs.

<h3>Features</h3>
<ul>
<li>URLs are defined either by their substring or by regular expression.</li>
<li>Several popular predefined user agents are present.</li>
<li>Support for custom user-defined strings.</li>
<li>Support automatic insertion of current platform, language, WebKit's version etc. into the User-Agent string in arbitrary places.</li>
</ul>"
32,image,Aggregator in Summary,1321473586,,"",""
33,image,Aggregator: tape mode and folder merge,1321474564,,"",""
34,image,Aggregator: filtering,1321474551,,"",""
35,image,AnHero: a backtrace,1387992128,,"",""
56,page,DeadLyrics,1387799747,plugins-deadlyrics,DeadLyrics allows to search for song lyrics on various sites. The search is typically requested via other plugins like [20: LMP] and the requesting plugins are responsible for displaying the results.,DeadLyrics allows to search for song lyrics on various sites. The search is typically requested via other plugins like [20: LMP] and the requesting plugins are responsible for displaying the results.
58,image,Summary with Aggregator items,1378905451,,[25: Summary] showing channels with unread items in [7: Aggregator].,[25: Summary] showing channels with unread items in [7: Aggregator].
59,image,Poshuku Browser,1367173177,,[26: Poshuku],[26: Poshuku]
60,image,LackMan,1344171181,,LeechCraft Package Manager,LeechCraft Package Manager
61,page,Development,1377039797,development,"LeechCraft is written in C++ with heavy Qt usage and some Boost. We use git for source control, so if you know git that will ease things a lot.

The issue tracker is located at <a href=""http://dev.leechcraft.org/projects/leechcraft/issues"">http://dev.leechcraft.org/projects/leechcraft/issues</a>.

Doxygen-generated documentation is located at <a href=""http://doc.leechcraft.org/"">http://doc.leechcraft.org/</a>.","LeechCraft is written in C++ with heavy Qt usage and some Boost. We use git for source control, so if you know git that will ease things a lot.

The issue tracker is located at <a href=""http://dev.leechcraft.org/projects/leechcraft/issues"">http://dev.leechcraft.org/projects/leechcraft/issues</a>.

Doxygen-generated documentation is located at <a href=""http://doc.leechcraft.org/"">http://doc.leechcraft.org/</a>."
63,book,General information,1290639701,development-general-information,"",""
64,book,Code style,1344421425,development-code-style,"<h2>Naming conventions</h2>

<ul>
<li>Local variables are named in <code>camelCase</code> with lower first letter.</li>
<li>Member variables are named in <code>CamelCase_</code> with upper first letter and an underscore in the end (stupid, I know, but that's the tradition).</li>
<li>Enums are named in <code>CamelCase</code> in singular form with upper first letter.</li>
<li>Enum members are named in <code>CamelCase</code>. Enum members are <em>always</em> used with corresponding enum scope qualifier (see C++11 scoped enums).</li>
<li>Global variables aren't named at all. They shouldn't exist in your code.</li>
<li>Try to make variables visually distinct from each other. Having <code>index1</code> and <code>indexl</code> near each other isn't a good idea.</li>
<li>Member functions that aren't invokable (aren't Qt signals nor slots) are named in <code>CamelCase</code> with upper first letter.</li>
<li>Invokable member functions (Qt signals and slots) are named in <code>camelCase</code> with lower first letter.</li>
<li>Global free functions are also named in <code>CamelCase</code> with upper first letter.</li>
<li>Local free functions are named in <code>CamelCase</code> with upper first letter. If possible, they should be in their own anonymous namespace.</li>
<li>File name should be like the class's name all in lower case.</li>
<li>There are generally two files per class: header file and source (implementation) file.</li>
</ul>

<h2><code>#include</code> order</h2>

<ol>
<li>If it's implementation file, the corresponding header file.</li>
<li>Standard C++/STL headers like <code>iostream</code> or <code>functional</code>. Prefer C++ headers (say, <code>cmath</code>) over C-style ones (<code>math.h</code>).</li>
<li>Boost headers.</li>
<li>Qt headers.</li>
<li>Any other library headers.</li>
<li>LeechCraft headers.</li>
<li>Your own files.</li>
</ol>

<h2>Variable declarations, function declarations and general things</h2>

<ul>
<li>Initialize each variable when declaring it, even if it's going to be assigned few lines later anyway.</li>
<li>Declare each variable on a separate line.</li>
<li>Attach star to the variable name (the only exception is return type declaration in function declaration/definition):
<pre><code type=""cpp-qt"">void* f (int *a)
{
    int *b = 0;
    int *c = *a;
    return b;
}</code></pre></li>
<li>&amp; meaning reference is attached to the type:
<pre><code type=""cpp-qt"">void g (const T& t, U& u);</code></pre></li>
<li>Types should be mentioned with full namespace in the signals/slots declarations and <code>QObject::connect()</code> calls since <code>moc</code> doesn't parse them well otherwise.</li>
<li>Never, never ever put <code>using</code>-declarations in your headers.</li>
<li>Put your code in <code>LeechCraft::YourPlugin</code> namespace.</li>
<li>Put your implementation code in <code>.cpp</code>-file in <code>LeechCraft::YourPlugin</code> namespace as well or prefix each function. Avoid <code>using</code>-directives since <code>lupdate</code> tool doesn't handle them and you'll end up with untranslated strings.</li>
<li>All the private variables and definitions like <code>Q_OBJECT</code> or <code>Q_INTERFACES</code> follows immediately after beginning of the class definition.</li>
<li>Don't put variable names in function declarations unless you plan to <code>doxygen</code> it.</li>
<li>Braces are always on new line and are the only character there.</li>
</ul>

<h2>Identation and line breaks</h2>

<ul>
<li>Use tabs to ident code. Set your tab width to 4 spaces, and in case of vim:
<pre>
:set shiftwidth=4
:set softtabstop=4
:set tabstop=4
</pre></li>
<li>Breaking inside function parameter list adds two tab levels.
<pre><code type=""cpp-qt"">int func (int a, int b,
        int c);</code></pre></li>
<li>Breaking an incomplete expression adds a tab level. Breaking inside each parenthesis pair adds one more tab level. Binary operators are in the end of the line, the <code>-></code> operator also stays on the same line, only the <code>.</code> (dot) operator goes to the next line.</li>
<li>It is OK to make long lines in case you break them at about 72 column.</li>
</ul>

<h2>Whitespaces</h2>

<ul>
<li>Unary operators are glued to their operands.
<pre><code type=""cpp-qt"">++a;</code></pre></li>
<li>Binary operators are surrounded by whitespaces from both sides.
<pre><code type=""cpp-qt"">c = a + b;
++a && !c;</code></pre></li>
<li>Parenthesis are surrounded by whitespaces only from the outer side and only if the other symbol isn't a brace.
<pre><code type=""cpp-qt"">((a && b) || (c + !d) && e)</code></pre></li>
<li>The only exception from the previous rule is the case when parenthesis are followed by a <code>.</code> or <code>-></code> operator or semicolon.
<pre><code type=""cpp-qt"">int a = f ();
a = f () + g ();
a += GetPointer ()->h ();
a -= GetReference ().DoStuff ();</code></pre></li>
</ul>

<h2>Examples</h2>

So, an example header file would be like:
<pre><code type=""cpp-qt"">#pragma once

#include <QObject>

namespace LeechCraft
{
struct Entity;

namespace YourCode
{
    class SomeClass : public QObject
    {
        Q_OBJECT
    public:
        SomeClass (QObject* = 0);

        int Get42 () const;
    public slots:
        void handle42Changed (int);
    signals:
        void gotEntity (const LeechCraft::Entity&);
    }
}
}
</code></pre>

The corresponding source file would be:
<pre><code type=""cpp-qt"">#include ""someclass.h""
#include <stdexcept>
#include <algorithm>
#include <memory>
#include <QString>
#include <interfaces/structures.h>
#include ""core.h""

namespace LeechCraft
{
namespace YourCode
{
    namespace
    {
        int func (int a, MyClass *f)
        {
            int result = f->GetID () +
                    SomeAnotherLongFunctionYouWillDefinitelyWantToWrap (a);
            result *= Core::Instance ().GetSomeCalculator ()->
                    Initialize ().GetFactor ();
            result /= Core::Instance ()
                    .AnotherReaaaallyLongFunction (result, a);
            if ((result == 42 &&
                        !a) ||
                    a == 42)
                std::cout << ""Truth is out there"" << std::endl;
            return result;
        }
    }

    SomeClass::SomeClass (QObject *parent)
    : QObject (parent)
    {
    }

    int SomeClass::Get42 ()
    {
        return 42;
    }

    void SomeClass::handle42Changed (int newNum)
    {
        if (newNum != 42)
            throw std::runtime_error (""WTF? 42 isn't 42!"");

        emit gotEntity (Entity ());
    }
}
}
</code></pre>

<h2>Language</h2>

<ul>
<li>Use STL, it's cool.</li>
<li>Use Boost, it's cool.</li>
<li>Use exceptions, they're cool.</li>
<li>Don't reinvent the wheel, it's not cool.</li>
<li>Don't use preprocessor for anything other than include guards and Boost.PP black magic.</li>
<li>Prefer <code>#pragma once</code> over include guards.</li>
<li>Prefer C++11 lambdas over free functors/functions.</li>
<li>Prefer <code>qobject_cast</code> over <code>dynamic_cast</code>.</li>
<li>Prefer forward declarations to reduce compile time.</li>
<li>Pass objects by const reference wherever possible. That would speed up things and may reduce compile time since there would be more candidates for forward declaration.</li>
<li>Put member functions implementations in <code>.cpp</code>-file to reduce compile time.</li>
<li>Use <code>std::shared_ptr</code>. Except the obvious memory bookkeeping reason, one more is that <code>shared_ptr</code> allows the corresponding type to be known only on instantiation which usually happens in source file. This way you get one more chance to forward-declare the type in the header, further reducing compile time.</li>
<li>Use <code>std::unique_ptr</code>.</li>
<li>Consider Pimpl idiom. It can speed compilation a lot.</li>
<li>Forget about <code>malloc</code> and <code>free</code>. Use <code>new</code> and <code>delete</code> instead.</li>
<li>Resource acquisition is initialization, don't forget about it. You can once again use <code>std::shared_ptr</code> or <code>std::unique_ptr</code> with a custom deleter to call an arbitrary function when control gets out of scope, be it a database disconnect, call to <code>QSettings::endGroup()</code> after <code>beginGroup()</code> or whatever.</li>
</ul>

<h2>Example IDE settings</h2>

KDevelop is the IDE of choice for LeechCraft. It's a sophisticated IDE, supporting CMake projects, having awesome autocomplete features that can even handle Boost-rich code, and KDevelop 4.3 would also support features like lambdas, <code type=""cpp"">auto</code>s and variadic templates from C++11 when released.

The following settings make autoformatting the most close the LC's codestyle.

First, we make a custom codestyle in KDevelop's settings:
<img src=""http://files.leechcraft.org/kdevelop_code1.png"" alt=""Custom code style"" />
Please note the <em>Add Kate Modeline</em> checkbox on this screenshot.

The custom style's settings should be something like this:
<img src=""http://files.leechcraft.org/kdevelop_code2.png"" alt=""Custom code style settings"" />
<img src=""http://files.leechcraft.org/kdevelop_code3.png"" alt=""Custom code style settings"" />","<h2>Naming conventions</h2>

<ul>
<li>Local variables are named in <code>camelCase</code> with lower first letter.</li>
<li>Member variables are named in <code>CamelCase_</code> with upper first letter and an underscore in the end (stupid, I know, but that's the tradition).</li>
<li>Enums are named in <code>CamelCase</code> in singular form with upper first letter.</li>
<li>Enum members are named in <code>CamelCase</code>. Enum members are <em>always</em> used with corresponding enum scope qualifier (see C++11 scoped enums).</li>
<li>Global variables aren't named at all. They shouldn't exist in your code.</li>
<li>Try to make variables visually distinct from each other. Having <code>index1</code> and <code>indexl</code> near each other isn't a good idea.</li>
<li>Member functions that aren't invokable (aren't Qt signals nor slots) are named in <code>CamelCase</code> with upper first letter.</li>
<li>Invokable member functions (Qt signals and slots) are named in <code>camelCase</code> with lower first letter.</li>
<li>Global free functions are also named in <code>CamelCase</code> with upper first letter.</li>
<li>Local free functions are named in <code>CamelCase</code> with upper first letter. If possible, they should be in their own anonymous namespace.</li>
<li>File name should be like the class's name all in lower case.</li>
<li>There are generally two files per class: header file and source (implementation) file.</li>
</ul>

<h2><code>#include</code> order</h2>

<ol>
<li>If it's implementation file, the corresponding header file.</li>
<li>Standard C++/STL headers like <code>iostream</code> or <code>functional</code>. Prefer C++ headers (say, <code>cmath</code>) over C-style ones (<code>math.h</code>).</li>
<li>Boost headers.</li>
<li>Qt headers.</li>
<li>Any other library headers.</li>
<li>LeechCraft headers.</li>
<li>Your own files.</li>
</ol>

<h2>Variable declarations, function declarations and general things</h2>

<ul>
<li>Initialize each variable when declaring it, even if it's going to be assigned few lines later anyway.</li>
<li>Declare each variable on a separate line.</li>
<li>Attach star to the variable name (the only exception is return type declaration in function declaration/definition):
<pre><code type=""cpp-qt"">void* f (int *a)
{
    int *b = 0;
    int *c = *a;
    return b;
}</code></pre></li>
<li>&amp; meaning reference is attached to the type:
<pre><code type=""cpp-qt"">void g (const T& t, U& u);</code></pre></li>
<li>Types should be mentioned with full namespace in the signals/slots declarations and <code>QObject::connect()</code> calls since <code>moc</code> doesn't parse them well otherwise.</li>
<li>Never, never ever put <code>using</code>-declarations in your headers.</li>
<li>Put your code in <code>LeechCraft::YourPlugin</code> namespace.</li>
<li>Put your implementation code in <code>.cpp</code>-file in <code>LeechCraft::YourPlugin</code> namespace as well or prefix each function. Avoid <code>using</code>-directives since <code>lupdate</code> tool doesn't handle them and you'll end up with untranslated strings.</li>
<li>All the private variables and definitions like <code>Q_OBJECT</code> or <code>Q_INTERFACES</code> follows immediately after beginning of the class definition.</li>
<li>Don't put variable names in function declarations unless you plan to <code>doxygen</code> it.</li>
<li>Braces are always on new line and are the only character there.</li>
</ul>

<h2>Identation and line breaks</h2>

<ul>
<li>Use tabs to ident code. Set your tab width to 4 spaces, and in case of vim:
<pre>
:set shiftwidth=4
:set softtabstop=4
:set tabstop=4
</pre></li>
<li>Breaking inside function parameter list adds two tab levels.
<pre><code type=""cpp-qt"">int func (int a, int b,
        int c);</code></pre></li>
<li>Breaking an incomplete expression adds a tab level. Breaking inside each parenthesis pair adds one more tab level. Binary operators are in the end of the line, the <code>-></code> operator also stays on the same line, only the <code>.</code> (dot) operator goes to the next line.</li>
<li>It is OK to make long lines in case you break them at about 72 column.</li>
</ul>

<h2>Whitespaces</h2>

<ul>
<li>Unary operators are glued to their operands.
<pre><code type=""cpp-qt"">++a;</code></pre></li>
<li>Binary operators are surrounded by whitespaces from both sides.
<pre><code type=""cpp-qt"">c = a + b;
++a && !c;</code></pre></li>
<li>Parenthesis are surrounded by whitespaces only from the outer side and only if the other symbol isn't a brace.
<pre><code type=""cpp-qt"">((a && b) || (c + !d) && e)</code></pre></li>
<li>The only exception from the previous rule is the case when parenthesis are followed by a <code>.</code> or <code>-></code> operator or semicolon.
<pre><code type=""cpp-qt"">int a = f ();
a = f () + g ();
a += GetPointer ()->h ();
a -= GetReference ().DoStuff ();</code></pre></li>
</ul>

<h2>Examples</h2>

So, an example header file would be like:
<pre><code type=""cpp-qt"">#pragma once

#include <QObject>

namespace LeechCraft
{
struct Entity;

namespace YourCode
{
    class SomeClass : public QObject
    {
        Q_OBJECT
    public:
        SomeClass (QObject* = 0);

        int Get42 () const;
    public slots:
        void handle42Changed (int);
    signals:
        void gotEntity (const LeechCraft::Entity&);
    }
}
}
</code></pre>

The corresponding source file would be:
<pre><code type=""cpp-qt"">#include ""someclass.h""
#include <stdexcept>
#include <algorithm>
#include <memory>
#include <QString>
#include <interfaces/structures.h>
#include ""core.h""

namespace LeechCraft
{
namespace YourCode
{
    namespace
    {
        int func (int a, MyClass *f)
        {
            int result = f->GetID () +
                    SomeAnotherLongFunctionYouWillDefinitelyWantToWrap (a);
            result *= Core::Instance ().GetSomeCalculator ()->
                    Initialize ().GetFactor ();
            result /= Core::Instance ()
                    .AnotherReaaaallyLongFunction (result, a);
            if ((result == 42 &&
                        !a) ||
                    a == 42)
                std::cout << ""Truth is out there"" << std::endl;
            return result;
        }
    }

    SomeClass::SomeClass (QObject *parent)
    : QObject (parent)
    {
    }

    int SomeClass::Get42 ()
    {
        return 42;
    }

    void SomeClass::handle42Changed (int newNum)
    {
        if (newNum != 42)
            throw std::runtime_error (""WTF? 42 isn't 42!"");

        emit gotEntity (Entity ());
    }
}
}
</code></pre>

<h2>Language</h2>

<ul>
<li>Use STL, it's cool.</li>
<li>Use Boost, it's cool.</li>
<li>Use exceptions, they're cool.</li>
<li>Don't reinvent the wheel, it's not cool.</li>
<li>Don't use preprocessor for anything other than include guards and Boost.PP black magic.</li>
<li>Prefer <code>#pragma once</code> over include guards.</li>
<li>Prefer C++11 lambdas over free functors/functions.</li>
<li>Prefer <code>qobject_cast</code> over <code>dynamic_cast</code>.</li>
<li>Prefer forward declarations to reduce compile time.</li>
<li>Pass objects by const reference wherever possible. That would speed up things and may reduce compile time since there would be more candidates for forward declaration.</li>
<li>Put member functions implementations in <code>.cpp</code>-file to reduce compile time.</li>
<li>Use <code>std::shared_ptr</code>. Except the obvious memory bookkeeping reason, one more is that <code>shared_ptr</code> allows the corresponding type to be known only on instantiation which usually happens in source file. This way you get one more chance to forward-declare the type in the header, further reducing compile time.</li>
<li>Use <code>std::unique_ptr</code>.</li>
<li>Consider Pimpl idiom. It can speed compilation a lot.</li>
<li>Forget about <code>malloc</code> and <code>free</code>. Use <code>new</code> and <code>delete</code> instead.</li>
<li>Resource acquisition is initialization, don't forget about it. You can once again use <code>std::shared_ptr</code> or <code>std::unique_ptr</code> with a custom deleter to call an arbitrary function when control gets out of scope, be it a database disconnect, call to <code>QSettings::endGroup()</code> after <code>beginGroup()</code> or whatever.</li>
</ul>

<h2>Example IDE settings</h2>

KDevelop is the IDE of choice for LeechCraft. It's a sophisticated IDE, supporting CMake projects, having awesome autocomplete features that can even handle Boost-rich code, and KDevelop 4.3 would also support features like lambdas, <code type=""cpp"">auto</code>s and variadic templates from C++11 when released.

The following settings make autoformatting the most close the LC's codestyle.

First, we make a custom codestyle in KDevelop's settings:
<img src=""http://files.leechcraft.org/kdevelop_code1.png"" alt=""Custom code style"" />
Please note the <em>Add Kate Modeline</em> checkbox on this screenshot.

The custom style's settings should be something like this:
<img src=""http://files.leechcraft.org/kdevelop_code2.png"" alt=""Custom code style settings"" />
<img src=""http://files.leechcraft.org/kdevelop_code3.png"" alt=""Custom code style settings"" />"
66,book,Poshuku,1290674853,,"",""
67,book,Poshuku CleanWeb subscriptions list XML file format,1290675024,development-poshuku-cleanweb-subscriptions-list-xml-file-format,"Each subscription is defined by subscription element which must have url and name attribute and can also have optional purpose attribute. url's value is the abp:-schemed URL to the subscription, name is the name of this subscription. purpose is the purpose of the subscription — human-readable information about what this subscription blocks.

Since some subscriptions may be dependent on others, the file is hierarchical: <pre>subscription</pre>s can be nested.

And all this is better illustrated by example:

<code type=""xml""><?xml version=""1.0"" encoding=""UTF-8""?>
<subscriptions>
  <subscription url=""abp:subscribe?location=http%3A%2F%2Fruadlist%2Egooglecode%2Ecom%2Fsvn%2Ftrunk%2Fadblock%2Etxt&title=RuAdList"" name=""RuAdList"" purpose=""русский, українська"" />
  <subscription url=""abp:subscribe?location=http%3A%2F%2Fadblock%2Dchinalist%2Egooglecode%2Ecom%2Fsvn%2Ftrunk%2Fadblock%2Etxt&title=ChinaList"" name=""ChinaList"" purpose=""汉语"" />
  <subscription url=""abp:subscribe?location=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylist%2Etxt&title=EasyList"" name=""EasyList"">
   <subscription url=""abp:subscribe?location=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasyprivacy%2Etxt&title=EasyPrivacy&requiresLocation=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylist%2Etxt&requiresTitle=EasyList"" name=""EasyPrivacy"" purpose=""Privacy protection"" />
    <subscription url=""abp:subscribe?location=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylistgermany%2Etxt&title=EasyList Germany&requiresLocation=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylist%2Etxt&requiresTitle=EasyList"" name=""EasyList Germany"" purpose=""Deutsch"" />
  </subscription>
</subscriptions></code>","Each subscription is defined by subscription element which must have url and name attribute and can also have optional purpose attribute. url's value is the abp:-schemed URL to the subscription, name is the name of this subscription. purpose is the purpose of the subscription — human-readable information about what this subscription blocks.

Since some subscriptions may be dependent on others, the file is hierarchical: <pre>subscription</pre>s can be nested.

And all this is better illustrated by example:

<code type=""xml""><?xml version=""1.0"" encoding=""UTF-8""?>
<subscriptions>
  <subscription url=""abp:subscribe?location=http%3A%2F%2Fruadlist%2Egooglecode%2Ecom%2Fsvn%2Ftrunk%2Fadblock%2Etxt&title=RuAdList"" name=""RuAdList"" purpose=""русский, українська"" />
  <subscription url=""abp:subscribe?location=http%3A%2F%2Fadblock%2Dchinalist%2Egooglecode%2Ecom%2Fsvn%2Ftrunk%2Fadblock%2Etxt&title=ChinaList"" name=""ChinaList"" purpose=""汉语"" />
  <subscription url=""abp:subscribe?location=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylist%2Etxt&title=EasyList"" name=""EasyList"">
   <subscription url=""abp:subscribe?location=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasyprivacy%2Etxt&title=EasyPrivacy&requiresLocation=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylist%2Etxt&requiresTitle=EasyList"" name=""EasyPrivacy"" purpose=""Privacy protection"" />
    <subscription url=""abp:subscribe?location=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylistgermany%2Etxt&title=EasyList Germany&requiresLocation=https%3A%2F%2Feasylist%2Ddownloads%2Eadblockplus%2Eorg%2Feasylist%2Etxt&requiresTitle=EasyList"" name=""EasyList Germany"" purpose=""Deutsch"" />
  </subscription>
</subscriptions></code>"
68,book,Aggregator,1290675253,,"",""
69,book,Entity variants handled by Aggregator,1290803950,development-aggregator-entity-variants,"The algorithm is pretty simple.

If the <code>Entity::Entity_</code> cannot be converted to a <code>QUrl</code>, then Aggregator immediately decides that it can't handle the entity.

Then, <code>Entity::Mime_</code> is checked if it's <code>text/x-opml</code>. If it is, the scheme of the URL is checked. If it's <em>file</em>, <em>http</em> or <em>https</em>, then the OPML file is opened (in case of <em>file</em> scheme) or downloaded (in other case) and feeds from it are added.</code>.

If <code>Entity::Mime_</code> isn't <code>text/x-opml</code>, the following checks are performed, in order:
<ol>
<li>If URL's scheme is <em>feed</em>, the entity is considered to be a link to the feed in <em>feed://</em> format, and the feed is added.</li>
<li>If URL's scheme isn't <em>http</em> or <em>https</em>, the entity is rejected.</li>
<li>If <code>Entity::Mime_</code> isn't <em>application/atom+xml</em> or <em>application/rss+xml</em>, the entity is rejected.</li>
<li>If the <code>Entity::Additional_</code> map contains a value by the key <em>LinkRel</em>, the value is converted to string. If the resulting string is non-empty and it isn't equal to <em>alternate</em>, the entity is rejected.</li>
</ol>

If those checks pass, the feed is added with the URL contained in <code>Entity::Mime_</code>.

In either case, the following keys of <code>Entity::Additional_</code> are considered:
<dl>
<dt><em>ShowTrayIcon</em></dt>
<dd>The associated value is converted to <code>bool</code> and Aggregator's setting controlling Aggregator's tray icon is changed accordingly.</dd>
<dt><em>UpdateOnStartup</em></dt>
<dd>The associated value is converted to <code>bool</code> and corresponding Aggregator's setting is changed accordingly.</dd>
<dt><em>UpdateTimeout</em></dt>
<dd>The associated value is converted to <code>int</code> and the global interval between updates (in minutes) is updated to this value.</dd>
<dt><em>MaxArticles</em></dt>
<dd>The associated value is converted to <code>int</code> and the global limit for amount of articles in a channel is updated to this value.</dd>
<dt><em>MaxAge</em></dt>
<dd>The associated value is converted to <code>int</code> and the global limit for article age (in days) in a channel is updated to this value.</dd>
</dl>","The algorithm is pretty simple.

If the <code>Entity::Entity_</code> cannot be converted to a <code>QUrl</code>, then Aggregator immediately decides that it can't handle the entity.

Then, <code>Entity::Mime_</code> is checked if it's <code>text/x-opml</code>. If it is, the scheme of the URL is checked. If it's <em>file</em>, <em>http</em> or <em>https</em>, then the OPML file is opened (in case of <em>file</em> scheme) or downloaded (in other case) and feeds from it are added.</code>.

If <code>Entity::Mime_</code> isn't <code>text/x-opml</code>, the following checks are performed, in order:
<ol>
<li>If URL's scheme is <em>feed</em>, the entity is considered to be a link to the feed in <em>feed://</em> format, and the feed is added.</li>
<li>If URL's scheme isn't <em>http</em> or <em>https</em>, the entity is rejected.</li>
<li>If <code>Entity::Mime_</code> isn't <em>application/atom+xml</em> or <em>application/rss+xml</em>, the entity is rejected.</li>
<li>If the <code>Entity::Additional_</code> map contains a value by the key <em>LinkRel</em>, the value is converted to string. If the resulting string is non-empty and it isn't equal to <em>alternate</em>, the entity is rejected.</li>
</ol>

If those checks pass, the feed is added with the URL contained in <code>Entity::Mime_</code>.

In either case, the following keys of <code>Entity::Additional_</code> are considered:
<dl>
<dt><em>ShowTrayIcon</em></dt>
<dd>The associated value is converted to <code>bool</code> and Aggregator's setting controlling Aggregator's tray icon is changed accordingly.</dd>
<dt><em>UpdateOnStartup</em></dt>
<dd>The associated value is converted to <code>bool</code> and corresponding Aggregator's setting is changed accordingly.</dd>
<dt><em>UpdateTimeout</em></dt>
<dd>The associated value is converted to <code>int</code> and the global interval between updates (in minutes) is updated to this value.</dd>
<dt><em>MaxArticles</em></dt>
<dd>The associated value is converted to <code>int</code> and the global limit for amount of articles in a channel is updated to this value.</dd>
<dt><em>MaxAge</em></dt>
<dd>The associated value is converted to <code>int</code> and the global limit for article age (in days) in a channel is updated to this value.</dd>
</dl>"
70,book,Building from source,1404425698,development-building-from-source,"<h2>Prerequisites</h2>

<table>
<tr><th>Dependency</th><th><em>Version</em></th><th>Notes</th></tr>
<tr><td>Qt</td><td>≥4.8</td><td>For most new plugins Qt 4.8 is required.</td></tr>
<tr><td>Boost</td><td>≥1.51</td><td>The following libraries are required, besides header-only ones:<ul><li>date_time</li><li>filesystem</li><li>program_options</li><li>system</li><li>thread</li></ul></td></tr>
<tr><td>OpenSSL</td><td>≥0.9.8</td><td></td></tr>
<tr><td>PCRE</td><td>≥8.30</td><td>Optional (though recommended) Core dependency. Used by AdBlock and Azoth. Previous 8.x versions will also work though lack JIT support.</td></tr>
<tr><td><a href=""http://libtorrent.org""><strong>Rasterbar</strong> libtorrent</a></td><td>≥0.16.x</td><td>Unicode and DHT support is required.</td></tr>
<tr><td><a href=""http://qjson.sourceforge.net/"">QJson</a></td><td>≥0.7.0</td><td>Required for several plugins like SB2, Poshuku OnlineBookmarks, etc.</td></tr>
<tr><td>QXmpp</td><td>≥0.8.0</td><td></td></tr>
<tr><td>libmsn</td><td>≥4.1</td><td>Required for the Azoth Zheet plugin.</td></tr>
<tr><td>libotr</td><td>≥4.0.0</td><td>Required for the Azoth OTRoid plugin (3.x will also work though lack some features).</td></tr>
<tr><td>hunspell</td><td>≥1.3.0</td><td>Required for the Rosenthal plugin.</td></tr>
<tr><td>Speex</td><td>≥1.0</td><td>Required for the [143: Azoth] plugin compiled with <code type=""cpp"">ENABLE_MEDIACALLS</code>.</td></tr>
<tr><td>libtelepathy-qt4</td><td>≥0.9.0</td><td>Required for the [315: Azoth Astrality] plugin.</td></tr>
<tr><td>libpurple</td><td>≥2.10</td><td>Required for the [453: Azoth VelvetBird] plugin.</td></tr>
<tr><td>gstreamer</td><td>0.10 or ≥1.0</td><td>Required for the LMP plugin.</td></tr>
<tr><td>Taglib</td><td>≥1.7.0</td><td>Required for the LMP plugin.</td></tr>
<tr><td>libguess</td><td>≥1.0</td><td>Recommended for the LMP plugin.</td></tr>
<tr><td><a href=""http://github.com/eartle/liblastfm"">liblastfm</a></td><td>≥0.3.3</td><td>Required for the LastFMScrobble plugin.</td></tr>
<tr><td>ffmpeg</td><td>≥1.2.0</td><td>Used by the MusicZombie plugin (libav would not work thanks to differences in resampling code).</td></tr>
<tr><td><a href=""http://acoustid.org/chromaprint"">chromaprint</a></td><td>≥0.6</td><td>Used by the MusicZombie plugin.</td></tr>
<tr><td>poppler</td><td>≥0.24.0</td><td>Required for the Monocle PDF plugin (0.22.x will work too, but it has some issues with threading).</td></tr>
<tr><td>ghostscript</td><td>≥9.0</td><td>Required for the Monocle PostRus plugin.</td></tr>
<tr><td>djvu</td><td>≥3.5.24</td><td>Required for the Monocle Seen plugin.</td></tr>
<tr><td>Qwt</td><td>≥6.1</td><td>Required for the Lemon, Liznoo, Poleemery plugins and Core if graphs are enabled. Optional for LMP FrAdj.</td></tr>
<tr><td>libsensors</td><td>≥3.3.0</td><td>Required for the HotSensors plugin.</td></tr>
<tr><td>udev</td><td>≥180</td><td>Required for the DevMon plugin (*NIX-only).</td></tr>
<tr><td>X11</td><td>*</td><td>Required for KBSwitch, Krigstask, Mellonetray, SB2 and utility library (*NIX-only).</td></tr>
<tr><td><a href=""https://github.com/kypeli/kQOAuth"">kqoauth</a></td><td>≥0.98</td><td>Required for the Azoth WoodPecker and Blasq Spegnersi plugin.</td></tr>
<tr><td><a href=""http://github.com/0xd34df00d/Qross"">Qross</a></td><td>≥0.2.0</td><td>Required for the Qrosp plugin.</td></tr>
<tr><td>QScintilla2</td><td>≥2.6</td><td>Required for the Popishu plugin.</td></tr>
<tr><td>CMake</td><td>≥2.8.9</td><td></td></tr>
</table>

A pretty decent compiler is required for LeechCraft from master. gcc 4.8 and clang 3.4 will surely work.

<strong><em>Note:</em></strong> this guide suggests a *NIX-like OS like Linux or FreeBSD. Building with Windows is possible but is full of patching and heavy work, and it hasn't been properly documented yet.

<h3>Platform-specific prerequisites</h3>

<h4>X11</h4>

<table>
<tr><th>Dependency</th><th><em>Version</em></th><th>Notes</th></tr>
<tr><td>libX11</td><td></td><td>Required for Krigstask, Mellonetray, KBSwitch and Core (if X11 support library is enabled).</td></tr>
<tr><td>libXdamage</td><td></td><td>Required for Mellonetray.</td></tr>
<tr><td>libXcomposite</td><td></td><td>Required for Krigstask.</td></tr>
<tr><td>libxkbcommon</td><td></td><td>Required for KBSwitch.</td></tr>
<tr><td>libxkbfile</td><td></td><td>Required for KBSwitch.</td></tr>
</table>

<h2>Getting prerequesites</h2>

Some distros allow easy installation of all the required prerequesites, and the process is documented here.

<h3>Debian, Ubuntu</h3>

It's as simple as running the following from root:
<code type=""bash"">
sudo add-apt-repository ppa:tehnick/leechcraft-unstable
sudo apt-get update
sudo apt-get build-dep leechcraft-unstable
</code>

<h3>openSUSE</h3>

Execute the following replacing <em>openSUSE_Tumbleweed</em> with your distro version:
<code type=""bash"">
sudo zypper ar http://download.opensuse.org/repositories/home:Reki:leechcraft:masterbranch/openSUSE_Tumbleweed/home:Reki:leechcraft:masterbranch.repo
sudo zypper ref
sudo zypper si -d leechcraft
</code>

<h2>Getting sources</h2>

You can either download (an extremely outdated) source package from https://sourceforge.net/projects/leechcraft/files/ or check out the files from git (you will need <code type=""bash"">git</code> for this). The later is strongly advised.

To check out the sources from git, <code type=""bash"">cd</code> into a directory where you want <code type=""bash"">leechcraft</code> subdirectory to be placed. In this guide we assume it's <code type=""bash"">~/Programming</code>. Issue the following from that directory:
<code type=""bash"">
git clone git://github.com/0xd34df00d/leechcraft.git
</code>
This would create <code type=""bash"">~/Programming/leechcraft</code> and put the project's sources and commit history there. To later update the repository, just issue:
<code type=""bash"">
cd ~/Programming/leechcraft
git pull
</code>

<h2>Building and installing</h2>

We use so-called out-of-source builds. They support having different builds with different configurations simultaneously as well as easily remove the build directory if something goes wrong.
So, create a directory in <code type=""bash"">~/Programming/leechcraft</code>, say, <code type=""bash"">build</code>, and <code type=""bash"">cd</code> into it. Type
<code type=""bash"">
cmake -DCMAKE_BUILD_TYPE=BuildType ../src 
</code>
Here <em>BuildType</em> specifies what type of the build you want:
<dl>
<dt><pre>Release</pre></dt>
<dd>Release version with no debugging information and optimizations enabled.</dd>
<dt><pre>Debug</pre></dt>
<dd>Debug version with debugging information and no optimizations at all.</dd>
<dt><pre>RelWithDebInfo</pre></dt>
<dd>A version with both debugging information and optimizations enabled (recommended).</dd>
<dt><pre>MinSizeRel</pre></dt>
<dd>Release version with optimizations for producing executables of minimal size.</dd>
</dl>

Then, after <code type=""bash"">cmake</code> successfully prepares the build system, type <code type=""bash"">ccmake</code> and check the list of plugins to be built. You can enable or disable them there nicely. Alternatively, you can manually edit the <code type=""bash"">CMakeCache.txt</code> file in the build directory, modifying values of variables starting with <em>ENABLE_</em>.

After you've selected what you want to build, run <code type=""bash"">make</code> and have a cup of coffee while LeechCraft compiles. To compile things faster, append the <em>-jN</em> option, where <em>N</em> is number of cores you have. For a decent Core i7 system that would be <code type=""bash"">make -j8</code>, for example. If it fails, join the Jabber conference <a href=""xmpp:leechcraft@conference.jabber.ru"">leechcraft@conference.jabber.ru</code> and feel free to ask.

Become root and issue <code type=""bash"">make install</code> to install LeechCraft into <code type=""bash"">/usr/local</code>. That's it!

Please note that <strong>LeechCraft won't work without installing</strong>.

<h2>Uninstalling</h2>

<code type=""bash"">
cd ~/Programming/leechcraft/build
sudo cmake -P cmake_uninstall.cmake
</code>

<h2>Microsoft Windows</h2>

Hehe. It's tricky. Don't try.

More seriously, building on Win32 requires a good knowledge of the build process, Qt and Boost pecularities and various typical but subtle errors.

Nevertheless, if you are brave enough, you could follow the [179: Win32 building guide].

<h2>Troubleshooting</h2>

<h3>LeechCraft segfaults on startup</h3>

<code type=""bash"">make install</code> is required, really.

<h3>LeechCraft doesn't start, outputting into console complaints about liblcutil.so.0.5.0</h3>

If you get something like
<pre>
leechcraft: error while loading shared libraries: liblcutil.so.0.5.0: cannot open shared object file: No such file or directory
</pre>
then just run <code>ldconfig</code> from root, like, <code>sudo ldconfig</code>.

If you still can't run LeechCraft with the same error, check that
<code type=""bash"">
/usr/local/lib64
/usr/local/lib
</code>
are present in your <code type=""bash"">/etc/ld.so.conf</code>. For example, default Mandriva setups are known to miss these lines.

<h3>Linking/startup problems on FreeBSD/Mac OS X in BitTorrent plugin</h3>

If you get linking errors in <code type=""bash"">libleechcraft_bittorrent.so</code> (or <code type=""bash"">libleechcraft_bittorrent.dylib</code> on Mac OS X), particularly, something like:
<pre><code type=""bash"">Undefined symbols:
  ""boost::filesystem2::no_check(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)"", referenced from:
      LeechCraft::Plugins::BitTorrent::TorrentMaker::Start(LeechCraft::Plugins::BitTorrent::NewTorrentParams)in torrentmaker.cpp.o
ld: symbol(s) not found</code></pre>
make sure you are building with optimizations <em>enabled</em> (setting <code>CMAKE_BUILD_TYPE</code> to <em>Release</em> will do). Make sure there is only one Boost installation on your system or, at least, that the plugin (and libtorrent) is being linked to the same version of the Boost libraries that it's compiled with.

<h3>LeechCraft fails to build with your_compiler_name</h3>

Please see prerequesites.

<h3>CMake outputs `Package libtorrent-rasterbar was not found in the pkg-config search path` and fails with an error</h3>

The full error message is:
<code type=""bash"">
Package libtorrent-rasterbar was not found in the pkg-config search path.
Perhaps you should add the directory containing `libtorrent-rasterbar.pc'
to the PKG_CONFIG_PATH environment variable
No package 'libtorrent-rasterbar' found
</code>
If you get that, you should find where your <code type=""bash"">libtorrent-rasterbar.pc</code> (typically the <code type=""bash"">locate libtorrent-rasterbar.pc</code> command will do, though you would probably need to update its search base) is and issue the following command:
<code type=""bash"">
export PKG_CONFIG_PATH=""/path/to/your/libtorrent-rasterbar.pc""
</code>
and then re-run CMake in the same shell with the same command line.

If you re-configure LeechCraft often, you'd probably want to add this export declaration to your <code type=""bash"">~/.bashrc</code>.","<h2>Prerequisites</h2>

<table>
<tr><th>Dependency</th><th><em>Version</em></th><th>Notes</th></tr>
<tr><td>Qt</td><td>≥4.8</td><td>For most new plugins Qt 4.8 is required.</td></tr>
<tr><td>Boost</td><td>≥1.51</td><td>The following libraries are required, besides header-only ones:<ul><li>date_time</li><li>filesystem</li><li>program_options</li><li>system</li><li>thread</li></ul></td></tr>
<tr><td>OpenSSL</td><td>≥0.9.8</td><td></td></tr>
<tr><td>PCRE</td><td>≥8.30</td><td>Optional (though recommended) Core dependency. Used by AdBlock and Azoth. Previous 8.x versions will also work though lack JIT support.</td></tr>
<tr><td><a href=""http://libtorrent.org""><strong>Rasterbar</strong> libtorrent</a></td><td>≥0.16.x</td><td>Unicode and DHT support is required.</td></tr>
<tr><td><a href=""http://qjson.sourceforge.net/"">QJson</a></td><td>≥0.7.0</td><td>Required for several plugins like SB2, Poshuku OnlineBookmarks, etc.</td></tr>
<tr><td>QXmpp</td><td>≥0.8.0</td><td></td></tr>
<tr><td>libmsn</td><td>≥4.1</td><td>Required for the Azoth Zheet plugin.</td></tr>
<tr><td>libotr</td><td>≥4.0.0</td><td>Required for the Azoth OTRoid plugin (3.x will also work though lack some features).</td></tr>
<tr><td>hunspell</td><td>≥1.3.0</td><td>Required for the Rosenthal plugin.</td></tr>
<tr><td>Speex</td><td>≥1.0</td><td>Required for the [143: Azoth] plugin compiled with <code type=""cpp"">ENABLE_MEDIACALLS</code>.</td></tr>
<tr><td>libtelepathy-qt4</td><td>≥0.9.0</td><td>Required for the [315: Azoth Astrality] plugin.</td></tr>
<tr><td>libpurple</td><td>≥2.10</td><td>Required for the [453: Azoth VelvetBird] plugin.</td></tr>
<tr><td>gstreamer</td><td>0.10 or ≥1.0</td><td>Required for the LMP plugin.</td></tr>
<tr><td>Taglib</td><td>≥1.7.0</td><td>Required for the LMP plugin.</td></tr>
<tr><td>libguess</td><td>≥1.0</td><td>Recommended for the LMP plugin.</td></tr>
<tr><td><a href=""http://github.com/eartle/liblastfm"">liblastfm</a></td><td>≥0.3.3</td><td>Required for the LastFMScrobble plugin.</td></tr>
<tr><td>ffmpeg</td><td>≥1.2.0</td><td>Used by the MusicZombie plugin (libav would not work thanks to differences in resampling code).</td></tr>
<tr><td><a href=""http://acoustid.org/chromaprint"">chromaprint</a></td><td>≥0.6</td><td>Used by the MusicZombie plugin.</td></tr>
<tr><td>poppler</td><td>≥0.24.0</td><td>Required for the Monocle PDF plugin (0.22.x will work too, but it has some issues with threading).</td></tr>
<tr><td>ghostscript</td><td>≥9.0</td><td>Required for the Monocle PostRus plugin.</td></tr>
<tr><td>djvu</td><td>≥3.5.24</td><td>Required for the Monocle Seen plugin.</td></tr>
<tr><td>Qwt</td><td>≥6.1</td><td>Required for the Lemon, Liznoo, Poleemery plugins and Core if graphs are enabled. Optional for LMP FrAdj.</td></tr>
<tr><td>libsensors</td><td>≥3.3.0</td><td>Required for the HotSensors plugin.</td></tr>
<tr><td>udev</td><td>≥180</td><td>Required for the DevMon plugin (*NIX-only).</td></tr>
<tr><td>X11</td><td>*</td><td>Required for KBSwitch, Krigstask, Mellonetray, SB2 and utility library (*NIX-only).</td></tr>
<tr><td><a href=""https://github.com/kypeli/kQOAuth"">kqoauth</a></td><td>≥0.98</td><td>Required for the Azoth WoodPecker and Blasq Spegnersi plugin.</td></tr>
<tr><td><a href=""http://github.com/0xd34df00d/Qross"">Qross</a></td><td>≥0.2.0</td><td>Required for the Qrosp plugin.</td></tr>
<tr><td>QScintilla2</td><td>≥2.6</td><td>Required for the Popishu plugin.</td></tr>
<tr><td>CMake</td><td>≥2.8.9</td><td></td></tr>
</table>

A pretty decent compiler is required for LeechCraft from master. gcc 4.8 and clang 3.4 will surely work.

<strong><em>Note:</em></strong> this guide suggests a *NIX-like OS like Linux or FreeBSD. Building with Windows is possible but is full of patching and heavy work, and it hasn't been properly documented yet.

<h3>Platform-specific prerequisites</h3>

<h4>X11</h4>

<table>
<tr><th>Dependency</th><th><em>Version</em></th><th>Notes</th></tr>
<tr><td>libX11</td><td></td><td>Required for Krigstask, Mellonetray, KBSwitch and Core (if X11 support library is enabled).</td></tr>
<tr><td>libXdamage</td><td></td><td>Required for Mellonetray.</td></tr>
<tr><td>libXcomposite</td><td></td><td>Required for Krigstask.</td></tr>
<tr><td>libxkbcommon</td><td></td><td>Required for KBSwitch.</td></tr>
<tr><td>libxkbfile</td><td></td><td>Required for KBSwitch.</td></tr>
</table>

<h2>Getting prerequesites</h2>

Some distros allow easy installation of all the required prerequesites, and the process is documented here.

<h3>Debian, Ubuntu</h3>

It's as simple as running the following from root:
<code type=""bash"">
sudo add-apt-repository ppa:tehnick/leechcraft-unstable
sudo apt-get update
sudo apt-get build-dep leechcraft-unstable
</code>

<h3>openSUSE</h3>

Execute the following replacing <em>openSUSE_Tumbleweed</em> with your distro version:
<code type=""bash"">
sudo zypper ar http://download.opensuse.org/repositories/home:Reki:leechcraft:masterbranch/openSUSE_Tumbleweed/home:Reki:leechcraft:masterbranch.repo
sudo zypper ref
sudo zypper si -d leechcraft
</code>

<h2>Getting sources</h2>

You can either download (an extremely outdated) source package from https://sourceforge.net/projects/leechcraft/files/ or check out the files from git (you will need <code type=""bash"">git</code> for this). The later is strongly advised.

To check out the sources from git, <code type=""bash"">cd</code> into a directory where you want <code type=""bash"">leechcraft</code> subdirectory to be placed. In this guide we assume it's <code type=""bash"">~/Programming</code>. Issue the following from that directory:
<code type=""bash"">
git clone git://github.com/0xd34df00d/leechcraft.git
</code>
This would create <code type=""bash"">~/Programming/leechcraft</code> and put the project's sources and commit history there. To later update the repository, just issue:
<code type=""bash"">
cd ~/Programming/leechcraft
git pull
</code>

<h2>Building and installing</h2>

We use so-called out-of-source builds. They support having different builds with different configurations simultaneously as well as easily remove the build directory if something goes wrong.
So, create a directory in <code type=""bash"">~/Programming/leechcraft</code>, say, <code type=""bash"">build</code>, and <code type=""bash"">cd</code> into it. Type
<code type=""bash"">
cmake -DCMAKE_BUILD_TYPE=BuildType ../src 
</code>
Here <em>BuildType</em> specifies what type of the build you want:
<dl>
<dt><pre>Release</pre></dt>
<dd>Release version with no debugging information and optimizations enabled.</dd>
<dt><pre>Debug</pre></dt>
<dd>Debug version with debugging information and no optimizations at all.</dd>
<dt><pre>RelWithDebInfo</pre></dt>
<dd>A version with both debugging information and optimizations enabled (recommended).</dd>
<dt><pre>MinSizeRel</pre></dt>
<dd>Release version with optimizations for producing executables of minimal size.</dd>
</dl>

Then, after <code type=""bash"">cmake</code> successfully prepares the build system, type <code type=""bash"">ccmake</code> and check the list of plugins to be built. You can enable or disable them there nicely. Alternatively, you can manually edit the <code type=""bash"">CMakeCache.txt</code> file in the build directory, modifying values of variables starting with <em>ENABLE_</em>.

After you've selected what you want to build, run <code type=""bash"">make</code> and have a cup of coffee while LeechCraft compiles. To compile things faster, append the <em>-jN</em> option, where <em>N</em> is number of cores you have. For a decent Core i7 system that would be <code type=""bash"">make -j8</code>, for example. If it fails, join the Jabber conference <a href=""xmpp:leechcraft@conference.jabber.ru"">leechcraft@conference.jabber.ru</code> and feel free to ask.

Become root and issue <code type=""bash"">make install</code> to install LeechCraft into <code type=""bash"">/usr/local</code>. That's it!

Please note that <strong>LeechCraft won't work without installing</strong>.

<h2>Uninstalling</h2>

<code type=""bash"">
cd ~/Programming/leechcraft/build
sudo cmake -P cmake_uninstall.cmake
</code>

<h2>Microsoft Windows</h2>

Hehe. It's tricky. Don't try.

More seriously, building on Win32 requires a good knowledge of the build process, Qt and Boost pecularities and various typical but subtle errors.

Nevertheless, if you are brave enough, you could follow the [179: Win32 building guide].

<h2>Troubleshooting</h2>

<h3>LeechCraft segfaults on startup</h3>

<code type=""bash"">make install</code> is required, really.

<h3>LeechCraft doesn't start, outputting into console complaints about liblcutil.so.0.5.0</h3>

If you get something like
<pre>
leechcraft: error while loading shared libraries: liblcutil.so.0.5.0: cannot open shared object file: No such file or directory
</pre>
then just run <code>ldconfig</code> from root, like, <code>sudo ldconfig</code>.

If you still can't run LeechCraft with the same error, check that
<code type=""bash"">
/usr/local/lib64
/usr/local/lib
</code>
are present in your <code type=""bash"">/etc/ld.so.conf</code>. For example, default Mandriva setups are known to miss these lines.

<h3>Linking/startup problems on FreeBSD/Mac OS X in BitTorrent plugin</h3>

If you get linking errors in <code type=""bash"">libleechcraft_bittorrent.so</code> (or <code type=""bash"">libleechcraft_bittorrent.dylib</code> on Mac OS X), particularly, something like:
<pre><code type=""bash"">Undefined symbols:
  ""boost::filesystem2::no_check(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)"", referenced from:
      LeechCraft::Plugins::BitTorrent::TorrentMaker::Start(LeechCraft::Plugins::BitTorrent::NewTorrentParams)in torrentmaker.cpp.o
ld: symbol(s) not found</code></pre>
make sure you are building with optimizations <em>enabled</em> (setting <code>CMAKE_BUILD_TYPE</code> to <em>Release</em> will do). Make sure there is only one Boost installation on your system or, at least, that the plugin (and libtorrent) is being linked to the same version of the Boost libraries that it's compiled with.

<h3>LeechCraft fails to build with your_compiler_name</h3>

Please see prerequesites.

<h3>CMake outputs `Package libtorrent-rasterbar was not found in the pkg-config search path` and fails with an error</h3>

The full error message is:
<code type=""bash"">
Package libtorrent-rasterbar was not found in the pkg-config search path.
Perhaps you should add the directory containing `libtorrent-rasterbar.pc'
to the PKG_CONFIG_PATH environment variable
No package 'libtorrent-rasterbar' found
</code>
If you get that, you should find where your <code type=""bash"">libtorrent-rasterbar.pc</code> (typically the <code type=""bash"">locate libtorrent-rasterbar.pc</code> command will do, though you would probably need to update its search base) is and issue the following command:
<code type=""bash"">
export PKG_CONFIG_PATH=""/path/to/your/libtorrent-rasterbar.pc""
</code>
and then re-run CMake in the same shell with the same command line.

If you re-configure LeechCraft often, you'd probably want to add this export declaration to your <code type=""bash"">~/.bashrc</code>."
71,book,SeekThru,1290803321,,"",""
72,book,Entity variants handled by SeekThru,1290804062,development-seekthru-entity-variants,"SeekThru only handles the entity if <code>Entity::Entity_</code> could be converted to <code>QUrl</code>, its scheme is either <em>http</em> or <em>https</em> and <code>Entity::Mime_</code> is <em>application/opensearchdescription+xml</em>. In this case it adds the opensearch description at the given URL.","SeekThru only handles the entity if <code>Entity::Entity_</code> could be converted to <code>QUrl</code>, its scheme is either <em>http</em> or <em>https</em> and <code>Entity::Mime_</code> is <em>application/opensearchdescription+xml</em>. In this case it adds the opensearch description at the given URL."
73,book,New Life,1290803982,,"",""
74,book,Extending New Life with new importers,1290805313,development-extending-newlife-with-new-importers,"New Life's sources are located in <tt>/src/plugins/newlife</tt>.

Let's take the <a href=""http://akregator.kde.org/"">Akregator</a> importer as an example and look from the end to the beginning.

<h2>Registering the importer</h2>

Akregator importer registers itself within New Life by doing <code>Importers_ << new AkregatorImporter (this);</code> in file <tt>importwizard.cpp</tt>, in the <code>ImportWizard</code>'s constructor. Let's take a look at <code>AkregatorImporter</code> class now.

<h2>Writing the Importer class</h2>

Your importer should derive from the <code>AbstractImporter</code> class (which itself derives from <code>QObject</code>), which is defined in the <tt>abstractimporter.h</tt>. <code>AbstractImporter</code> has two pure virtual functions that you need to implement in your importer:
<code>
virtual QStringList GetNames () const = 0;
virtual QList<QWizardPage*> GetWizardPages () const = 0;
</code>

<code>GetNames</code> returns the list of names that will refer to your importer. Most likely, you will want to return the name of the application that the importer is working with. To find the exact name that was selected by the user in the wizard, you can use the <code>QString ImportWizard::GetSelectedName () const</code> function.

<code>GetWizardPages</code> returns the list of wizard pages from your importer. They will be added to the wizard if a name which belongs to your importer is selected. The pages are added to the wizard in the order they appear in the returned list. The last returned page should reimplement the <code>QWizardPage::nextId</code> function and return -1. <strong>Otherwise, the wizard will continue to the next registered importer</strong>.

Let's look how these virtuals are implemented in the @AkregatorImporter@.
<code>QStringList AkregatorImporter::GetNames () const
{
    return QStringList (""Akregator"");
}</code>
Here we return the list of just one entry, <code>Akregator</code>.

<code>GetWizardPages</code> returns a list of just one page, since we don't need more in this importer:
<code>QList<QWizardPage*> AkregatorImporter::GetWizardPages () const
{
    QList<QWizardPage*> result;
    result << ImportPage_;
    return result;
}</code>

<code>ImportPage</code> is <code>AkregatorImporter</code>'s member and is initialized in its constructor:
<code>
AkregatorImporter::AkregatorImporter (QWidget *parent)
: AbstractImporter (parent)
{
    ImportPage_ = new AkregatorImportPage ();
}
</code>

Please note that it's better to change the type of the <code>parent</code> constructor parameter to <code>ImportWizard*</code> (<code>ImportWizard *parent</code>) if you plan to use its <code>GetSelectedName</code> function (mentioned above).

Now let's see how the <code>AkregatorImportPage</code> is implemented.

<h2>Sample wizard page implementation</h2>

The <code>AkregatorImportPage</code> is declared as:
<code>class AkregatorImportPage : public QWizardPage
{
    Q_OBJECT

    Ui::FeedsSettingsImportPage Ui_;
public:
    AkregatorImportPage (QWidget* = 0);

    bool CheckValidity (const QString&) const;
    virtual bool isComplete () const;
    virtual int nextId () const;
    virtual void initializePage ();
private slots:
    void on_Browse__released ();
    void handleAccepted ();
signals:
    void gotEntity (const LeechCraft::DownloadEntity&);
};</code>

<code>Ui_</code> is the UI of the page created in Qt Designer. Refer to its documentation for more details.

<code>FeedsSettingsImportPage</code> is a common page. It contains:
<ul>
<li><code>ImportSetitngs_</code> checkbox. Usually it gives the user the freedom to import both data and source application's settings or data only.</li>
<li><code>FileLocation_</code> line edit. You can use it, for example, to allow the user to select a different location of source data/settings.</li>
<li><code>Browse_</code> push button.</li>
</ul>

Of course, you can create your own UI for your pages.

<code>gotEntity</code> signal is emitted when the import parameters are set and the import is accepted (by pressing ""Finish"" button in the wizard, for example). The corresponding <code>Entity</code> structure carries information about the imported data. An information passed using <code>Entity</code> depends on an agreement between your importer and a plugin which you are importing into, or by a common protocol defined by the targer plugin.

The constructor sets up the UI:
<code>AkregatorImportPage::AkregatorImportPage (QWidget *parent)
: QWizardPage (parent)
{
    Ui_.setupUi (this);
    Ui_.ImportSettings_->setText (Ui_.ImportSettings_->text ().arg (""Akregator""));

    setTitle (tr (""Akregator's feeds import""));
    setSubTitle (tr (""Select Akregator's feeds file and options""));
}</code>

Utility function <code>CheckValidity</code> checks whether the selected location (contents of <code>FileLocation_</code> line edit) is valid source of data or settings or not. It returns <code>true</code> if it is and <code>false</code> otherwise. In our case, we perform basic checks to see whether the file is a valid OPML document:
<code>bool AkregatorImportPage::CheckValidity (const QString& filename) const
{
    QFile file (filename);
    if (!file.exists () ||
            !file.open (QIODevice::ReadOnly))
        return false;

    QDomDocument document;
    if (!document.setContent (&file, true))
        return false;

    QDomElement root = document.documentElement ();
    if (root.tagName () != ""opml"")
        return false;

    QDomNodeList heads = root.elementsByTagName (""head"");
    if (heads.size () != 1 || !heads.at (0).isElement ())
        return false;

    QDomNodeList bodies = root.elementsByTagName (""body"");
    if (bodies.size () != 1 || !bodies.at (0).isElement ())
        return false;

    if (!bodies.at (0).toElement ().elementsByTagName (""outline"").size ())
        return false;

    return true;
}</code>

We reimplement the <code>QWizardPage::isComplete</code> function to notify the wizard whether the entered data is valid or not:
<code>bool AkregatorImportPage::isComplete () const
{
    return CheckValidity (Ui_.FileLocation_->text ());
}</code>

Our <code>QWizardPage::nextId</code> reimplementation always returns -1 since it's the only page in the importer and no pages should follow.
<code>int AkregatorImportPage::nextId () const
{
    return -1;
}</code>

Reimplementation of <code>QWizardPage::initializePage</code> initializes the page before the first show. This allows us to perform initializations which are only required if our importer's name was selected. For user convenience we also check the default file location whether it contains the correct file, and if it does, we use it.
<code>void AkregatorImportPage::initializePage ()
{
    connect (wizard (),
            SIGNAL (accepted ()),
            this,
            SLOT (handleAccepted ()));

    connect (this,
            SIGNAL (gotEntity (const LeechCraft::DownloadEntity&)),
            wizard (),
            SIGNAL (gotEntity (const LeechCraft::DownloadEntity&)));

    QString defaultFile = QDir::homePath () + ""/.kde/share/apps/akregator/data/feeds.opml"";
    if (CheckValidity (defaultFile))
        Ui_.FileLocation_->setText (defaultFile);
}</code>

In the <code>on_Browse__released</code> we show a file selection dialog:
<code>void AkregatorImportPage::on_Browse__released ()
{
    QString filename = QFileDialog::getOpenFileName (this,
            tr (""Select Akregator's OPML file""),

            QDir::homePath () + ""/.kde/share/apps/akregator/data"",
            tr (""OPML files (*.opml *.xml);;All files (*.*)""));
    if (filename.isEmpty ())
        return;

    if (!CheckValidity (filename))
    {
        QMessageBox::critical (this,
                tr (""LeechCraft""),
                tr (""The file you've selected is not a valid OPML file.""));
        return;
    }

    Ui_.FileLocation_->setText (filename);
}</code>

Finally, in the <code>handleAccepted</code> slot we check if the import settings are correct (just in case), create a suitable <code>Entity</code> structure, fill it with data and emit the <code>gotEntity</code> signal with that structure. We only fill it with settings if the corresponding check box is selected:
<code>void AkregatorImportPage::handleAccepted ()
{
    QString filename = Ui_.FileLocation_->text ();
    if (!CheckValidity (filename))
        return;

    DownloadEntity e = Util::MakeEntity (QUrl::fromLocalFile (filename),
            QString (),
            FromUserInitiated,
            ""text/x-opml"");

    if (Ui_.ImportSettings_->checkState () == Qt::Checked)
    {
        QSettings settings (QDir::homePath () + ""/.kde/share/config/akregatorrc"",
                QSettings::IniFormat);
        if (settings.status () == QSettings::NoError)
        {
            if (settings.contains (""Show Tray Icon""))
                e.Additional_ [""ShowTrayIcon""] = settings.value (""Show Tray Icon"");
            if (settings.contains (""Fetch On Startup""))
                e.Additional_ [""UpdateOnStartup""] = settings.value (""Fetch On Startup"");
            if (settings.contains (""Auto Fetch Interval""))
                e.Additional_ [""UpdateTimeout""] = settings.value (""Auto Fetch Interval"");

            settings.beginGroup (""Archive"");
            if (settings.contains (""Max Article Number""))
                e.Additional_ [""MaxArticles""] = settings.value (""Max Article Number"");
            if (settings.contains (""Max Article Age""))
                e.Additional_ [""MaxAge""] = settings.value (""Max Article Age"");
            settings.endGroup ();

            e.Additional_ [""UserVisibleName""] = tr (""Akregator settings"");
        }
        else
            QMessageBox::critical (0,
                    tr (""LeechCraft""),
                    tr (""Could not access or parse Akregator settings.""));
    }

    emit gotEntity (e);
}</code>

Documentation for <code>Entity</code> could be found in documentation for the corresponding plugin, typically, by the ""entity handlers"" tag.

<code>Notes</code>

<ul>
<li>Please note once again that the final page of your importer should return -1 from <code>nextId</code> overload.</li>
<li>Don't forget to add all your <em>*.ui</em>, <em>*.h</em> and <em>*.cpp</em> files to the <em>CMakeLists.txt</em>.</li>
</ul>","New Life's sources are located in <tt>/src/plugins/newlife</tt>.

Let's take the <a href=""http://akregator.kde.org/"">Akregator</a> importer as an example and look from the end to the beginning.

<h2>Registering the importer</h2>

Akregator importer registers itself within New Life by doing <code>Importers_ << new AkregatorImporter (this);</code> in file <tt>importwizard.cpp</tt>, in the <code>ImportWizard</code>'s constructor. Let's take a look at <code>AkregatorImporter</code> class now.

<h2>Writing the Importer class</h2>

Your importer should derive from the <code>AbstractImporter</code> class (which itself derives from <code>QObject</code>), which is defined in the <tt>abstractimporter.h</tt>. <code>AbstractImporter</code> has two pure virtual functions that you need to implement in your importer:
<code>
virtual QStringList GetNames () const = 0;
virtual QList<QWizardPage*> GetWizardPages () const = 0;
</code>

<code>GetNames</code> returns the list of names that will refer to your importer. Most likely, you will want to return the name of the application that the importer is working with. To find the exact name that was selected by the user in the wizard, you can use the <code>QString ImportWizard::GetSelectedName () const</code> function.

<code>GetWizardPages</code> returns the list of wizard pages from your importer. They will be added to the wizard if a name which belongs to your importer is selected. The pages are added to the wizard in the order they appear in the returned list. The last returned page should reimplement the <code>QWizardPage::nextId</code> function and return -1. <strong>Otherwise, the wizard will continue to the next registered importer</strong>.

Let's look how these virtuals are implemented in the @AkregatorImporter@.
<code>QStringList AkregatorImporter::GetNames () const
{
    return QStringList (""Akregator"");
}</code>
Here we return the list of just one entry, <code>Akregator</code>.

<code>GetWizardPages</code> returns a list of just one page, since we don't need more in this importer:
<code>QList<QWizardPage*> AkregatorImporter::GetWizardPages () const
{
    QList<QWizardPage*> result;
    result << ImportPage_;
    return result;
}</code>

<code>ImportPage</code> is <code>AkregatorImporter</code>'s member and is initialized in its constructor:
<code>
AkregatorImporter::AkregatorImporter (QWidget *parent)
: AbstractImporter (parent)
{
    ImportPage_ = new AkregatorImportPage ();
}
</code>

Please note that it's better to change the type of the <code>parent</code> constructor parameter to <code>ImportWizard*</code> (<code>ImportWizard *parent</code>) if you plan to use its <code>GetSelectedName</code> function (mentioned above).

Now let's see how the <code>AkregatorImportPage</code> is implemented.

<h2>Sample wizard page implementation</h2>

The <code>AkregatorImportPage</code> is declared as:
<code>class AkregatorImportPage : public QWizardPage
{
    Q_OBJECT

    Ui::FeedsSettingsImportPage Ui_;
public:
    AkregatorImportPage (QWidget* = 0);

    bool CheckValidity (const QString&) const;
    virtual bool isComplete () const;
    virtual int nextId () const;
    virtual void initializePage ();
private slots:
    void on_Browse__released ();
    void handleAccepted ();
signals:
    void gotEntity (const LeechCraft::DownloadEntity&);
};</code>

<code>Ui_</code> is the UI of the page created in Qt Designer. Refer to its documentation for more details.

<code>FeedsSettingsImportPage</code> is a common page. It contains:
<ul>
<li><code>ImportSetitngs_</code> checkbox. Usually it gives the user the freedom to import both data and source application's settings or data only.</li>
<li><code>FileLocation_</code> line edit. You can use it, for example, to allow the user to select a different location of source data/settings.</li>
<li><code>Browse_</code> push button.</li>
</ul>

Of course, you can create your own UI for your pages.

<code>gotEntity</code> signal is emitted when the import parameters are set and the import is accepted (by pressing ""Finish"" button in the wizard, for example). The corresponding <code>Entity</code> structure carries information about the imported data. An information passed using <code>Entity</code> depends on an agreement between your importer and a plugin which you are importing into, or by a common protocol defined by the targer plugin.

The constructor sets up the UI:
<code>AkregatorImportPage::AkregatorImportPage (QWidget *parent)
: QWizardPage (parent)
{
    Ui_.setupUi (this);
    Ui_.ImportSettings_->setText (Ui_.ImportSettings_->text ().arg (""Akregator""));

    setTitle (tr (""Akregator's feeds import""));
    setSubTitle (tr (""Select Akregator's feeds file and options""));
}</code>

Utility function <code>CheckValidity</code> checks whether the selected location (contents of <code>FileLocation_</code> line edit) is valid source of data or settings or not. It returns <code>true</code> if it is and <code>false</code> otherwise. In our case, we perform basic checks to see whether the file is a valid OPML document:
<code>bool AkregatorImportPage::CheckValidity (const QString& filename) const
{
    QFile file (filename);
    if (!file.exists () ||
            !file.open (QIODevice::ReadOnly))
        return false;

    QDomDocument document;
    if (!document.setContent (&file, true))
        return false;

    QDomElement root = document.documentElement ();
    if (root.tagName () != ""opml"")
        return false;

    QDomNodeList heads = root.elementsByTagName (""head"");
    if (heads.size () != 1 || !heads.at (0).isElement ())
        return false;

    QDomNodeList bodies = root.elementsByTagName (""body"");
    if (bodies.size () != 1 || !bodies.at (0).isElement ())
        return false;

    if (!bodies.at (0).toElement ().elementsByTagName (""outline"").size ())
        return false;

    return true;
}</code>

We reimplement the <code>QWizardPage::isComplete</code> function to notify the wizard whether the entered data is valid or not:
<code>bool AkregatorImportPage::isComplete () const
{
    return CheckValidity (Ui_.FileLocation_->text ());
}</code>

Our <code>QWizardPage::nextId</code> reimplementation always returns -1 since it's the only page in the importer and no pages should follow.
<code>int AkregatorImportPage::nextId () const
{
    return -1;
}</code>

Reimplementation of <code>QWizardPage::initializePage</code> initializes the page before the first show. This allows us to perform initializations which are only required if our importer's name was selected. For user convenience we also check the default file location whether it contains the correct file, and if it does, we use it.
<code>void AkregatorImportPage::initializePage ()
{
    connect (wizard (),
            SIGNAL (accepted ()),
            this,
            SLOT (handleAccepted ()));

    connect (this,
            SIGNAL (gotEntity (const LeechCraft::DownloadEntity&)),
            wizard (),
            SIGNAL (gotEntity (const LeechCraft::DownloadEntity&)));

    QString defaultFile = QDir::homePath () + ""/.kde/share/apps/akregator/data/feeds.opml"";
    if (CheckValidity (defaultFile))
        Ui_.FileLocation_->setText (defaultFile);
}</code>

In the <code>on_Browse__released</code> we show a file selection dialog:
<code>void AkregatorImportPage::on_Browse__released ()
{
    QString filename = QFileDialog::getOpenFileName (this,
            tr (""Select Akregator's OPML file""),

            QDir::homePath () + ""/.kde/share/apps/akregator/data"",
            tr (""OPML files (*.opml *.xml);;All files (*.*)""));
    if (filename.isEmpty ())
        return;

    if (!CheckValidity (filename))
    {
        QMessageBox::critical (this,
                tr (""LeechCraft""),
                tr (""The file you've selected is not a valid OPML file.""));
        return;
    }

    Ui_.FileLocation_->setText (filename);
}</code>

Finally, in the <code>handleAccepted</code> slot we check if the import settings are correct (just in case), create a suitable <code>Entity</code> structure, fill it with data and emit the <code>gotEntity</code> signal with that structure. We only fill it with settings if the corresponding check box is selected:
<code>void AkregatorImportPage::handleAccepted ()
{
    QString filename = Ui_.FileLocation_->text ();
    if (!CheckValidity (filename))
        return;

    DownloadEntity e = Util::MakeEntity (QUrl::fromLocalFile (filename),
            QString (),
            FromUserInitiated,
            ""text/x-opml"");

    if (Ui_.ImportSettings_->checkState () == Qt::Checked)
    {
        QSettings settings (QDir::homePath () + ""/.kde/share/config/akregatorrc"",
                QSettings::IniFormat);
        if (settings.status () == QSettings::NoError)
        {
            if (settings.contains (""Show Tray Icon""))
                e.Additional_ [""ShowTrayIcon""] = settings.value (""Show Tray Icon"");
            if (settings.contains (""Fetch On Startup""))
                e.Additional_ [""UpdateOnStartup""] = settings.value (""Fetch On Startup"");
            if (settings.contains (""Auto Fetch Interval""))
                e.Additional_ [""UpdateTimeout""] = settings.value (""Auto Fetch Interval"");

            settings.beginGroup (""Archive"");
            if (settings.contains (""Max Article Number""))
                e.Additional_ [""MaxArticles""] = settings.value (""Max Article Number"");
            if (settings.contains (""Max Article Age""))
                e.Additional_ [""MaxAge""] = settings.value (""Max Article Age"");
            settings.endGroup ();

            e.Additional_ [""UserVisibleName""] = tr (""Akregator settings"");
        }
        else
            QMessageBox::critical (0,
                    tr (""LeechCraft""),
                    tr (""Could not access or parse Akregator settings.""));
    }

    emit gotEntity (e);
}</code>

Documentation for <code>Entity</code> could be found in documentation for the corresponding plugin, typically, by the ""entity handlers"" tag.

<code>Notes</code>

<ul>
<li>Please note once again that the final page of your importer should return -1 from <code>nextId</code> overload.</li>
<li>Don't forget to add all your <em>*.ui</em>, <em>*.h</em> and <em>*.cpp</em> files to the <em>CMakeLists.txt</em>.</li>
</ul>"
75,book,BitTorrent,1290806638,,"",""
76,book,Entity variants handled by BitTorrent,1290809988,development-bittorrent-entity-variants,"<code>Entity::Entity_</code> should be either <code>QUrl</code> or <code>QByteArray</code>. In all other cases the entity is rejected.

<ol>
<li><code>Entity::Entity_</code> is a <code>QUrl</code>
Next, the URL's scheme is checked:
<ol>
<li><em>magnet</em>
If the query part contains the <em>xt=urn:btih:</em> part, the entity is accepted. If it doesn't, the entity is rejected.
If the query part contains the key-value pair with <em>kt</em> pair, the corresponding value is split into list of strings by '+' symbol, and the resulting strings are interpreted as human-readable tags of the torrent.</li>
<li><em>file</em>
The URL is interpreted as a local file URL. If the file specified by the URL doesn't exist or isn't readable, the entity is rejected.
Else, if it exists and is readable, it is checked whether it is less than the limit for torrent file size (set by user and contained in the <em>MaxAutoTorrentSize</em> property), and if it isn't, the entity is rejected. If it is less then the limit, it is read and checked for being a valid torrent file, and the entity is accepted or rejected correspondingly.</li></ol></li>
<li><code>Entity::Entity_</code> is a <code>QByteArray</code>
The byte array is checked whether it is a valid torrent file data. If it is, the entity is accepted and the torrent is added, otherwise the entity is rejected.</li>
</ol>

The following keys in the <code>Entity::Additional_</code> map are checked:
<dl>
<dt><code> Tags</code></dt>
<dd><code>QStringList</code> with tag IDs for this item. Please note that the first symbol is space.</dd>
<dt><code>TryToStreamLive</code></dt>
<dd>If the value is of type <code>bool</code> and is <code>true</code>, the special mode of live streaming will be enabled.</dd>
</dl>","<code>Entity::Entity_</code> should be either <code>QUrl</code> or <code>QByteArray</code>. In all other cases the entity is rejected.

<ol>
<li><code>Entity::Entity_</code> is a <code>QUrl</code>
Next, the URL's scheme is checked:
<ol>
<li><em>magnet</em>
If the query part contains the <em>xt=urn:btih:</em> part, the entity is accepted. If it doesn't, the entity is rejected.
If the query part contains the key-value pair with <em>kt</em> pair, the corresponding value is split into list of strings by '+' symbol, and the resulting strings are interpreted as human-readable tags of the torrent.</li>
<li><em>file</em>
The URL is interpreted as a local file URL. If the file specified by the URL doesn't exist or isn't readable, the entity is rejected.
Else, if it exists and is readable, it is checked whether it is less than the limit for torrent file size (set by user and contained in the <em>MaxAutoTorrentSize</em> property), and if it isn't, the entity is rejected. If it is less then the limit, it is read and checked for being a valid torrent file, and the entity is accepted or rejected correspondingly.</li></ol></li>
<li><code>Entity::Entity_</code> is a <code>QByteArray</code>
The byte array is checked whether it is a valid torrent file data. If it is, the entity is accepted and the torrent is added, otherwise the entity is rejected.</li>
</ol>

The following keys in the <code>Entity::Additional_</code> map are checked:
<dl>
<dt><code> Tags</code></dt>
<dd><code>QStringList</code> with tag IDs for this item. Please note that the first symbol is space.</dd>
<dt><code>TryToStreamLive</code></dt>
<dd>If the value is of type <code>bool</code> and is <code>true</code>, the special mode of live streaming will be enabled.</dd>
</dl>"
77,book,CSTP,1290810102,,"",""
78,book,Entity variants handled by CSTP,1290810526,development-cstp-entity-variants,"<code>Entity::Entity_</code> could contain data of two types: either <code>QNetworkReply*</code> or <code>QUrl</code>. In all other cases the entity is automatically rejected.

If <code>Entity::Entity_</code> could be converted to <code>QNetworkReply*</code>, the entity is accepted and that reply is downloaded.

If <code>Entity::Entity_</code> could be converted to <code>QUrl</code> and its scheme is <em>file</em>, <em>http</em> or <em>https</em>, the entity is accepted. Otherwise it is rejected.","<code>Entity::Entity_</code> could contain data of two types: either <code>QNetworkReply*</code> or <code>QUrl</code>. In all other cases the entity is automatically rejected.

If <code>Entity::Entity_</code> could be converted to <code>QNetworkReply*</code>, the entity is accepted and that reply is downloaded.

If <code>Entity::Entity_</code> could be converted to <code>QUrl</code> and its scheme is <em>file</em>, <em>http</em> or <em>https</em>, the entity is accepted. Otherwise it is rejected."
79,book,Writing plugins,1310086027,development-writing-plugins,"The whole Doxygen-generated Core API docs are located <a href=""http://doc.leechcraft.org/core/"" target=""_blank"">here</a>.","The whole Doxygen-generated Core API docs are located <a href=""http://doc.leechcraft.org/core/"" target=""_blank"">here</a>."
80,book,LeechCraft architecture,1301605473,development-leechcraft-architecture,"        <p>LeechCraft is plugin-based: LeechCraft Core only ensures correct loading and initialization order of plugins, initializes them, interconnects them and routes messages in between, while all the real work like      BitTorrent implementation is done by plugins. Core also performs some common tasks like showing GUI to the user, merging settings from different plugins into one dialog or sharing cache and cookie base.</p>                          <p>When LeechCraft starts up, it searches for plugins in directories relevant to the platform which it runs under. Plugins are basically just dynamic objects (<code class=""filename"">libleechcraft_*.so</code> on *NIX and <code class=""filename"">libleechcraft_*.dll</code> on Windows) being loaded by LeechCraft core through <code class=""function"">dlopen</code> on *NIX and <code class=""function"">LoadLibrary</code> on Windows at runtime.     However, a plugin («virtual plugin») may be provided by another plugin («adaptor plugin») instead of being loaded from a shared library by LeechCraft Core. Virtual plugins are subject to the same plugin behavior rules       mentioned a couple of paragraphs below.</p>                                                                                                                                                                                             <p>Each plugin should have a class, an object of which is exposed via Qt's <code class=""function"">Q_EXPORT_PLUGIN2</code> macro. The object of this class is created internally by Qt in that macro and may be obtained via <code class=""function"">QPluginLoader::instance</code> method, if <code class=""classname"">QPluginLoader</code> is used to load the library (and it is in LeechCraft). So let's call that object the <em>plugin instance      object</em> or just instance object.</p>                                                                                                                                                                                                <p>The exported class should obviously be a <code class=""classname"">QObject</code> and also implement at least <code class=""classname"">IInfo</code> interface in order to be recognized by LeechCraft.</p>                      <p>When LeechCraft starts up, it initializes the plugins it finds. Initialization is done in two passes: first, <code class=""function"">IInfo::Init</code> is called on each found plugin, then, after all plugins have  passed the first pass of initialization, <code class=""function"">IInfo::SecondInit</code> is called. So, as a consequence, you basically cannot rely on other plugins before <code class=""function"">IInfo::SecondInit</code>,    particularly in <code class=""function"">IInfo::Init</code>. So, you must not request the list of plugins, emit messages, etc before <code class=""function"">IInfo::SecondInit</code> is called. However, after <code              class=""function"">IInfo::Init</code> your plugin must be in a correct and usable state, because other plugins may begin to use it. Basically that means that you need to initialize all your datamembers in <code                class=""function"">IInfo::Init</code>.</p>

		<p>Plugins can communicate with each other either via a set of interfaces (which is based on but not limited to default LeechCraft interfaces found in <code class=""filename"">/src/interfaces/</code> directory) or using the messaging system.</p>
		<p>Let's consider each of these methods.</p>
		<h2>Message-based communication</h2>
			
			<p>This method is more useful when you don't know the exact plugin, or, at least, what this plugin looks like (what interfaces it implements) and just talking by such messages with other plugins is OK for you.</p>
			<p>Communcation is done using <code>LeechCraft::Entity</code> (found in <code class=""filename"">/src/interfaces/structures.h</code>) structure which can be considered as a packet or a message. Plugins send these <code>Entity</code> messages, LeechCraft Core catches them, and… Here the story begins.</p>
			<p>So, you have two types of messages. Same <code>Entity</code> is used for both of them, and they differ only in the way of sending them out of your plugin.</p>
			<p>First type of messages is <em>notification</em>. It's used to notify Core or other plugins that a new entity appeared, but your plugin doesn't care what would happen with it after the announcement.</p>
			<p>Let's consider a BitTorrent client that has just finished a download as an example. It would <em>notify</em> other parts of LeechCraft about files it just finished downloading but it doesn't care what will happen with them next, would they be handled or not, etc.</p>
			<p>Because the result of such a message isn't required at the point of notification, the signal used to send this message doesn't block. Instead, it queues the message in the main event loop and returns immediately, handling all the delivery duty later, when control gets back to the event loop.</p>
			<p>To send a <em>notification</em> message, use the
				</p><div class=""funcsynopsis"">
					<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void gotEntity(</code></td><td>LeechCraft::Entity *<code>entity</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
				</div><p>
				signal. Just declare it in your plugin instance object (the one you export with <code class=""function"">Q_EXPORT_PLUGIN2</code>), and LeechCraft core will automatically detect it at runtime.</p>
			<p>Second type is <em>delegation request</em>. It's used to <em>delegate</em> a task to another plugin and hope there is such plugin that can handle it. This way you get access to the plugin that would actually handle the task and can communicate with it. The corresponding signal blocks.</p>
			<p>For instance, consider the Aggregator feed reader. It doesn't download feeds itself, instead, it delegates them to another plugin by emitting a <em>delegation request</em>. After returning from the signal used to emit such a message, the sender plugin will know whether the entity was actually delegated, and if it was, which plugin is handling it.</p>
			<p>To send a <em>delegation request</em>, use the
				</p><div class=""funcsynopsis"">
					<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void delegateEntity(</code></td><td>LeechCraft::Entity *<code>entity</code>, </td></tr><tr><td> </td><td>int *<code>id</code> = 0, </td></tr><tr><td> </td><td>QObject **<code>handler</code> = 0<code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
				</div><p>
				signal. Here, if the delegation was successful, <em class=""parameter""><code>handler</code></em> would point to the object that handles this delegation request and <em class=""parameter""><code>id</code></em> would be the ID of the task in that handler. It's guaranteed to be a some non-negative value. To check if the delegation request was successful, the following trick is commonly applied: before emitting the <code class=""function"">delegateEntity</code> signal, set the <em class=""parameter""><code>id</code></em> to some negative value like -1 and after emitting check if it is still -1. If it is, the delegation failed.</p>
				<div class=""example""><a id=""id394892""></a><p class=""title"">Example 2.1. Delegating an entity and checking success of delegation</p><div class=""example-contents"">
					
					<p>In this example we emit a delegation entity for downloading a given <em class=""parameter""><code>url</code></em> to <em class=""parameter""><code>location</code></em> with task parameters commonly used for internal LeechCraft tasks (a user does not have to know about the process of downloading news feeds, for example). We check if the delegation was successful, and if it failed, we use <code class=""function"">LeechCraft::Util::MakeNotification</code> to create a user-notification (an <code>Entity</code> that represents some notification for the user, not to be confused with notification <code>Entity</code>) entity with a human-readable error title, message and priority, and we emit it as a notification via <code class=""function"">gotEntity</code>. Actually, this is a real piece of code from LackMan plugin, the package manager.</p>
					<code>
Entity e = Util::MakeEntity (url,
		location,
		LeechCraft::Internal |
			LeechCraft::DoNotNotifyUser |
			LeechCraft::DoNotSaveInHistory |
			LeechCraft::NotPersistent |
			LeechCraft::DoNotAnnounceEntity);
int id = -1;
QObject *pr;
emit delegateEntity (e, &amp;id, &amp;pr);
if (id == -1)
{
	emit gotEntity (Util::MakeNotification (tr (""Error fetching repository""),
			tr (""Could not find plugin to fetch repository information for %1."")
				.arg (url.toString ()),
			PCritical_));
	return;
}
					</code>
				</div></div><br class=""example-break"" />
			<p>Sometimes you will need to know if LeechCraft can handle a particular entity here and now. For example, Poshuku plugin, the web browser, checks what external resources (like RSS feeds or OpenSearch descriptions) can be handled upon page load and shows actions for handling only those that can be handled.</p>
			<p>In order to check if the particular entity may be handled, use the
				</p><div class=""funcsynopsis"">
					<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void couldHandle(</code></td><td>const LeechCraft::Entity&amp; <code>entity</code>, </td></tr><tr><td> </td><td>bool *<code>could</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
				</div><p>
				signal. This signal blocks. It returns either after Core finds first plugin that's able to handle the <em class=""parameter""><code>entity</code></em>, or all queried plugins refuse to handle it. The result is stored in the variable pointed by <em class=""parameter""><code>could</code></em>.</p>
			<p>It's generally a bad idea to store the result of this function for a long time because plugins may dynamically choose to refuse or accept entities, but typically it's safe to assume that the result wouldn't change until the control gets back to the event loop.</p>
		</div>
		<h2>Interfaces-based communication</h2>
			
			<p>This is a much simpler approach, but it is much more «static» as well. Once you have a pointer to <code class=""classname"">QObject</code> you want to communicate with, you can try to <code class=""function"">qobject_cast</code> it to the interface you want.</p>
			<p>There are basically three ways to obtain a pointer to another plugin:
				</p><div class=""itemizedlist""><ul class=""itemizedlist"" type=""disc""><li class=""listitem""><p>It may be set by LeechCraft Core in its <code class=""function"">delegateEntity</code> handler (see previous section for more information): the third parameter of this signal is the pointer to the pointer to the handler of the entity.</p></li><li class=""listitem""><p>It may be obtained by your plugin in <code class=""function"">IInfo::SetProvider</code>, have you returned the proper dependencies list from either <code class=""function"">IInfo::Needs</code> or <code class=""function"">IInfo::Uses</code>.</p></li><li class=""listitem""><p>You may obtain the list of all plugins yourself via the plugins manager that you can access via <code class=""function"">ICoreProxy::GetPluginsManager</code>. The <code class=""classname"">ICoreProxy</code> is passed to your <code class=""function"">IInfo::Init</code>.</p></li></ul></div><p>
			</p>
			<p>Let us consider a couple of examples illustrating various concepts of working with other plugins.</p>
			<div class=""example""><a id=""id395077""></a><p class=""title"">Example 2.2. Getting any available plugin that implements <code class=""classname"">IWebBrowser</code>.</p><div class=""example-contents"">
				
				<p>This is the real example from the Aggregator. It's assumed that the <code class=""classname"">ICoreProxy</code> passed to your <code class=""function"">IInfo::Init</code> is stored as <code class=""varname"">Proxy_</code>.</p>
				<code>

IWebBrowser* Core::GetWebBrowser () const
{
    IPluginsManager *pm = Proxy_-&gt;GetPluginsManager ();
    QObjectList browsers = pm-&gt;Filter&lt;IWebBrowser*&gt; (pm-&gt;GetAllPlugins ());
    return browsers.size () ?
        qobject_cast&lt;IWebBrowser*&gt; (browsers.at (0)) :
        0;
}

				</code>
			</div></div><br class=""example-break"" />
			<div class=""example""><a id=""id395111""></a><p class=""title"">Example 2.3. More sophisticated task delegation and error handling.</p><div class=""example-contents"">
				
				<p>This is another bunch of code taken from the Aggregator. This is how it delegates the downloading of fresh versions of feed files to another plugin.</p>
				<code>

void Core::UpdateFeed (const QString&amp; url)
{
    QList&lt;int&gt; keys = PendingJobs_.keys ();
    Q_FOREACH (int key, keys)
        if (PendingJobs_ [key].URL_ == url)
        {
            QObject *provider = ID2Downloader_ [key];
            IDownload *downloader = qobject_cast&lt;IDownload*&gt; (provider);
            if (downloader)
            {
                qWarning () &lt;&lt; Q_FUNC_INFO
                    &lt;&lt; ""stalled task detected from""
                    &lt;&lt; downloader
                    &lt;&lt; ""trying to kill..."";
                downloader-&gt;KillTask (key);
                ID2Downloader_.remove (key);
                PendingJobs_.remove (key);
                qWarning () &lt;&lt; Q_FUNC_INFO
                    &lt;&lt; ""killed!"";
            }
            else
                qWarning () &lt;&lt; Q_FUNC_INFO
                    &lt;&lt; ""provider is not a downloader:""
                    &lt;&lt; provider
                    &lt;&lt; ""; cannot kill the task"";
            return;
        }

    QString filename = LeechCraft::Util::GetTemporaryName ();

    LeechCraft::Entity e = LeechCraft::Util::MakeEntity (QUrl (url),
            filename,
            LeechCraft::Internal |
                LeechCraft::DoNotNotifyUser |
                LeechCraft::DoNotSaveInHistory |
                LeechCraft::NotPersistent |
                LeechCraft::DoNotAnnounceEntity);

    PendingJob pj =
    {
        PendingJob::RFeedUpdated,
        url,
        filename,
        QStringList ()
    };

    int id = -1;
    QObject *pr;
    emit delegateEntity (e, &amp;id, &amp;pr);
    if (id == -1)
    {
        qWarning () &lt;&lt; Q_FUNC_INFO &lt;&lt; url &lt;&lt; ""wasn't delegated"";
        return;
    }

    HandleProvider (pr, id);
    PendingJobs_ [id] = pj;
    Updates_ [url] = QDateTime::currentDateTime ();
}

void Core::HandleProvider (QObject *provider, int id)
{
    if (Downloaders_.contains (provider))
        return;

    Downloaders_ &lt;&lt; provider;
    connect (provider,
            SIGNAL (jobFinished (int)),
            this,
            SLOT (handleJobFinished (int)));
    connect (provider,
            SIGNAL (jobRemoved (int)),
            this,
            SLOT (handleJobRemoved (int)));
    connect (provider,
            SIGNAL (jobError (int, IDownload::Error)),
            this,
            SLOT (handleJobError (int, IDownload::Error)));

    ID2Downloader_ [id] = provider;
}

			</code>
			</div></div><br class=""example-break"" />
		</div>","        <p>LeechCraft is plugin-based: LeechCraft Core only ensures correct loading and initialization order of plugins, initializes them, interconnects them and routes messages in between, while all the real work like      BitTorrent implementation is done by plugins. Core also performs some common tasks like showing GUI to the user, merging settings from different plugins into one dialog or sharing cache and cookie base.</p>                          <p>When LeechCraft starts up, it searches for plugins in directories relevant to the platform which it runs under. Plugins are basically just dynamic objects (<code class=""filename"">libleechcraft_*.so</code> on *NIX and <code class=""filename"">libleechcraft_*.dll</code> on Windows) being loaded by LeechCraft core through <code class=""function"">dlopen</code> on *NIX and <code class=""function"">LoadLibrary</code> on Windows at runtime.     However, a plugin («virtual plugin») may be provided by another plugin («adaptor plugin») instead of being loaded from a shared library by LeechCraft Core. Virtual plugins are subject to the same plugin behavior rules       mentioned a couple of paragraphs below.</p>                                                                                                                                                                                             <p>Each plugin should have a class, an object of which is exposed via Qt's <code class=""function"">Q_EXPORT_PLUGIN2</code> macro. The object of this class is created internally by Qt in that macro and may be obtained via <code class=""function"">QPluginLoader::instance</code> method, if <code class=""classname"">QPluginLoader</code> is used to load the library (and it is in LeechCraft). So let's call that object the <em>plugin instance      object</em> or just instance object.</p>                                                                                                                                                                                                <p>The exported class should obviously be a <code class=""classname"">QObject</code> and also implement at least <code class=""classname"">IInfo</code> interface in order to be recognized by LeechCraft.</p>                      <p>When LeechCraft starts up, it initializes the plugins it finds. Initialization is done in two passes: first, <code class=""function"">IInfo::Init</code> is called on each found plugin, then, after all plugins have  passed the first pass of initialization, <code class=""function"">IInfo::SecondInit</code> is called. So, as a consequence, you basically cannot rely on other plugins before <code class=""function"">IInfo::SecondInit</code>,    particularly in <code class=""function"">IInfo::Init</code>. So, you must not request the list of plugins, emit messages, etc before <code class=""function"">IInfo::SecondInit</code> is called. However, after <code              class=""function"">IInfo::Init</code> your plugin must be in a correct and usable state, because other plugins may begin to use it. Basically that means that you need to initialize all your datamembers in <code                class=""function"">IInfo::Init</code>.</p>

		<p>Plugins can communicate with each other either via a set of interfaces (which is based on but not limited to default LeechCraft interfaces found in <code class=""filename"">/src/interfaces/</code> directory) or using the messaging system.</p>
		<p>Let's consider each of these methods.</p>
		<h2>Message-based communication</h2>
			
			<p>This method is more useful when you don't know the exact plugin, or, at least, what this plugin looks like (what interfaces it implements) and just talking by such messages with other plugins is OK for you.</p>
			<p>Communcation is done using <code>LeechCraft::Entity</code> (found in <code class=""filename"">/src/interfaces/structures.h</code>) structure which can be considered as a packet or a message. Plugins send these <code>Entity</code> messages, LeechCraft Core catches them, and… Here the story begins.</p>
			<p>So, you have two types of messages. Same <code>Entity</code> is used for both of them, and they differ only in the way of sending them out of your plugin.</p>
			<p>First type of messages is <em>notification</em>. It's used to notify Core or other plugins that a new entity appeared, but your plugin doesn't care what would happen with it after the announcement.</p>
			<p>Let's consider a BitTorrent client that has just finished a download as an example. It would <em>notify</em> other parts of LeechCraft about files it just finished downloading but it doesn't care what will happen with them next, would they be handled or not, etc.</p>
			<p>Because the result of such a message isn't required at the point of notification, the signal used to send this message doesn't block. Instead, it queues the message in the main event loop and returns immediately, handling all the delivery duty later, when control gets back to the event loop.</p>
			<p>To send a <em>notification</em> message, use the
				</p><div class=""funcsynopsis"">
					<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void gotEntity(</code></td><td>LeechCraft::Entity *<code>entity</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
				</div><p>
				signal. Just declare it in your plugin instance object (the one you export with <code class=""function"">Q_EXPORT_PLUGIN2</code>), and LeechCraft core will automatically detect it at runtime.</p>
			<p>Second type is <em>delegation request</em>. It's used to <em>delegate</em> a task to another plugin and hope there is such plugin that can handle it. This way you get access to the plugin that would actually handle the task and can communicate with it. The corresponding signal blocks.</p>
			<p>For instance, consider the Aggregator feed reader. It doesn't download feeds itself, instead, it delegates them to another plugin by emitting a <em>delegation request</em>. After returning from the signal used to emit such a message, the sender plugin will know whether the entity was actually delegated, and if it was, which plugin is handling it.</p>
			<p>To send a <em>delegation request</em>, use the
				</p><div class=""funcsynopsis"">
					<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void delegateEntity(</code></td><td>LeechCraft::Entity *<code>entity</code>, </td></tr><tr><td> </td><td>int *<code>id</code> = 0, </td></tr><tr><td> </td><td>QObject **<code>handler</code> = 0<code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
				</div><p>
				signal. Here, if the delegation was successful, <em class=""parameter""><code>handler</code></em> would point to the object that handles this delegation request and <em class=""parameter""><code>id</code></em> would be the ID of the task in that handler. It's guaranteed to be a some non-negative value. To check if the delegation request was successful, the following trick is commonly applied: before emitting the <code class=""function"">delegateEntity</code> signal, set the <em class=""parameter""><code>id</code></em> to some negative value like -1 and after emitting check if it is still -1. If it is, the delegation failed.</p>
				<div class=""example""><a id=""id394892""></a><p class=""title"">Example 2.1. Delegating an entity and checking success of delegation</p><div class=""example-contents"">
					
					<p>In this example we emit a delegation entity for downloading a given <em class=""parameter""><code>url</code></em> to <em class=""parameter""><code>location</code></em> with task parameters commonly used for internal LeechCraft tasks (a user does not have to know about the process of downloading news feeds, for example). We check if the delegation was successful, and if it failed, we use <code class=""function"">LeechCraft::Util::MakeNotification</code> to create a user-notification (an <code>Entity</code> that represents some notification for the user, not to be confused with notification <code>Entity</code>) entity with a human-readable error title, message and priority, and we emit it as a notification via <code class=""function"">gotEntity</code>. Actually, this is a real piece of code from LackMan plugin, the package manager.</p>
					<code>
Entity e = Util::MakeEntity (url,
		location,
		LeechCraft::Internal |
			LeechCraft::DoNotNotifyUser |
			LeechCraft::DoNotSaveInHistory |
			LeechCraft::NotPersistent |
			LeechCraft::DoNotAnnounceEntity);
int id = -1;
QObject *pr;
emit delegateEntity (e, &amp;id, &amp;pr);
if (id == -1)
{
	emit gotEntity (Util::MakeNotification (tr (""Error fetching repository""),
			tr (""Could not find plugin to fetch repository information for %1."")
				.arg (url.toString ()),
			PCritical_));
	return;
}
					</code>
				</div></div><br class=""example-break"" />
			<p>Sometimes you will need to know if LeechCraft can handle a particular entity here and now. For example, Poshuku plugin, the web browser, checks what external resources (like RSS feeds or OpenSearch descriptions) can be handled upon page load and shows actions for handling only those that can be handled.</p>
			<p>In order to check if the particular entity may be handled, use the
				</p><div class=""funcsynopsis"">
					<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void couldHandle(</code></td><td>const LeechCraft::Entity&amp; <code>entity</code>, </td></tr><tr><td> </td><td>bool *<code>could</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
				</div><p>
				signal. This signal blocks. It returns either after Core finds first plugin that's able to handle the <em class=""parameter""><code>entity</code></em>, or all queried plugins refuse to handle it. The result is stored in the variable pointed by <em class=""parameter""><code>could</code></em>.</p>
			<p>It's generally a bad idea to store the result of this function for a long time because plugins may dynamically choose to refuse or accept entities, but typically it's safe to assume that the result wouldn't change until the control gets back to the event loop.</p>
		</div>
		<h2>Interfaces-based communication</h2>
			
			<p>This is a much simpler approach, but it is much more «static» as well. Once you have a pointer to <code class=""classname"">QObject</code> you want to communicate with, you can try to <code class=""function"">qobject_cast</code> it to the interface you want.</p>
			<p>There are basically three ways to obtain a pointer to another plugin:
				</p><div class=""itemizedlist""><ul class=""itemizedlist"" type=""disc""><li class=""listitem""><p>It may be set by LeechCraft Core in its <code class=""function"">delegateEntity</code> handler (see previous section for more information): the third parameter of this signal is the pointer to the pointer to the handler of the entity.</p></li><li class=""listitem""><p>It may be obtained by your plugin in <code class=""function"">IInfo::SetProvider</code>, have you returned the proper dependencies list from either <code class=""function"">IInfo::Needs</code> or <code class=""function"">IInfo::Uses</code>.</p></li><li class=""listitem""><p>You may obtain the list of all plugins yourself via the plugins manager that you can access via <code class=""function"">ICoreProxy::GetPluginsManager</code>. The <code class=""classname"">ICoreProxy</code> is passed to your <code class=""function"">IInfo::Init</code>.</p></li></ul></div><p>
			</p>
			<p>Let us consider a couple of examples illustrating various concepts of working with other plugins.</p>
			<div class=""example""><a id=""id395077""></a><p class=""title"">Example 2.2. Getting any available plugin that implements <code class=""classname"">IWebBrowser</code>.</p><div class=""example-contents"">
				
				<p>This is the real example from the Aggregator. It's assumed that the <code class=""classname"">ICoreProxy</code> passed to your <code class=""function"">IInfo::Init</code> is stored as <code class=""varname"">Proxy_</code>.</p>
				<code>

IWebBrowser* Core::GetWebBrowser () const
{
    IPluginsManager *pm = Proxy_-&gt;GetPluginsManager ();
    QObjectList browsers = pm-&gt;Filter&lt;IWebBrowser*&gt; (pm-&gt;GetAllPlugins ());
    return browsers.size () ?
        qobject_cast&lt;IWebBrowser*&gt; (browsers.at (0)) :
        0;
}

				</code>
			</div></div><br class=""example-break"" />
			<div class=""example""><a id=""id395111""></a><p class=""title"">Example 2.3. More sophisticated task delegation and error handling.</p><div class=""example-contents"">
				
				<p>This is another bunch of code taken from the Aggregator. This is how it delegates the downloading of fresh versions of feed files to another plugin.</p>
				<code>

void Core::UpdateFeed (const QString&amp; url)
{
    QList&lt;int&gt; keys = PendingJobs_.keys ();
    Q_FOREACH (int key, keys)
        if (PendingJobs_ [key].URL_ == url)
        {
            QObject *provider = ID2Downloader_ [key];
            IDownload *downloader = qobject_cast&lt;IDownload*&gt; (provider);
            if (downloader)
            {
                qWarning () &lt;&lt; Q_FUNC_INFO
                    &lt;&lt; ""stalled task detected from""
                    &lt;&lt; downloader
                    &lt;&lt; ""trying to kill..."";
                downloader-&gt;KillTask (key);
                ID2Downloader_.remove (key);
                PendingJobs_.remove (key);
                qWarning () &lt;&lt; Q_FUNC_INFO
                    &lt;&lt; ""killed!"";
            }
            else
                qWarning () &lt;&lt; Q_FUNC_INFO
                    &lt;&lt; ""provider is not a downloader:""
                    &lt;&lt; provider
                    &lt;&lt; ""; cannot kill the task"";
            return;
        }

    QString filename = LeechCraft::Util::GetTemporaryName ();

    LeechCraft::Entity e = LeechCraft::Util::MakeEntity (QUrl (url),
            filename,
            LeechCraft::Internal |
                LeechCraft::DoNotNotifyUser |
                LeechCraft::DoNotSaveInHistory |
                LeechCraft::NotPersistent |
                LeechCraft::DoNotAnnounceEntity);

    PendingJob pj =
    {
        PendingJob::RFeedUpdated,
        url,
        filename,
        QStringList ()
    };

    int id = -1;
    QObject *pr;
    emit delegateEntity (e, &amp;id, &amp;pr);
    if (id == -1)
    {
        qWarning () &lt;&lt; Q_FUNC_INFO &lt;&lt; url &lt;&lt; ""wasn't delegated"";
        return;
    }

    HandleProvider (pr, id);
    PendingJobs_ [id] = pj;
    Updates_ [url] = QDateTime::currentDateTime ();
}

void Core::HandleProvider (QObject *provider, int id)
{
    if (Downloaders_.contains (provider))
        return;

    Downloaders_ &lt;&lt; provider;
    connect (provider,
            SIGNAL (jobFinished (int)),
            this,
            SLOT (handleJobFinished (int)));
    connect (provider,
            SIGNAL (jobRemoved (int)),
            this,
            SLOT (handleJobRemoved (int)));
    connect (provider,
            SIGNAL (jobError (int, IDownload::Error)),
            this,
            SLOT (handleJobError (int, IDownload::Error)));

    ID2Downloader_ [id] = provider;
}

			</code>
			</div></div><br class=""example-break"" />
		</div>"
81,book,Writing a simple plugin in 20 minutes,1310334263,development-writing-a-simple-plugin-in-20-minutes,"	<h2>Introduction</h2>
		
		<p>In this tutorial we will write a simple plugin (called Auscrie for ""Auto Screenshooter"") for LeechCraft. This way we will illustrate basic concepts of plugin writing. Our plugin would be able to take a screenshot of LeechCraft's window and save it somewhere or upload to a imagebin. Screenshooting would be initiated by a button in the toolbar.</p>
		<p>We will learn:
			</p><div class=""itemizedlist""><ul class=""itemizedlist"" type=""disc""><li class=""listitem"">how to create dummy new plugins and build them;</li><li class=""listitem"">how to add UI written in Qt Designer to plugins;</li><li class=""listitem"">preferable ways of working with network and HTTP in particular in LeechCraft;</li><li class=""listitem"">using LeechCraft messages to notify user about various events in your plugin.</li></ul></div><p>
		</p>
	</div>
	<h2>Understanding plugins</h2>
		
		<p>C++ plugins for LeechCraft are just dynamic libraries with main plugin instance exported from it. Plugin instance is exported with Q_EXPORT_PLUGIN2. Plugin instance should also implement IInfo (<code class=""filename"">/src/interfaces/iinfo.h</code> from the repository root) interface to be recognized by LeechCraft as a proper plugin.</p>
		<p>To know more about writing plugins for C++/Qt applications please visit How to Create Qt Plugins guide.</p>
		<p>You could also refer to the general LeechCraft overview for more information about plugins and LeechCraft architecture.</p>
	</div>
	<h2>Paths</h2>
		
		<p>For our convenience we will work right in source tree, in <code class=""filename"">/src/plugins/auscrie</code>. Usually you will develop your plugin separately from the source tree (see Workflow documentation for more information), and the only difference would be that you will need to adjust the paths accordingly. For example, you will need to make sure that <em class=""parameter""><code>CMAKE_MODULE_PATH</code></em> points to the directory containing <code class=""filename"">FindLeechCraft.cmake</code> when running CMake. CMake variables are set with <code class=""option"">-D</code> command line switch. For example:</p><code type=""bash"">cmake -DCMAKE_MODULE_PATH=/some/path/to/LeechCraft/SDK</code>
		<p>This is *NIX-oriented tutorial. Refer to the corresponding parts of Windows building guide for the differences in the building process.</p>
	</div>
	<h2>General skeleton</h2>
		
		<p>There is a convenience Python script in LeechCraft repository: <code class=""filename"">/tools/scripts/genplugin.py</code> which generates very basic <code class=""filename"">CMakeLists.txt</code> file for your plugin and plugin instance declaration/implementation files. It is invoked as:</p>
		<code type=""bash"">genplugin.py -a ""Plugin Author"" -p PluginNameWithoutSpaces -i Comma,Separated,List,Of,Base,Interfaces</code>
		<p>It would also give a short help message when run with <code class=""option"">-h</code> option.</p>
		<p>So, we create the <code class=""filename"">/src/plugins/auscrie</code> directory, <strong>cd</strong> into it and run the script like this (please note that in your case path to genplugin.py can be different):</p>
		<code type=""bash"">../../../tools/scripts/genplugin.py -a ""Your Name"" -p Auscrie -i IToolBarEmbedder</code>
		<p>We also derive from the <code class=""interfacename"">IToolBarEmbedder</code> (<code class=""filename"">/src/interfaces/itoolbarembedder.h</code>) because we want to embed our button there.</p>
		<p>This script would generate basic files, but that would be enough to produce a minimal working (more precisely, minimal loading) plugin. Let's try to compile and run it! To do that, we create a directory in which the plugin will be built, run <strong>cmake</strong> over it, then <strong>make</strong> to build the plugin and then <strong>make install</strong> from root to install the plugin. From the directory with the sources issue:</p>
		<code type=""bash"">
		mkdir build
		cd build
		cmake ../
		make
		sudo make install
		</code>
		<p>Here we used out-of-source builds. Generally, it's preferable to use out-of-source builds since you can easily clean up the source tree (by removing the build directory) or have multiple builds with different configurations simultaneously.</p>
		<p>Now run LeechCraft and open Settings dialog, then select the Plugins page. You should now see your plugin in the list. If you don't, check the logs (<code class=""filename"">~/.leechcraft/warning.log</code>) and contact us.</p>
	</div>
	<h2>Basic stuff</h2>
		
		<p>Now we have a very basic plugin that is recognizable by LeechCraft. Let us fill the gaps.</p>
		<p>First, we should fill the <code class=""function"">GetInfo</code> stub with some sensible description, like ""Simple auto screenshooter."".</p>
		<p>Then let's create the action that would make a screenshot. First, we define some internal data members and methods:
			</p><div class=""itemizedlist""><ul class=""itemizedlist"" type=""disc""><li class=""listitem""><code class=""varname"">Proxy_</code> of type <code class=""classname"">ICoreProxy_ptr</code>, where we will store the pointer to the core proxy object passed to <code class=""function"">Init</code>. We need this proxy, because it's the object through which all the communication with LeechCraft Core is done, and we will need it later;</li><li class=""listitem""><code class=""classname"">QAction</code> *<code class=""varname"">ShotAction_</code>, which would initiate screenshooting;</li><li class=""listitem"">private slot <code class=""function"">makeScreenshot</code> which would be invoked when our action fires up.</li></ul></div><p>
		</p>
		<p>It's better to do such initialization in our Init function, so we write there the following code for our action:</p>
		<code>

Proxy_ = proxy;

Dialog_ = new ShooterDialog (Proxy_->GetMainWindow ());

ShotAction_ = new QAction (Proxy_->GetIcon (""screenshot""),
        tr (""Make a screenshot""),
        this);
connect (ShotAction_,
        SIGNAL (triggered ()),
        this,
        SLOT (makeScreenshot ()));

		</code>
		<p>We use <code class=""classname"">ICoreProxy_ptr</code> to get the right icon from the right theme for our action. When you will develop your own plugins you will need to carry your icons with you unless you get into the official source tree. We also use the proxy to get the pointer to the main window. The <code class=""classname"">ShooterDialog</code> stuff will be explained later.</p>
		<p>Then, let's fill the <code class=""function"">GetActions</code> stub and return our <code class=""varname"">ShotAction_</code>. <code class=""function"">GetActions</code> would look like:</p>
		<code>

QList<QAction*> Plugin::GetActions () const
{
    QList<QAction*> result;
    result << ShotAction_;
    return result;
}

		</code>
		<p>If you compile and install your plugin now, you will see the icon of your screenshoter in a toolbar, but it does nothing yet.</p>
	</div>
	<h2>Initiating screenshooting</h2>
		
		<p>In our screenshooting slot we run a simple dialog asking for screenshot parameters. If user accepts the dialog, we disable the shooting action (we will reenable it again when the screenshot is ready) and start a timer according to the timeout set by user in the dialog:</p>
		<code>

void Plugin::makeScreenshot ()
{
    if (Dialog_->exec () != QDialog::Accepted)
        return;

    ShotAction_->setEnabled (false);
    QTimer::singleShot (Dialog_->GetTimeout () * 1000,
            this,
            SLOT (shoot ()));
}

		</code>
		<p>We created the <code class=""varname"">Dialog_</code> in <code class=""function"">Init</code> in order to keep it between different calls to <code class=""function"">makeScreenshot</code>. Having this dialog avaliable in any function has another benefit: we don't have to store screenshot parameters like format or quality after executing the dialog since we can ask it anytime.</p>
		<p>Writing this dialog is quite a trivial task for anyone who ever used Qt Designer, so it won't be documented here. However, it's worth noting how forms should be added to CMake-based project. We define a variable which will hold the list of forms (<code class=""varname"">FORMS</code> in our case), we add the <code class=""filename"">.h</code> and <code class=""filename"">.cpp</code>-files to the list of headers and sources, we call the <code class=""function"">QT4_WRAP_UI</code> to run <strong>uic</strong> on the forms and we add the result of <strong>uic</strong> to the list of dependencies of our plugin. So, the middle of the <code class=""function"">CMakeLists.txt</code> file would look like:</p>
		<code>

SET (SRCS
    auscrie.cpp
    shooterdialog.cpp
    )
SET (HEADERS
    auscrie.h
    shooterdialog.h
    )
SET (FORMS
    shooterdialog.ui
    )
QT4_WRAP_CPP (MOC_SRCS ${HEADERS})
QT4_WRAP_UI (UIS_H ${FORMS})

ADD_LIBRARY (leechcraft_auscrie SHARED
    ${COMPILED_TRANSLATIONS}
    ${SRCS}                                                                                                                                                                                                                      
    ${MOC_SRCS}
    ${UIS_H}
    )

		</code>
	</div>
	<h2>Shooting, it's fun!</h2>
		
		<p>Let's finally take a look at the <code class=""function"">shoot</code> slot. We will split our discussion of it into logical parts.</p>
		<p>To grab the window, we use the <code class=""varname"">Proxy_</code> object we stored earlier to access the main LeechCraft window. Don't forget to <code class=""code"">#include</code> the <code class=""classname"">QMainWindow</code> header, otherwise casting from <code class=""classname"">QMainWindow</code>* to <code class=""classname"">QWidget</code>* would fail.</p>
		<code>

void Plugin::shoot ()
{
    ShotAction_->setEnabled (true);

    QWidget *mw = Proxy_->GetMainWindow ();
    QPixmap pm = QPixmap::grabWidget (mw);

    const char *fmt = qPrintable (Dialog_->GetFormat ());
    int quality = Dialog_->GetQuality ();

		</code>
		<p>Then we have two options: to save file to the disk and to send it to a pastebin. The first one is a bit easier to implement:</p>
		<code>

    switch (Dialog_->GetAction ())
    {
        case ShooterDialog::ASave:
        {
            QString path = Proxy_->GetSettingsManager ()->
                    Property (""PluginsStorage/Auscrie/SavePath"",
                            QDir::currentPath () + ""01."" + Dialog_->GetFormat ())
                    .toString ();

            QString filename = QFileDialog::getSaveFileName (mw,
                    tr (""Save as""),
                    path,
                    tr (""%1 files (*.%1);;All files (*.*)"")
                        .arg (Dialog_->GetFormat ()));

            if (!filename.isEmpty ())
            {
                pm.save (filename, fmt, quality);
                Proxy_->GetSettingsManager ()->
                setProperty (""PluginsStorage/Auscrie/SavePath"",
                        filename);
            }
        }
        break;

		</code>
		<p>Here we used Core's settings manager which is basically a wrapper around <code class=""classname"">QSettings</code>. Keys starting with <em>PluginsStorage</em> can be used by plugins, the Core won't use them for its own tasks. It is generally ok to use Core's settings manager for storing a setting or two, but if you need more, and especially if you need to build your own settings dialogs, you will need to add one for your plugin.</p>
		<p>If user selected uploading to an imagebin, we call a separate function, Post(), that would take care of it:</p>
		<code>

        case ShooterDialog::AUpload:
        {
            QBuffer buf;
            pm.save (&amp;buf,
                    fmt,
                    quality);
            Post (buf.data ());
        }
		break;
    }
}

		</code>
		<p>We also should now add the following to our <code class=""filename"">CMakeLists.txt</code> just before <code class=""code"">INCLUDE (${QT_USE_FILE})</code>:</p>
		<code>

SET (QT_USE_QTNETWORK TRUE)

		</code>
		<p>This would add the networking abilities to our plugin, making visible the includes from the QtNetwork module and linking our plugin to the QtNetwork library. We will definitely need it since our plugin uses QtNetwork (for example, <code class=""classname"">QNetworkAccessManager</code> and <code class=""classname"">QNetworkReply</code>) to do actualy posting of screenshots.</p>
		<p>Because we aren't interested in uploading implementation now, we've moved all the posting code into separate <code class=""classname"">Poster</code> class, so our <code class=""function"">Post</code> function looks quite simple:</p>
		<code>

void Plugin::Post (const QByteArray&amp; data)
{
    Poster *p = new Poster (data,
            Dialog_->GetFormat (),
            Proxy_->GetNetworkAccessManager ());
    connect (p,
            SIGNAL (finished (QNetworkReply*)),
            this,
            SLOT (handleFinished (QNetworkReply*)));
    connect (p,
            SIGNAL (error (QNetworkReply*)),
            this,
            SLOT (handleError (QNetworkReply*)));
}

		</code>
		<p>Here we used <code class=""varname"">Proxy_</code> once again to obtain the application-wide instance of the <code class=""classname"">QNetworkAccessManager</code> with the <code class=""function"">GetNetworkAccessManager</code> method. It's always better to use the application-wide <code class=""classname"">QNetworkAccessManager</code> thus getting access to the application-wide network cache and cookie database, as well as allowing it to optimize requests by reusing connections, for example.</p>
		<p>It's also worth noting that in case if you need to just download a file, which is not our case but just a very common task, you can just emit the corresponding signal without caring about network access, managers, replies and stuff. This approach is discusses in details in the Overview document.</p>
		<p>It is also ok to create the <code class=""classname"">Poster</code> on the heap without caring about memory deallocation now. It will be freed in the corresponding slots.</p>
		<p>We connect to the <code class=""classname"">Poster</code>'s signals
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">finished(</code></td><td>QNetworkReply *<code>reply</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			and
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">error(</code></td><td>QNetworkReply *<code>reply</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			to get notified when our uploading finishes or whether an error occurs. <code class=""classname"">Poster</code> emits the <code class=""classname"">QNetworkReply</code> that originally emitted the corresponding signal as the parameter of those signals.</p>
		<p>Let's take a look at
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">handleFinished(</code></td><td>QNetworkReply *<code>reply</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			(by the way, don't forget to declare all the introduced members in class definition):</p>
		<code>

void Plugin::handleFinished (QNetworkReply *reply)
{
    sender ()->deleteLater ();

    QString result = reply->readAll ();

    QRegExp re (""<p>You can find this at <a href='([^<]+)'>([^<]+)</a></p>"");
    if (!re.exactMatch (result))
    {
        Entity e = Util::MakeNotification (""Auscrie"",
                tr (""Page parse failed""),
                PWarning_);
        emit gotEntity (e);
        return;
    }

    QString pasteUrl = re.cap (1);

    Entity e = Util::MakeNotification (""Auscrie"",
            tr (""Image pasted: %1, the URL was copied to the clipboard"")
                .arg (pasteUrl),
            PInfo_);

    QApplication::clipboard ()->setText (pasteUrl, QClipboard::Clipboard);
    QApplication::clipboard ()->setText (pasteUrl, QClipboard::Selection);
    
    emit gotEntity (e);
}

		</code>
		<p>First we shedule the sender object (<code class=""classname"">Poster</code> instance created earlier) to delete itself once control gets to the event loop. We don't plainly use something like <code class=""code"">delete sender ();</code> because we can't delete objects inside their signals' handlers.</p>
		<p>Then we get the page returned by server via <code class=""function"">readAll</code> and try to get the link to our newly uploaded image by quite a simple regexp. If it fails, we emit a notification about our failure with Warning priority and stop processing. Please note that in your class signals and slots that use LeechCraft's data structures must use fully qualified names with namespaces, like
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void gotEntity(</code></td><td>const LeechCraft::Entity&amp; <code>entity</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			Otherwise Qt's meta object system won't recognize them.</p>
		<p>Here we also use the LeechCraft messages system to send out a notification about various events in your plugin, like errors or just information messages, to be shown to the user. We use the <code class=""function"">LeechCraft::Util::MakeNotification</code> (which can be added by <code class=""code"">#include <util/util.h></code>) utility function to create such an entity. This function takes three parameters: notification title, notification body, notification priority. Notifications and LeechCraft messages are discussed in details in the Overview document.</p>
	</div>
	<h2>Conclusion</h2>
		
		<p>Basically that's all. Now we have a working, usable and useful plugin. Of course there is something to extend: for example, we could keep history of all the pasted screenshots or show a fancy progressbar notifying about upload progress, and you will almost surely want to add localization support, but our goal here is to get used to LeechCraft's concept of plugins.</p>
	</div>","	<h2>Introduction</h2>
		
		<p>In this tutorial we will write a simple plugin (called Auscrie for ""Auto Screenshooter"") for LeechCraft. This way we will illustrate basic concepts of plugin writing. Our plugin would be able to take a screenshot of LeechCraft's window and save it somewhere or upload to a imagebin. Screenshooting would be initiated by a button in the toolbar.</p>
		<p>We will learn:
			</p><div class=""itemizedlist""><ul class=""itemizedlist"" type=""disc""><li class=""listitem"">how to create dummy new plugins and build them;</li><li class=""listitem"">how to add UI written in Qt Designer to plugins;</li><li class=""listitem"">preferable ways of working with network and HTTP in particular in LeechCraft;</li><li class=""listitem"">using LeechCraft messages to notify user about various events in your plugin.</li></ul></div><p>
		</p>
	</div>
	<h2>Understanding plugins</h2>
		
		<p>C++ plugins for LeechCraft are just dynamic libraries with main plugin instance exported from it. Plugin instance is exported with Q_EXPORT_PLUGIN2. Plugin instance should also implement IInfo (<code class=""filename"">/src/interfaces/iinfo.h</code> from the repository root) interface to be recognized by LeechCraft as a proper plugin.</p>
		<p>To know more about writing plugins for C++/Qt applications please visit How to Create Qt Plugins guide.</p>
		<p>You could also refer to the general LeechCraft overview for more information about plugins and LeechCraft architecture.</p>
	</div>
	<h2>Paths</h2>
		
		<p>For our convenience we will work right in source tree, in <code class=""filename"">/src/plugins/auscrie</code>. Usually you will develop your plugin separately from the source tree (see Workflow documentation for more information), and the only difference would be that you will need to adjust the paths accordingly. For example, you will need to make sure that <em class=""parameter""><code>CMAKE_MODULE_PATH</code></em> points to the directory containing <code class=""filename"">FindLeechCraft.cmake</code> when running CMake. CMake variables are set with <code class=""option"">-D</code> command line switch. For example:</p><code type=""bash"">cmake -DCMAKE_MODULE_PATH=/some/path/to/LeechCraft/SDK</code>
		<p>This is *NIX-oriented tutorial. Refer to the corresponding parts of Windows building guide for the differences in the building process.</p>
	</div>
	<h2>General skeleton</h2>
		
		<p>There is a convenience Python script in LeechCraft repository: <code class=""filename"">/tools/scripts/genplugin.py</code> which generates very basic <code class=""filename"">CMakeLists.txt</code> file for your plugin and plugin instance declaration/implementation files. It is invoked as:</p>
		<code type=""bash"">genplugin.py -a ""Plugin Author"" -p PluginNameWithoutSpaces -i Comma,Separated,List,Of,Base,Interfaces</code>
		<p>It would also give a short help message when run with <code class=""option"">-h</code> option.</p>
		<p>So, we create the <code class=""filename"">/src/plugins/auscrie</code> directory, <strong>cd</strong> into it and run the script like this (please note that in your case path to genplugin.py can be different):</p>
		<code type=""bash"">../../../tools/scripts/genplugin.py -a ""Your Name"" -p Auscrie -i IToolBarEmbedder</code>
		<p>We also derive from the <code class=""interfacename"">IToolBarEmbedder</code> (<code class=""filename"">/src/interfaces/itoolbarembedder.h</code>) because we want to embed our button there.</p>
		<p>This script would generate basic files, but that would be enough to produce a minimal working (more precisely, minimal loading) plugin. Let's try to compile and run it! To do that, we create a directory in which the plugin will be built, run <strong>cmake</strong> over it, then <strong>make</strong> to build the plugin and then <strong>make install</strong> from root to install the plugin. From the directory with the sources issue:</p>
		<code type=""bash"">
		mkdir build
		cd build
		cmake ../
		make
		sudo make install
		</code>
		<p>Here we used out-of-source builds. Generally, it's preferable to use out-of-source builds since you can easily clean up the source tree (by removing the build directory) or have multiple builds with different configurations simultaneously.</p>
		<p>Now run LeechCraft and open Settings dialog, then select the Plugins page. You should now see your plugin in the list. If you don't, check the logs (<code class=""filename"">~/.leechcraft/warning.log</code>) and contact us.</p>
	</div>
	<h2>Basic stuff</h2>
		
		<p>Now we have a very basic plugin that is recognizable by LeechCraft. Let us fill the gaps.</p>
		<p>First, we should fill the <code class=""function"">GetInfo</code> stub with some sensible description, like ""Simple auto screenshooter."".</p>
		<p>Then let's create the action that would make a screenshot. First, we define some internal data members and methods:
			</p><div class=""itemizedlist""><ul class=""itemizedlist"" type=""disc""><li class=""listitem""><code class=""varname"">Proxy_</code> of type <code class=""classname"">ICoreProxy_ptr</code>, where we will store the pointer to the core proxy object passed to <code class=""function"">Init</code>. We need this proxy, because it's the object through which all the communication with LeechCraft Core is done, and we will need it later;</li><li class=""listitem""><code class=""classname"">QAction</code> *<code class=""varname"">ShotAction_</code>, which would initiate screenshooting;</li><li class=""listitem"">private slot <code class=""function"">makeScreenshot</code> which would be invoked when our action fires up.</li></ul></div><p>
		</p>
		<p>It's better to do such initialization in our Init function, so we write there the following code for our action:</p>
		<code>

Proxy_ = proxy;

Dialog_ = new ShooterDialog (Proxy_->GetMainWindow ());

ShotAction_ = new QAction (Proxy_->GetIcon (""screenshot""),
        tr (""Make a screenshot""),
        this);
connect (ShotAction_,
        SIGNAL (triggered ()),
        this,
        SLOT (makeScreenshot ()));

		</code>
		<p>We use <code class=""classname"">ICoreProxy_ptr</code> to get the right icon from the right theme for our action. When you will develop your own plugins you will need to carry your icons with you unless you get into the official source tree. We also use the proxy to get the pointer to the main window. The <code class=""classname"">ShooterDialog</code> stuff will be explained later.</p>
		<p>Then, let's fill the <code class=""function"">GetActions</code> stub and return our <code class=""varname"">ShotAction_</code>. <code class=""function"">GetActions</code> would look like:</p>
		<code>

QList<QAction*> Plugin::GetActions () const
{
    QList<QAction*> result;
    result << ShotAction_;
    return result;
}

		</code>
		<p>If you compile and install your plugin now, you will see the icon of your screenshoter in a toolbar, but it does nothing yet.</p>
	</div>
	<h2>Initiating screenshooting</h2>
		
		<p>In our screenshooting slot we run a simple dialog asking for screenshot parameters. If user accepts the dialog, we disable the shooting action (we will reenable it again when the screenshot is ready) and start a timer according to the timeout set by user in the dialog:</p>
		<code>

void Plugin::makeScreenshot ()
{
    if (Dialog_->exec () != QDialog::Accepted)
        return;

    ShotAction_->setEnabled (false);
    QTimer::singleShot (Dialog_->GetTimeout () * 1000,
            this,
            SLOT (shoot ()));
}

		</code>
		<p>We created the <code class=""varname"">Dialog_</code> in <code class=""function"">Init</code> in order to keep it between different calls to <code class=""function"">makeScreenshot</code>. Having this dialog avaliable in any function has another benefit: we don't have to store screenshot parameters like format or quality after executing the dialog since we can ask it anytime.</p>
		<p>Writing this dialog is quite a trivial task for anyone who ever used Qt Designer, so it won't be documented here. However, it's worth noting how forms should be added to CMake-based project. We define a variable which will hold the list of forms (<code class=""varname"">FORMS</code> in our case), we add the <code class=""filename"">.h</code> and <code class=""filename"">.cpp</code>-files to the list of headers and sources, we call the <code class=""function"">QT4_WRAP_UI</code> to run <strong>uic</strong> on the forms and we add the result of <strong>uic</strong> to the list of dependencies of our plugin. So, the middle of the <code class=""function"">CMakeLists.txt</code> file would look like:</p>
		<code>

SET (SRCS
    auscrie.cpp
    shooterdialog.cpp
    )
SET (HEADERS
    auscrie.h
    shooterdialog.h
    )
SET (FORMS
    shooterdialog.ui
    )
QT4_WRAP_CPP (MOC_SRCS ${HEADERS})
QT4_WRAP_UI (UIS_H ${FORMS})

ADD_LIBRARY (leechcraft_auscrie SHARED
    ${COMPILED_TRANSLATIONS}
    ${SRCS}                                                                                                                                                                                                                      
    ${MOC_SRCS}
    ${UIS_H}
    )

		</code>
	</div>
	<h2>Shooting, it's fun!</h2>
		
		<p>Let's finally take a look at the <code class=""function"">shoot</code> slot. We will split our discussion of it into logical parts.</p>
		<p>To grab the window, we use the <code class=""varname"">Proxy_</code> object we stored earlier to access the main LeechCraft window. Don't forget to <code class=""code"">#include</code> the <code class=""classname"">QMainWindow</code> header, otherwise casting from <code class=""classname"">QMainWindow</code>* to <code class=""classname"">QWidget</code>* would fail.</p>
		<code>

void Plugin::shoot ()
{
    ShotAction_->setEnabled (true);

    QWidget *mw = Proxy_->GetMainWindow ();
    QPixmap pm = QPixmap::grabWidget (mw);

    const char *fmt = qPrintable (Dialog_->GetFormat ());
    int quality = Dialog_->GetQuality ();

		</code>
		<p>Then we have two options: to save file to the disk and to send it to a pastebin. The first one is a bit easier to implement:</p>
		<code>

    switch (Dialog_->GetAction ())
    {
        case ShooterDialog::ASave:
        {
            QString path = Proxy_->GetSettingsManager ()->
                    Property (""PluginsStorage/Auscrie/SavePath"",
                            QDir::currentPath () + ""01."" + Dialog_->GetFormat ())
                    .toString ();

            QString filename = QFileDialog::getSaveFileName (mw,
                    tr (""Save as""),
                    path,
                    tr (""%1 files (*.%1);;All files (*.*)"")
                        .arg (Dialog_->GetFormat ()));

            if (!filename.isEmpty ())
            {
                pm.save (filename, fmt, quality);
                Proxy_->GetSettingsManager ()->
                setProperty (""PluginsStorage/Auscrie/SavePath"",
                        filename);
            }
        }
        break;

		</code>
		<p>Here we used Core's settings manager which is basically a wrapper around <code class=""classname"">QSettings</code>. Keys starting with <em>PluginsStorage</em> can be used by plugins, the Core won't use them for its own tasks. It is generally ok to use Core's settings manager for storing a setting or two, but if you need more, and especially if you need to build your own settings dialogs, you will need to add one for your plugin.</p>
		<p>If user selected uploading to an imagebin, we call a separate function, Post(), that would take care of it:</p>
		<code>

        case ShooterDialog::AUpload:
        {
            QBuffer buf;
            pm.save (&amp;buf,
                    fmt,
                    quality);
            Post (buf.data ());
        }
		break;
    }
}

		</code>
		<p>We also should now add the following to our <code class=""filename"">CMakeLists.txt</code> just before <code class=""code"">INCLUDE (${QT_USE_FILE})</code>:</p>
		<code>

SET (QT_USE_QTNETWORK TRUE)

		</code>
		<p>This would add the networking abilities to our plugin, making visible the includes from the QtNetwork module and linking our plugin to the QtNetwork library. We will definitely need it since our plugin uses QtNetwork (for example, <code class=""classname"">QNetworkAccessManager</code> and <code class=""classname"">QNetworkReply</code>) to do actualy posting of screenshots.</p>
		<p>Because we aren't interested in uploading implementation now, we've moved all the posting code into separate <code class=""classname"">Poster</code> class, so our <code class=""function"">Post</code> function looks quite simple:</p>
		<code>

void Plugin::Post (const QByteArray&amp; data)
{
    Poster *p = new Poster (data,
            Dialog_->GetFormat (),
            Proxy_->GetNetworkAccessManager ());
    connect (p,
            SIGNAL (finished (QNetworkReply*)),
            this,
            SLOT (handleFinished (QNetworkReply*)));
    connect (p,
            SIGNAL (error (QNetworkReply*)),
            this,
            SLOT (handleError (QNetworkReply*)));
}

		</code>
		<p>Here we used <code class=""varname"">Proxy_</code> once again to obtain the application-wide instance of the <code class=""classname"">QNetworkAccessManager</code> with the <code class=""function"">GetNetworkAccessManager</code> method. It's always better to use the application-wide <code class=""classname"">QNetworkAccessManager</code> thus getting access to the application-wide network cache and cookie database, as well as allowing it to optimize requests by reusing connections, for example.</p>
		<p>It's also worth noting that in case if you need to just download a file, which is not our case but just a very common task, you can just emit the corresponding signal without caring about network access, managers, replies and stuff. This approach is discusses in details in the Overview document.</p>
		<p>It is also ok to create the <code class=""classname"">Poster</code> on the heap without caring about memory deallocation now. It will be freed in the corresponding slots.</p>
		<p>We connect to the <code class=""classname"">Poster</code>'s signals
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">finished(</code></td><td>QNetworkReply *<code>reply</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			and
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">error(</code></td><td>QNetworkReply *<code>reply</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			to get notified when our uploading finishes or whether an error occurs. <code class=""classname"">Poster</code> emits the <code class=""classname"">QNetworkReply</code> that originally emitted the corresponding signal as the parameter of those signals.</p>
		<p>Let's take a look at
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">handleFinished(</code></td><td>QNetworkReply *<code>reply</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			(by the way, don't forget to declare all the introduced members in class definition):</p>
		<code>

void Plugin::handleFinished (QNetworkReply *reply)
{
    sender ()->deleteLater ();

    QString result = reply->readAll ();

    QRegExp re (""<p>You can find this at <a href='([^<]+)'>([^<]+)</a></p>"");
    if (!re.exactMatch (result))
    {
        Entity e = Util::MakeNotification (""Auscrie"",
                tr (""Page parse failed""),
                PWarning_);
        emit gotEntity (e);
        return;
    }

    QString pasteUrl = re.cap (1);

    Entity e = Util::MakeNotification (""Auscrie"",
            tr (""Image pasted: %1, the URL was copied to the clipboard"")
                .arg (pasteUrl),
            PInfo_);

    QApplication::clipboard ()->setText (pasteUrl, QClipboard::Clipboard);
    QApplication::clipboard ()->setText (pasteUrl, QClipboard::Selection);
    
    emit gotEntity (e);
}

		</code>
		<p>First we shedule the sender object (<code class=""classname"">Poster</code> instance created earlier) to delete itself once control gets to the event loop. We don't plainly use something like <code class=""code"">delete sender ();</code> because we can't delete objects inside their signals' handlers.</p>
		<p>Then we get the page returned by server via <code class=""function"">readAll</code> and try to get the link to our newly uploaded image by quite a simple regexp. If it fails, we emit a notification about our failure with Warning priority and stop processing. Please note that in your class signals and slots that use LeechCraft's data structures must use fully qualified names with namespaces, like
			</p><div class=""funcsynopsis"">
				<table border=""0"" summary=""Function synopsis"" cellspacing=""0"" cellpadding=""0"" class=""funcprototype-table""><tr><td><code class=""funcdef"">void gotEntity(</code></td><td>const LeechCraft::Entity&amp; <code>entity</code><code>)</code>;</td></tr></table><div class=""funcprototype-spacer""> </div>
			</div><p>
			Otherwise Qt's meta object system won't recognize them.</p>
		<p>Here we also use the LeechCraft messages system to send out a notification about various events in your plugin, like errors or just information messages, to be shown to the user. We use the <code class=""function"">LeechCraft::Util::MakeNotification</code> (which can be added by <code class=""code"">#include <util/util.h></code>) utility function to create such an entity. This function takes three parameters: notification title, notification body, notification priority. Notifications and LeechCraft messages are discussed in details in the Overview document.</p>
	</div>
	<h2>Conclusion</h2>
		
		<p>Basically that's all. Now we have a working, usable and useful plugin. Of course there is something to extend: for example, we could keep history of all the pasted screenshots or show a fancy progressbar notifying about upload progress, and you will almost surely want to add localization support, but our goal here is to get used to LeechCraft's concept of plugins.</p>
	</div>"
82,page,Changelogs,1294170078,changelogs,"Changelogs (each changelog as against the previous one):
<a href=""changelog-0.3.0"">0.3.0</a>

For the 0.4.x:
<a href=""changelog-0.3.60"">0.3.60</a>
<a href=""changelog-0.3.65"">0.3.65</a>
<a href=""changelog-0.3.70"">0.3.70</a>
<a href=""changelog-0.3.75"">0.3.75</a>
<a href=""changelog-0.3.80"">0.3.80</a>
<a href=""changelog-0.3.95"">0.3.95</a>
<a href=""changelog-0.4.0"">0.4.0</a>

For the 0.5.x:
<a href=""changelog-0.4.60"">0.4.60</a>","Changelogs (each changelog as against the previous one):
<a href=""changelog-0.3.0"">0.3.0</a>

For the 0.4.x:
<a href=""changelog-0.3.60"">0.3.60</a>
<a href=""changelog-0.3.65"">0.3.65</a>
<a href=""changelog-0.3.70"">0.3.70</a>
<a href=""changelog-0.3.75"">0.3.75</a>
<a href=""changelog-0.3.80"">0.3.80</a>
<a href=""changelog-0.3.95"">0.3.95</a>
<a href=""changelog-0.4.0"">0.4.0</a>

For the 0.5.x:
<a href=""changelog-0.4.60"">0.4.60</a>"
83,page,Changelog for 0.3.0,1290901471,changelog-0.3.0,"<h2>Fixes</h2>
<h3>Overall</h3>
<ul>
<li>New icons for LeechCraft and plugins by Pevzi.</li>
<li>Updated translations.</li>
<li>Removed the splash screen.</li>
<li>More aggressive optimizations on Microsoft Windows builds.</li>
<li>Don't pull MSVS redist into the installer on Microsoft Windows. Saves about 2 megabytes of installer space and allows to install LeechCraft under non-admin user.</li>
</ul>
<h3>Core</h3>
<ul>
<li>Fixed a segfault when filtering items.</li>
<li>Fixed handler selection in some rare cases.</li>
<li>Fixed explicit selection of Arabic and Russian translations in the settings.</li>
<li>Use main toolbar for plugins' actions.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Fixed saving/loading the Item Bucket.</li>
<li>Fixed not saving tags for just added feeds.</li>
<li>Update items when channel is just being marked (un)read.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Fixed moving first/last items in the queue.</li>
<li>Fixed segfault on some panes.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Don't suggest empty pages (without URL) on session restore.</li>
</ul>
<h3>CleanWeb</h3>
</ul>
<li>Save approximately 9 KiB of memory per filter entry. Saves almost 50 MB on Morpeh's list!</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Correctly load the translation files.</li>
</ul>","<h2>Fixes</h2>
<h3>Overall</h3>
<ul>
<li>New icons for LeechCraft and plugins by Pevzi.</li>
<li>Updated translations.</li>
<li>Removed the splash screen.</li>
<li>More aggressive optimizations on Microsoft Windows builds.</li>
<li>Don't pull MSVS redist into the installer on Microsoft Windows. Saves about 2 megabytes of installer space and allows to install LeechCraft under non-admin user.</li>
</ul>
<h3>Core</h3>
<ul>
<li>Fixed a segfault when filtering items.</li>
<li>Fixed handler selection in some rare cases.</li>
<li>Fixed explicit selection of Arabic and Russian translations in the settings.</li>
<li>Use main toolbar for plugins' actions.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Fixed saving/loading the Item Bucket.</li>
<li>Fixed not saving tags for just added feeds.</li>
<li>Update items when channel is just being marked (un)read.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Fixed moving first/last items in the queue.</li>
<li>Fixed segfault on some panes.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Don't suggest empty pages (without URL) on session restore.</li>
</ul>
<h3>CleanWeb</h3>
</ul>
<li>Save approximately 9 KiB of memory per filter entry. Saves almost 50 MB on Morpeh's list!</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Correctly load the translation files.</li>
</ul>"
84,page,Changelog for 0.3.60,1291556389,changelog-0.3.60,"<h2>New features</h2>

<h3>Overall</h3>
<ul>
<li>Allow to clear cache and cookies.</li>
<li>Show settings dialog as a tree instead of combobox + list.</li>
<li>Reworked the task handler selector:<ul><li>Show more user-friendly and sensible name for a binary entity.</li>
<li>Don't suggest the task generator.</li>
<li>Smarter selector, only suggests handlers or downloaders sometimes.</li>
<li>Support multiple search tabs, the name of the tab is the category (ies).</li></ul></li>
<li>Support for startup wizards from plugins.</li>
<li>Allow to filter out tracking cookies.</li>
<li>Detect PQSQL availability at runtime and disallow selecting PostgreSQL storage backends if it's unavailable.</li>
<li>Added the <code>-type</code> command-line switch.</li>
<li>Application-wide context-dependent action to open new tab.</li>
<li>Allow to select multiple items in Summary and perform something on all of the selected ones.</li>
<li>Show context menus in the Summary tab.</li>
<li>Toolbars now have names.</li>
<li>Enhanced Plugins Manager.</li>
<li>Added (hideable) menu.</li>
<li>Added some menus to the tray.</li>
<li>Made the tabbar much more slim.</li>
<li>Set the application version.</li>
<li>""About"" and ""About Qt"" dialogs.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Startup wizard which allows to configure storage parameters, backend and add some predefined feeds.</li>
<li>Moved some actions for items to the context menu, like ""Subscribe to comments"".</li>
<li>Category selector on the right part of the screen for feeds that have categories.</li>
<li>Support iTunes podcasts RSS extensions.</li>
<li>Allow to automatically download enclosures.</li>
<li>Smoother switching of items.</li>
<li>Show some actions in the context menu for the feeds.</li>
<li>Allow out-of-order items in Atom feeds.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Allow to add peers.</li>
<li>Allow to add and remove HTTP/web seeds.</li>
<li>Checkboxes on folders when adding a torrent.</li>
<li>Reworked the tab widget — nicer everything.</li>
<li>Configurable fast speed controller.</li>
<li>Peers banlist.</li>
<li>Better files view, allowing to set priorities for multiple files at once and much more.</li>
<li>Startup wizard which allows to configure some basic settings.</li>
<li>Allow to create magnet URIs.</li>
<li>Show some actions in the context menu for the tasks.</li>
</ul>
<h3>Chatter</h3>
<ul>
<li>The simple IRC client.</li>
</ul>
<h3>CSTP</h3>
<ul>
<li>Store tags for the task.</li>
</ul>
<h3>HistoryHolder</h3>
<ul>
<li>Support removing multiple elements.</li>
</ul>
<h3>LCFTP</h3>
<ul>
<li>The FTP plugin.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Allow to play (stream) from remote URLs as well.</li>
</ul>
<h3>NetworkMonitor</h3>
<ul>
<li>Filter.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Allow to search from the page via LeechCraft's search architecture.</li>
<li>Allow to notify about page loads.</li>
<li>Reload timer.</li>
<li>Allow to disable tracking link-history (though tracking usual history).</li>
<li>Editing bookmarks, including title, URL and tags, via right-click.</li>
<li>Much more actions are available via the right mouse button.</li>
<li>Smarter find (if the text was selected).</li>
<li>Nicer progressbar, more slim and shows percentage and loaded/total size of the page.</li>
<li>Use own user-agent.</li>
</ul>
<h3>Remoter</h3>
<ul>
<li>Basically works with QWebClient.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Use common tags database instead of own categories.</li>
<li>Startup wizard which allows to add some predefined channels.</li>
</ul>
<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Optimized MergeModel.</li>
<li>Fixed Plugin Manager on some amd64 systems.</li>
<li>Fixed selecting Russian and Arabic translations.</li>
<li>Ask to restart only if language has really changed.</li>
<li>Allow to add URLs.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>2x performance boost on channels switch.</li>
<li>Really update items when channel is marked (un)read so that they trigger their state just right after that.</li>
<li>Still load if storage backend fails. Allow to set storage backend settings after that.</li>
<li>Got rid of some warnings from the PostgreSQL backend type.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Fixed segfaults on peers tab.</li>
<li>Selection follows the torrent when it's moved in the queue.</li>
<li>Correcly select files to download on addition.</li>
<li>Don't try to rename a file if its name hasn't changed.</li>
<li>Torrent creation segfaults.</li>
</ul>
<h3>CSTP</h3>
<ul>
<li>Fixed parsing URLs in redirects.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Move focus to the tab contents after load only if the tab is visible.</li>
<li>Try to handle ftp: and mailto: links before opening them externally.</li>
<li>Don't restore empty pages.</li>
<li>Fixed percent-encoding of items in autodiscovery.</li>
<li>Still load if storage backend fails. Allow to set storage backend settings after that.</li>
<li>Fixed completion of URLs with empty history.</li>
<li>Slight optimization of load event.</li>
</ul>
<h4>CleanWeb</h4>
<ul>
<li>Save approx. 9 kb per filter entry. Saves ~45 MiB on Morpeh filter list.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Actually install the translator.</li>
<li>More usable error messages.</li>
<li>Fixed segfault when tagging with no selection.</li>
</ul>","<h2>New features</h2>

<h3>Overall</h3>
<ul>
<li>Allow to clear cache and cookies.</li>
<li>Show settings dialog as a tree instead of combobox + list.</li>
<li>Reworked the task handler selector:<ul><li>Show more user-friendly and sensible name for a binary entity.</li>
<li>Don't suggest the task generator.</li>
<li>Smarter selector, only suggests handlers or downloaders sometimes.</li>
<li>Support multiple search tabs, the name of the tab is the category (ies).</li></ul></li>
<li>Support for startup wizards from plugins.</li>
<li>Allow to filter out tracking cookies.</li>
<li>Detect PQSQL availability at runtime and disallow selecting PostgreSQL storage backends if it's unavailable.</li>
<li>Added the <code>-type</code> command-line switch.</li>
<li>Application-wide context-dependent action to open new tab.</li>
<li>Allow to select multiple items in Summary and perform something on all of the selected ones.</li>
<li>Show context menus in the Summary tab.</li>
<li>Toolbars now have names.</li>
<li>Enhanced Plugins Manager.</li>
<li>Added (hideable) menu.</li>
<li>Added some menus to the tray.</li>
<li>Made the tabbar much more slim.</li>
<li>Set the application version.</li>
<li>""About"" and ""About Qt"" dialogs.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Startup wizard which allows to configure storage parameters, backend and add some predefined feeds.</li>
<li>Moved some actions for items to the context menu, like ""Subscribe to comments"".</li>
<li>Category selector on the right part of the screen for feeds that have categories.</li>
<li>Support iTunes podcasts RSS extensions.</li>
<li>Allow to automatically download enclosures.</li>
<li>Smoother switching of items.</li>
<li>Show some actions in the context menu for the feeds.</li>
<li>Allow out-of-order items in Atom feeds.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Allow to add peers.</li>
<li>Allow to add and remove HTTP/web seeds.</li>
<li>Checkboxes on folders when adding a torrent.</li>
<li>Reworked the tab widget — nicer everything.</li>
<li>Configurable fast speed controller.</li>
<li>Peers banlist.</li>
<li>Better files view, allowing to set priorities for multiple files at once and much more.</li>
<li>Startup wizard which allows to configure some basic settings.</li>
<li>Allow to create magnet URIs.</li>
<li>Show some actions in the context menu for the tasks.</li>
</ul>
<h3>Chatter</h3>
<ul>
<li>The simple IRC client.</li>
</ul>
<h3>CSTP</h3>
<ul>
<li>Store tags for the task.</li>
</ul>
<h3>HistoryHolder</h3>
<ul>
<li>Support removing multiple elements.</li>
</ul>
<h3>LCFTP</h3>
<ul>
<li>The FTP plugin.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Allow to play (stream) from remote URLs as well.</li>
</ul>
<h3>NetworkMonitor</h3>
<ul>
<li>Filter.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Allow to search from the page via LeechCraft's search architecture.</li>
<li>Allow to notify about page loads.</li>
<li>Reload timer.</li>
<li>Allow to disable tracking link-history (though tracking usual history).</li>
<li>Editing bookmarks, including title, URL and tags, via right-click.</li>
<li>Much more actions are available via the right mouse button.</li>
<li>Smarter find (if the text was selected).</li>
<li>Nicer progressbar, more slim and shows percentage and loaded/total size of the page.</li>
<li>Use own user-agent.</li>
</ul>
<h3>Remoter</h3>
<ul>
<li>Basically works with QWebClient.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Use common tags database instead of own categories.</li>
<li>Startup wizard which allows to add some predefined channels.</li>
</ul>
<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Optimized MergeModel.</li>
<li>Fixed Plugin Manager on some amd64 systems.</li>
<li>Fixed selecting Russian and Arabic translations.</li>
<li>Ask to restart only if language has really changed.</li>
<li>Allow to add URLs.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>2x performance boost on channels switch.</li>
<li>Really update items when channel is marked (un)read so that they trigger their state just right after that.</li>
<li>Still load if storage backend fails. Allow to set storage backend settings after that.</li>
<li>Got rid of some warnings from the PostgreSQL backend type.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Fixed segfaults on peers tab.</li>
<li>Selection follows the torrent when it's moved in the queue.</li>
<li>Correcly select files to download on addition.</li>
<li>Don't try to rename a file if its name hasn't changed.</li>
<li>Torrent creation segfaults.</li>
</ul>
<h3>CSTP</h3>
<ul>
<li>Fixed parsing URLs in redirects.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Move focus to the tab contents after load only if the tab is visible.</li>
<li>Try to handle ftp: and mailto: links before opening them externally.</li>
<li>Don't restore empty pages.</li>
<li>Fixed percent-encoding of items in autodiscovery.</li>
<li>Still load if storage backend fails. Allow to set storage backend settings after that.</li>
<li>Fixed completion of URLs with empty history.</li>
<li>Slight optimization of load event.</li>
</ul>
<h4>CleanWeb</h4>
<ul>
<li>Save approx. 9 kb per filter entry. Saves ~45 MiB on Morpeh filter list.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Actually install the translator.</li>
<li>More usable error messages.</li>
<li>Fixed segfault when tagging with no selection.</li>
</ul>"
85,page,Changelog for 0.3.65,1291556422,changelog-0.3.65,"<h2>New features</h2>

<h3>Overall</h3>
<ul>
<li>Handler choice dialog with path history and auto-suggestion.</li>
<li>Redesigned interface a bit.</li>
<li>Redesigned the Summary tab.</li>
<li>Embedding actions and menus from the plugins into Tools menu.</li>
<li>Moved Plugin Manager to the Settings Dialog.</li>
<li>Cleared away almost all the buttons from the main toolbar.</li>
<li>Persistent tabs are moveable as well.</li>
<li>Option to automatically accept tasks with only one handler and no downloaders.</li>
<li>Show plugins' icons in handler choice dialog.</li>
<li>Application-wide close button.</li>
<li>""Close all but current"" action.</li>
<li>Added shortcuts to Quit (F10) and Preferences (Ctrl+P).</li>
<li>Added <code>IDownload::KillTask()</code> to the Interfaces.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Full MediaRSS support (except restrictions).</li>
<li>GeoRSS support with a link to Google Maps.</li>
<li>Support adding OPML feeds and settings from an importer plugin.</li>
<li>Support for common OPML-based feed options like update interval etc.</li>
<li>Fetching OPML feeds from remote web servers.</li>
<li>Export to FB2 format.</li>
<li>Support feed: scheme.</li>
<li>Changeable color and font of unread items and channels.</li>
<li>Open links via internal browser if no browser plugin is present.</li>
<li>Regulatable (and rememberable) width of the Category Selector.</li>
<li>Kill stalled task instead of updating further.</li>
</ul>
<h3>AnHero</h3>
<ul>
<li><strong>New plugin:</strong> KDE-based UNIX-only crash handler.</li>
</ul>
<h3>DeadLyrics</h3>
<ul>
<li>Rebirth of the plugin, fixed searching.</li>
<li>Use a browser plugin if it's present to show lyrics (optional).</li>
</ul>
<h3>New Life</h3>
<ul>
<li><strong>New plugin:</strong> Import settings from various programs.</li>
<li>Support Akregator feeds and settings.</li>
<li>Support Liferea feeds.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Added flv to the list of default extensions.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Favorites checker.</li>
<li>Restore zoom factor, reload interval and load notification status on session restore.</li>
<li>Show favicons in favorites list.</li>
<li>Unified Reload/Stop button.</li>
</ul>
<h4>Poshuku CleanWeb</h4>
<ul>
<li>FlashOnClick: blocks unwanted flash.</li>
<li>Whitelist for FlashOnClick.</li>
<li>Neat menu for FlashOnClick.</li>
</ul>
<h3>vGrabber</h3>
<ul>
<li><strong>New plugin:</strong> vkontakte.ru audio/video client.</li>
<li>Support for downloading and/or streaming audio.</li>
<li>Support for downloading and/or streaming video.</li>
<li>Configurable search categories for both audio and video.</li>
<li>Filter out same audios.</li>
<li>Good error reporting.</li>
</ul>
<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Fixed out-of-sync selection and current index in the Summary.</li>
<li>Startup wizards use Modern style now.</li>
<li>Better error handling in handler choice dialog.</li>
<li>Correctly handle spaces in categories.</li>
<li>Support .svg icons without the .mapping file.</li>
<li>Clean duplicate cookies.</li>
<li>Unify search categories in the summary.</li>
<li>Apply new iconset only if it's different from previous.</li>
<li>Apply new app style only if it's different from pervious.</li>
<li>Apply new app style on startup only if it's different from default style.</li>
<li>Be more conservative on icon search. Saves ~1 MB RAM on Oxygen theme.</li>
<li>Fixed icon & translation loading on Windows.</li>
<li>More initialization moved to run-time. Saves startup time.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Fixed channel titles surrounded by \r\n.</li>
<li>Fixed segfault on last item removal.</li>
<li>Fixed double initialization in OPML importing.</li>
<li>Toggling channel read/unread is much much faster now.</li>
<li>General performance improvements.</li>
<li>Don't add items which would be truncated anyway.</li>
<li>Use correct URL after feed addition from another plugin and URL alteration.</li>
<li>Correctly set tags in exproted OPMLs.</li>
<li>Suggest right output dir in OPML export.</li>
<li>Fixed compatibility with Qt 4.6.</li>
<li>Always use external browser by default now.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Fixed segfault when trying to remove an item not belonging to BitTorrent.</li>
<li>Fixed segfault when removing many torrents at once under high load.</li>
<li>Fixed negative progress numbers in files tab.</li>
</ul>
<h3>DBusManager</h3>
<ul>
<li>Fixed a very rare segfault with delayed notifications on KDE.</li>
<li>Fixed some initialization to the main loop. Speeds up application start.</li>
</ul>
<h3>LCFTP</h3>
<ul>
<li>Correcly wait for the watcher thread to finish on Release.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Moved JS objects initialization. Fixes segfaults and the password manager.</li>
<li>Queued fill of forms. Fixes a rare segfault.</li>
<li>Small code fixes.</li>
<li>Higher change of tabs being restored.</li>
<li>Fixed history truncater by number of items in SQLite.</li>
<li>Don't show the animated AJAX-style icon.</li>
<li>Removed the text from the progress bar.</li>
</ul>
<h4>Poshuku CleanWeb</h4>
<ul>
<li>Don't return a blank page, just drop a request. Fixes infinite recursion on lists blocking about:blank.</li>
</ul>","<h2>New features</h2>

<h3>Overall</h3>
<ul>
<li>Handler choice dialog with path history and auto-suggestion.</li>
<li>Redesigned interface a bit.</li>
<li>Redesigned the Summary tab.</li>
<li>Embedding actions and menus from the plugins into Tools menu.</li>
<li>Moved Plugin Manager to the Settings Dialog.</li>
<li>Cleared away almost all the buttons from the main toolbar.</li>
<li>Persistent tabs are moveable as well.</li>
<li>Option to automatically accept tasks with only one handler and no downloaders.</li>
<li>Show plugins' icons in handler choice dialog.</li>
<li>Application-wide close button.</li>
<li>""Close all but current"" action.</li>
<li>Added shortcuts to Quit (F10) and Preferences (Ctrl+P).</li>
<li>Added <code>IDownload::KillTask()</code> to the Interfaces.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Full MediaRSS support (except restrictions).</li>
<li>GeoRSS support with a link to Google Maps.</li>
<li>Support adding OPML feeds and settings from an importer plugin.</li>
<li>Support for common OPML-based feed options like update interval etc.</li>
<li>Fetching OPML feeds from remote web servers.</li>
<li>Export to FB2 format.</li>
<li>Support feed: scheme.</li>
<li>Changeable color and font of unread items and channels.</li>
<li>Open links via internal browser if no browser plugin is present.</li>
<li>Regulatable (and rememberable) width of the Category Selector.</li>
<li>Kill stalled task instead of updating further.</li>
</ul>
<h3>AnHero</h3>
<ul>
<li><strong>New plugin:</strong> KDE-based UNIX-only crash handler.</li>
</ul>
<h3>DeadLyrics</h3>
<ul>
<li>Rebirth of the plugin, fixed searching.</li>
<li>Use a browser plugin if it's present to show lyrics (optional).</li>
</ul>
<h3>New Life</h3>
<ul>
<li><strong>New plugin:</strong> Import settings from various programs.</li>
<li>Support Akregator feeds and settings.</li>
<li>Support Liferea feeds.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Added flv to the list of default extensions.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Favorites checker.</li>
<li>Restore zoom factor, reload interval and load notification status on session restore.</li>
<li>Show favicons in favorites list.</li>
<li>Unified Reload/Stop button.</li>
</ul>
<h4>Poshuku CleanWeb</h4>
<ul>
<li>FlashOnClick: blocks unwanted flash.</li>
<li>Whitelist for FlashOnClick.</li>
<li>Neat menu for FlashOnClick.</li>
</ul>
<h3>vGrabber</h3>
<ul>
<li><strong>New plugin:</strong> vkontakte.ru audio/video client.</li>
<li>Support for downloading and/or streaming audio.</li>
<li>Support for downloading and/or streaming video.</li>
<li>Configurable search categories for both audio and video.</li>
<li>Filter out same audios.</li>
<li>Good error reporting.</li>
</ul>
<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Fixed out-of-sync selection and current index in the Summary.</li>
<li>Startup wizards use Modern style now.</li>
<li>Better error handling in handler choice dialog.</li>
<li>Correctly handle spaces in categories.</li>
<li>Support .svg icons without the .mapping file.</li>
<li>Clean duplicate cookies.</li>
<li>Unify search categories in the summary.</li>
<li>Apply new iconset only if it's different from previous.</li>
<li>Apply new app style only if it's different from pervious.</li>
<li>Apply new app style on startup only if it's different from default style.</li>
<li>Be more conservative on icon search. Saves ~1 MB RAM on Oxygen theme.</li>
<li>Fixed icon & translation loading on Windows.</li>
<li>More initialization moved to run-time. Saves startup time.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Fixed channel titles surrounded by \r\n.</li>
<li>Fixed segfault on last item removal.</li>
<li>Fixed double initialization in OPML importing.</li>
<li>Toggling channel read/unread is much much faster now.</li>
<li>General performance improvements.</li>
<li>Don't add items which would be truncated anyway.</li>
<li>Use correct URL after feed addition from another plugin and URL alteration.</li>
<li>Correctly set tags in exproted OPMLs.</li>
<li>Suggest right output dir in OPML export.</li>
<li>Fixed compatibility with Qt 4.6.</li>
<li>Always use external browser by default now.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Fixed segfault when trying to remove an item not belonging to BitTorrent.</li>
<li>Fixed segfault when removing many torrents at once under high load.</li>
<li>Fixed negative progress numbers in files tab.</li>
</ul>
<h3>DBusManager</h3>
<ul>
<li>Fixed a very rare segfault with delayed notifications on KDE.</li>
<li>Fixed some initialization to the main loop. Speeds up application start.</li>
</ul>
<h3>LCFTP</h3>
<ul>
<li>Correcly wait for the watcher thread to finish on Release.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Moved JS objects initialization. Fixes segfaults and the password manager.</li>
<li>Queued fill of forms. Fixes a rare segfault.</li>
<li>Small code fixes.</li>
<li>Higher change of tabs being restored.</li>
<li>Fixed history truncater by number of items in SQLite.</li>
<li>Don't show the animated AJAX-style icon.</li>
<li>Removed the text from the progress bar.</li>
</ul>
<h4>Poshuku CleanWeb</h4>
<ul>
<li>Don't return a blank page, just drop a request. Fixes infinite recursion on lists blocking about:blank.</li>
</ul>"
86,page,Changelog for 0.3.70,1291556449,changelog-0.3.70,"<h2>New features</h2>

<h3>Core</h3>
<ul>
<li>Moved library detection logic into corresponding plugins' <code>CMakeLists.txt</code>, each plugin can now be built separately and third-party plugin development is easier now.</li>
<li>Install LeechCraft headers into <code>include/leechcraft</code>.</li>
<li>Introduced some files for split build.</li>
<li>Glance view.</li>
<li>New notifications architecture.</li>
<li><code>FlatToFoldersProxyModel</code>.</li>
<li>Added <code>ITagsManager::GetAllTags()</code>.</li>
<li>""Select all"" and ""select none"" buttons in <code>CategorySelector</code>.</li>
<li>Plugin Manager is now in app-wide settings dialog.</li>
<li><code>gotEntity</code> and the handler chooser behavior change.</li>
<li><code>Util::MakeAbsoluteURL</code>.</li>
<li>Removed RPATH tricks.</li>
<li><code>-no-app-catch</code> command-line switch that disables exceptions handling in <code>QApplication::notify</code>.</li>
<li>Icons for error, information and warning.</li>
<li><code>SkinEngine::GetIconPath()</code>.</li>
<li>Register <code>QIODevice*</code> so that it can be used in signals/slots.</li>
<li>New tab on doubleclick.</li>
<li>Added <code>IWebWidget::SetNavBarVisible()</code> and support it in <code>Util::SelectableBrowser</code>.</li>
<li>Option for smarter tab width.</li>
<li>Better tab menu with support for tab bar actions from plugins.</li>
<li>""Actions"" submenu in the main menu.</li>
<li>Added <code>IMultiTabsWidget::ParentMultiTabs()</code>.</li>
<li>Option for toolbar icon size.</li>
<li>""Apply"" button in options.</li>
<li>Pop up the New tab menu when current tab doesn't support multiple tabs.</li>
<li>Allow to get the plugin path having its QObject*.</li>
<li>Removed <code>LeechCraft::Notification</code>, use Entities with MIME <em>x-leechcraft/notification</em> for notifications from now on.</li>
<li>Support basic/advanced startup wizard pages and modes.</li>
<li>Right mouse click on free space on the tabbar brings new tab menu.</li>
<li>Close tab on middle button click.</li>
<li>Handle <em>-type file</em> option.</li>
<li>New tab menu in main menu as well.</li>
<li>""Always"" option for exit.</li>
<li>Show information about new tab options.</li>
<li>Tooltip for entity field.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Use <code>FlatToFoldersProxyModel</code>.</li>
<li>Allow to hide navigation bar for the embedded web widget.</li>
<li>Show whole folder's contents when in Folders mode and a folder is selected.</li>
<li>Show number of news items in settings.</li>
<li>Control when to notify the user about new/updated items.</li>
<li>Storage settings only in Advanced mode.</li>
<li>""Show as tape"" button as a button.</li>
<li>Added tooltips on channels and items.</li>
</ul>
<h3>Auscrie</h3>
<ul>
<li>New plugin for auto screenshooting.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Allow to disable Peer ID override.</li>
<li>Initial Live Streaming support.</li>
<li>Save DHT state on shutdown for faster and better DHT startups.</li>
<li>NAT-PMP, LSD & UPnP are optional but enabled by default.</li>
<li>Notify about finished torrent generation.</li>
<li>Allow to add the newly created torrent.</li>
<li>""Destination"" field is a link now.</li>
<li>Allow to edit trackers by placing a button near label with current tracker.</li>
<li>Better trackers changer GUI.</li>
<li>BitTorrent is an EntityHandler now.</li>
<li>Notification about failure to add task due to file size is optional now.</li>
<li>Extensions are optional now.</li>
<li>Ask about removing the files when removing the torrent.</li>
<li>Option for full allocation mode.</li>
<li>Change trackers on multiple torrents.</li>
<li>Detect links in torrent comments.</li>
</ul>
<h3>Chatter</h3>
<ul>
<li>Added tooltips.</li>
<li>Embedding in tab bar.</li>
<li>General improvements.</li>
</ul>
<h3>DBusManager</h3>
<ul>
<li>Enhanced interface, including <code>Tasks</code>.</li>
<li>Start DBus daemon on Win32.</li>
<li>Compatibility with <code>org.freedesktop.Notifications</code>. Breaks KDE ≤ 4.3.</li>
<li>Support actions in notifications.</li>
</ul>
<h3>EiskaltDC++</h3>
<ul>
<li>Added EiskaltDC++ as a plugin for LeechCraft (damn experimental for now).</li>
</ul>
<h3>Kinotify</h3>
<ul>
<li>New plugin for fancy notifications based on Qt Kinetic project.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Display metadata where possible.</li>
<li>Buttons to toggle pause and full screen.</li>
<li>Volume up/down in context menu.</li>
<li>Implemented <code>IMediaPlayer</code> and changed lots of stuff because of that.</li>
<li>Consider <code>FromUserInitiated</code> flag.</li>
<li>Hide mouse in fullscreen.</li>
<li>Exit fullscreen mode when playback finished.</li>
<li>Support <code>QIODevice*</code>.</li>
</ul>
<h3>NetworkMonitor</h3>
<ul>
<li>Handle <code>DELETE</code> operations.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Show sidebar on each page.</li>
<li>Changing encodings.</li>
<li>Option to autoclose delegated empty pages.</li>
<li>Save/load page history in session.</li>
<li>DNS prefetching.</li>
<li>Offline web application cache.</li>
<li>Font/graphics antialiasing.</li>
<li>Support for clearing icons DB and in-memory cache.</li>
<li>Support multiple plugins per each MIME.</li>
<li><code>about:plugins</code> page.</li>
<li>Added <code>IFlashOverrider</code> plugin.</li>
<li>Use <code>FlatToFoldersProxyModel</code>.</li>
<li>Try to detect links to Atom/RSS feeds and allow to subscribe to them in context menu.</li>
<li>Show error code in error page.</li>
<li>Allow to build with Webkit from trunk.</li>
<li>Home page stub.</li>
<li>Highlight search results.</li>
<li>""Open"" action in notifications.</li>
<li>F6 to navigate to the URL line edit.</li>
<li>Suggestions on some common type of network failures.</li>
<li>Added autoscroll feature.</li>
<li>Loading information in tab title now.</li>
</ul>
<h3>Poshuku CleanWeb</h3>
<ul>
<li>Manual blocking via right-click on an image.</li>
<li>Implement <code>IFlashOverrider</code>.</li>
<li>Allow to add subscriptions from settings.</li>
<li>Suggest some commonly used subscriptions in startup wizard.</li>
<li>Hide blocked elements.</li>
<li>Allow to hide blocked flash.</li>
</ul>
<h3>Poshuku WYFV</h3>
<ul>
<li>New plugin, allows to use any media player like [[LMP]] to watch video without Flash installed.</li>
</ul>
<h3>Qrosp</h3>
<ul>
<li>New plugin for scripting support, Python and JavaScript currently.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Allow to hide navigation bar for the embedded web widget.</li>
</ul>
<h3>Summary</h3>
<ul>
<li>New plugin, refactored from what was Summary tab in Core. Now uses the search MIME: <code>x-leechcraft/category-search-request</code>.</li>
<li>Moved Search stuff to a separate dock widget.</li>
<li>AND/OR searchers, not the results.</li>
<li>Context-dependent names for tabs.</li>
</ul>
<h3>Tab++</h3>
<ul>
<li>New plugin for grouping tabs and generally better tabs management.</li>
</ul>
<h3>Other</h3>
<ul>
<li>Added <code>genplugin.py</code> script to easily generate plugin stubs.</li>
</ul>
<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Renamed <code>resources.qrc</code> to avoid clashes on, for example, Gentoo.</li>
<li>Parented messageboxes everywhere.</li>
<li>Use LC's notifications system to notify about errors whenever possible.</li>
<li>Optimized code which merges different models. Should sometimes be twice as fast.</li>
</ul>
<h3>Core</h3>
<ul>
<li>Actions menu has a name now.</li>
<li>Save toolbar positions.</li>
<li>Return unique categories from <code>CoreProxy::GetSearchCategories()</code>.</li>
<li>Respect <code>lib64</code> compile-time option when loading plugins.</li>
<li>Fixed multiple-instance detection code, now always work correctly.</li>
<li>Disable window updates on startup to start faster.</li>
<li>More checks for null/destroyed models in <code>MergeModel</code>. Fixes a couple of crashes.</li>
<li>Severely optimized <code>CategorySelector</code>.</li>
<li>Refactored Notification System.</li>
<li><code>TagsLineEdit</code> won't intercept shortcuts anymore.</li>
<li>Fixed completion of tags with multiple words.</li>
<li>Correctly show toolbar for the very first tab.</li>
<li>Emit <code>tagsChosen</code> with the tag chosen from completion/selecor.</li>
<li>Fixed completing first item in the list.</li>
<li>Use correct locale in <code>XmlSettingsDialog</code>.</li>
<li>Better <code>Util::GetLocale</code> behavior.</li>
<li>Small Windows-related fixes.</li>
<li>Fixed memory leak in translator installation: if translation loading failed, delete the object.</li>
<li>Support default=true/false attrs for checkable items.</li>
<li>Better adaptors support to handle those from <code>IPluginAdaptor</code> everywhere.</li>
<li>Load plugins with <code>ExportExternalSymbolsHint</code>.</li>
<li>Show plugins description instead of filename and wrap long rows.</li>
<li>MergeModel is more failsafe now — detect when underlying source models are destroyed.</li>
<li>Theme path search fix.</li>
<li>Properly parent the TabContainer.</li>
<li>Swap tooltip widgets when swapping tabs.</li>
<li>Fixed segfault on non-multitabs tabs.</li>
<li>Better <code>Util::TreeItem</code> interface.</li>
<li>Show menu on action trigger as well.</li>
<li>Hopefully fixed SSL dialog crashes.</li>
<li>Fixed segfaults when there are no tabs.</li>
<li>Slightly changed initialization order for plugins with tabs.</li>
<li>LANG detection fix.</li>
<li>Fixed some tabs not restoring.</li>
<li>Refactored XmlSettingsDialogs.</li>
<li>Hide window on exit immediately.</li>
<li>Fixed multiple Glance instances showing up.</li>
<li>Fixed tab names desync when opening tabs next to current is enabled.</li>
<li>Full screen Glance view.</li>
<li>Some SSL errors dialog fixes.</li>
<li>Show only ""Entity"" fiels for the common job adder.</li>
<li>Renamed DownloadEntity to Entity.</li>
<li>Better menu in the tab bar.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Fixed channels with empty links.</li>
<li>Better error logging.</li>
<li>Release/Cleanup fixes.</li>
<li>Remember ""Hide read"" state.</li>
<li>Severely optimized feeds with categories.</li>
<li>Severely optimized ItemsFilterModel.</li>
<li>Extremely optimized feeds updates especially if we already have a lot of items locally in that feed. Less disk activity, less DB pressure, less comparisons, a whole lot faster and smoother stuff.</li>
<li>Style fixes.</li>
<li>Fully separated Summary views and Aggregator's own tab views.</li>
<li>Fixed segfaults on exit.</li>
<li>Correctly handle foreign tasks.</li>
<li>Correctly trim by number: remove excessive items only from the channel where they are excessive.</li>
<li>Correcly handle RSS 2.0 feeds with no dates.</li>
<li>Better user notifications.</li>
<li>Fixed that after addition feeds are unviewable until restart.</li>
<li></code>SettingsSink</code> has a parent now.</li>
<li>Merged Link and Title into one hyperlink in <code>ItemsWidget</code>.</li>
<li>Fixed out-of-sync selections.</li>
<li>Enable/disable mark/add to item bucket actions when no items are selected.</li>
<li>Generate better fb2 exports.</li>
<li>Show RSS icon for iconless channels.</li>
<li>Properly filter in merge mode.</li>
<li>Better handling of MediaRSS.</li>
<li>Consider LinkRel attribute.</li>
<li>Moved lots of actions to the menu.</li>
<li>Fixed HTML markup in titles.</li>
<li>Nicer items rendering.</li>
<li>Experimental ""Unread items on top"" mode.</li>
<li>Detect also non-namespaced ""author"" tags in RSS feeds.</li>
<li>Refactored database. Should be better and faster now.</li>
<li>Fixed broken items search.</li>
<li>Fixed a segfault on task delegation failure.</li>
<li>Notify about failed delegations.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Emit <code>fileFinished()</code> with <code>QUrl</code> rather than with <code>QString</code>.</li>
<li>Redesigned a bit the AddTorrent dialog.</li>
<li>Some UTF-8-related fixes.</li>
<li>Fixed incorrect size of folders in <code>TorrentFilesModel</code>.</li>
<li>Fast speed control now compatible with Summary.</li>
<li>Better handling of the version.</li>
<li>Reworked new torrent wizard a bit. Allow to select files now.</li>
<li>Don't remove old torrents when saving session.</li>
<li>Restructured the settings.</li>
<li>Fixed addition of paused torrents.</li>
<li>Fixed compilation on gcc 4.5.</li>
<li>Fixed segfault on Windows when BitTorrent is run for the first time.</li>
</ul>
<h3>CSTP</h3>
<ul>
<li>Timer-based interface updates instead of event-based. Should be less CPU-hungry now.</li>
<li>Better error handling & notification about errors.</li>
<li>Take into account content-disposition and metadata from the replies.</li>
<li>Removed one obsolete now proxy model, should speed things up a little bit.</li>
<li>Moved some code to <code>SecondInit()</code> to avoid segfaults on some systems.</li>
<li>Long file names & other similar things handling in CSTP.</li>
<li>Show errors about failed files to the user.</li>
</ul>
<h3>DBusManager</h3>
<ul>
<li>Check for proper connection in CouldHandle.</li>
<li>Fixed a rare segfault on startup.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Fixed <code>KeyInterceptor</code>.</li>
<li>Proper initial volume.</li>
<li>Properly enqueue tasks.</li>
</ul>
<h3>NetworkMonitor</h3>
<ul>
<li>Fixed a rare segfault when <code>QNetworkReply</code> could be deleted without emitting <code>finished()</code> or <code>error()</code> signal.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Renamed to Poshuku Browser.</li>
<li>Ask for page restore even if title is empty.</li>
<li>Handle well links to RSS/Atom feeds with empty/no titles.</li>
<li>Return proper tags for <code>RoleTags</code> in <code>FavoritesModel</code>.</li>
<li>Don't show tags that don't exist.</li>
<li>Properly check tags.</li>
<li>Add to history on title changes as well.</li>
<li>Show correct image in error page.</li>
<li>Check if passed plugin is a good one.</li>
<li>Fixed a possible segfault on misinitialization.</li>
<li>Save page position in session.</li>
<li>Fixed wrong init.</li>
<li>Better session saving.</li>
<li>Fixed random jumps.</li>
<li>Show More and External menus on action trigger as well.</li>
<li>Moved some actions to the Tools menu.</li>
<li>Autodiscovery has been rewritten with QWebElement API. Should detect external resources on more sites.</li>
<li>Moved Import/Export XBel actions to menu.</li>
<li>Correctly handle theme updates for Reload/Stop button.</li>
<li>Primitives antialiasing off by default now (extremely slow).</li>
<li>Correctly handle IP urls like <code>::1</code>.</li>
<li>Fixed some bugs in Favorites with Flat to Folders proxy model. Should get rid of wrong tags after addition and such things.</li>
<li>Finally fixed Ctrl+C.</li>
<li>Error handling working on Qt ≥4.6.</li>
<li>Fixed handling of unknown schemes.</li>
<li>Propertly handle names/icons for first tab.</li>
<li>Saner size calculation for tab previews/thumbnails.</li>
<li>Correctly handle percent-encoded URLs.</li>
<li>Fixed handling of non-UTF URLs.</li>
<li>Working GMail (though not working password manager for now).</li>
<li>Migrated to hook-based slots.</li>
<li>Don't add items to history on title change.</li>
<li>Handle non-UTF8 symbols correctly in history.</li>
<li>Fixes for dark palettes.</li>
<li>Fixed a deadlock.</li>
<li>Fixes for database migration.</li>
<li>Fixed Qt 4.6 compatibility.</li>
</ul>
<h3>Poshuku CleanWeb</h3>
<ul>
<li>Correctly reject the filtered connection and return a valid reply.</li>
<li>Slight optimization: don't check against the filters if <code>originatingObject()</code> is null.</li>
<li>Optimization: don't check data: uris.</li>
<li>Fixed segfaults when clicking on the ""Load flash"" button.</li>
<li>Notifications about successful addition of a new subscription.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Fixed segfaults on errors.</li>
<li>Fixed rare segfault in StartupFirstPage by initializing header only after model has been populated.</li>
</ul>
<h3>vGrabber</h3>
<ul>
<li>Fixed/updated vkontakte's audio regexps.</li>
<li>Removed some old and outdated stuff.</li>
<li>Correctly work with cp1251 encoding and cyrillic names.</li>
<li>Context menu and action to copy URL to clipboard.</li>
</ul>
","<h2>New features</h2>

<h3>Core</h3>
<ul>
<li>Moved library detection logic into corresponding plugins' <code>CMakeLists.txt</code>, each plugin can now be built separately and third-party plugin development is easier now.</li>
<li>Install LeechCraft headers into <code>include/leechcraft</code>.</li>
<li>Introduced some files for split build.</li>
<li>Glance view.</li>
<li>New notifications architecture.</li>
<li><code>FlatToFoldersProxyModel</code>.</li>
<li>Added <code>ITagsManager::GetAllTags()</code>.</li>
<li>""Select all"" and ""select none"" buttons in <code>CategorySelector</code>.</li>
<li>Plugin Manager is now in app-wide settings dialog.</li>
<li><code>gotEntity</code> and the handler chooser behavior change.</li>
<li><code>Util::MakeAbsoluteURL</code>.</li>
<li>Removed RPATH tricks.</li>
<li><code>-no-app-catch</code> command-line switch that disables exceptions handling in <code>QApplication::notify</code>.</li>
<li>Icons for error, information and warning.</li>
<li><code>SkinEngine::GetIconPath()</code>.</li>
<li>Register <code>QIODevice*</code> so that it can be used in signals/slots.</li>
<li>New tab on doubleclick.</li>
<li>Added <code>IWebWidget::SetNavBarVisible()</code> and support it in <code>Util::SelectableBrowser</code>.</li>
<li>Option for smarter tab width.</li>
<li>Better tab menu with support for tab bar actions from plugins.</li>
<li>""Actions"" submenu in the main menu.</li>
<li>Added <code>IMultiTabsWidget::ParentMultiTabs()</code>.</li>
<li>Option for toolbar icon size.</li>
<li>""Apply"" button in options.</li>
<li>Pop up the New tab menu when current tab doesn't support multiple tabs.</li>
<li>Allow to get the plugin path having its QObject*.</li>
<li>Removed <code>LeechCraft::Notification</code>, use Entities with MIME <em>x-leechcraft/notification</em> for notifications from now on.</li>
<li>Support basic/advanced startup wizard pages and modes.</li>
<li>Right mouse click on free space on the tabbar brings new tab menu.</li>
<li>Close tab on middle button click.</li>
<li>Handle <em>-type file</em> option.</li>
<li>New tab menu in main menu as well.</li>
<li>""Always"" option for exit.</li>
<li>Show information about new tab options.</li>
<li>Tooltip for entity field.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Use <code>FlatToFoldersProxyModel</code>.</li>
<li>Allow to hide navigation bar for the embedded web widget.</li>
<li>Show whole folder's contents when in Folders mode and a folder is selected.</li>
<li>Show number of news items in settings.</li>
<li>Control when to notify the user about new/updated items.</li>
<li>Storage settings only in Advanced mode.</li>
<li>""Show as tape"" button as a button.</li>
<li>Added tooltips on channels and items.</li>
</ul>
<h3>Auscrie</h3>
<ul>
<li>New plugin for auto screenshooting.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Allow to disable Peer ID override.</li>
<li>Initial Live Streaming support.</li>
<li>Save DHT state on shutdown for faster and better DHT startups.</li>
<li>NAT-PMP, LSD & UPnP are optional but enabled by default.</li>
<li>Notify about finished torrent generation.</li>
<li>Allow to add the newly created torrent.</li>
<li>""Destination"" field is a link now.</li>
<li>Allow to edit trackers by placing a button near label with current tracker.</li>
<li>Better trackers changer GUI.</li>
<li>BitTorrent is an EntityHandler now.</li>
<li>Notification about failure to add task due to file size is optional now.</li>
<li>Extensions are optional now.</li>
<li>Ask about removing the files when removing the torrent.</li>
<li>Option for full allocation mode.</li>
<li>Change trackers on multiple torrents.</li>
<li>Detect links in torrent comments.</li>
</ul>
<h3>Chatter</h3>
<ul>
<li>Added tooltips.</li>
<li>Embedding in tab bar.</li>
<li>General improvements.</li>
</ul>
<h3>DBusManager</h3>
<ul>
<li>Enhanced interface, including <code>Tasks</code>.</li>
<li>Start DBus daemon on Win32.</li>
<li>Compatibility with <code>org.freedesktop.Notifications</code>. Breaks KDE ≤ 4.3.</li>
<li>Support actions in notifications.</li>
</ul>
<h3>EiskaltDC++</h3>
<ul>
<li>Added EiskaltDC++ as a plugin for LeechCraft (damn experimental for now).</li>
</ul>
<h3>Kinotify</h3>
<ul>
<li>New plugin for fancy notifications based on Qt Kinetic project.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Display metadata where possible.</li>
<li>Buttons to toggle pause and full screen.</li>
<li>Volume up/down in context menu.</li>
<li>Implemented <code>IMediaPlayer</code> and changed lots of stuff because of that.</li>
<li>Consider <code>FromUserInitiated</code> flag.</li>
<li>Hide mouse in fullscreen.</li>
<li>Exit fullscreen mode when playback finished.</li>
<li>Support <code>QIODevice*</code>.</li>
</ul>
<h3>NetworkMonitor</h3>
<ul>
<li>Handle <code>DELETE</code> operations.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Show sidebar on each page.</li>
<li>Changing encodings.</li>
<li>Option to autoclose delegated empty pages.</li>
<li>Save/load page history in session.</li>
<li>DNS prefetching.</li>
<li>Offline web application cache.</li>
<li>Font/graphics antialiasing.</li>
<li>Support for clearing icons DB and in-memory cache.</li>
<li>Support multiple plugins per each MIME.</li>
<li><code>about:plugins</code> page.</li>
<li>Added <code>IFlashOverrider</code> plugin.</li>
<li>Use <code>FlatToFoldersProxyModel</code>.</li>
<li>Try to detect links to Atom/RSS feeds and allow to subscribe to them in context menu.</li>
<li>Show error code in error page.</li>
<li>Allow to build with Webkit from trunk.</li>
<li>Home page stub.</li>
<li>Highlight search results.</li>
<li>""Open"" action in notifications.</li>
<li>F6 to navigate to the URL line edit.</li>
<li>Suggestions on some common type of network failures.</li>
<li>Added autoscroll feature.</li>
<li>Loading information in tab title now.</li>
</ul>
<h3>Poshuku CleanWeb</h3>
<ul>
<li>Manual blocking via right-click on an image.</li>
<li>Implement <code>IFlashOverrider</code>.</li>
<li>Allow to add subscriptions from settings.</li>
<li>Suggest some commonly used subscriptions in startup wizard.</li>
<li>Hide blocked elements.</li>
<li>Allow to hide blocked flash.</li>
</ul>
<h3>Poshuku WYFV</h3>
<ul>
<li>New plugin, allows to use any media player like [[LMP]] to watch video without Flash installed.</li>
</ul>
<h3>Qrosp</h3>
<ul>
<li>New plugin for scripting support, Python and JavaScript currently.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Allow to hide navigation bar for the embedded web widget.</li>
</ul>
<h3>Summary</h3>
<ul>
<li>New plugin, refactored from what was Summary tab in Core. Now uses the search MIME: <code>x-leechcraft/category-search-request</code>.</li>
<li>Moved Search stuff to a separate dock widget.</li>
<li>AND/OR searchers, not the results.</li>
<li>Context-dependent names for tabs.</li>
</ul>
<h3>Tab++</h3>
<ul>
<li>New plugin for grouping tabs and generally better tabs management.</li>
</ul>
<h3>Other</h3>
<ul>
<li>Added <code>genplugin.py</code> script to easily generate plugin stubs.</li>
</ul>
<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Renamed <code>resources.qrc</code> to avoid clashes on, for example, Gentoo.</li>
<li>Parented messageboxes everywhere.</li>
<li>Use LC's notifications system to notify about errors whenever possible.</li>
<li>Optimized code which merges different models. Should sometimes be twice as fast.</li>
</ul>
<h3>Core</h3>
<ul>
<li>Actions menu has a name now.</li>
<li>Save toolbar positions.</li>
<li>Return unique categories from <code>CoreProxy::GetSearchCategories()</code>.</li>
<li>Respect <code>lib64</code> compile-time option when loading plugins.</li>
<li>Fixed multiple-instance detection code, now always work correctly.</li>
<li>Disable window updates on startup to start faster.</li>
<li>More checks for null/destroyed models in <code>MergeModel</code>. Fixes a couple of crashes.</li>
<li>Severely optimized <code>CategorySelector</code>.</li>
<li>Refactored Notification System.</li>
<li><code>TagsLineEdit</code> won't intercept shortcuts anymore.</li>
<li>Fixed completion of tags with multiple words.</li>
<li>Correctly show toolbar for the very first tab.</li>
<li>Emit <code>tagsChosen</code> with the tag chosen from completion/selecor.</li>
<li>Fixed completing first item in the list.</li>
<li>Use correct locale in <code>XmlSettingsDialog</code>.</li>
<li>Better <code>Util::GetLocale</code> behavior.</li>
<li>Small Windows-related fixes.</li>
<li>Fixed memory leak in translator installation: if translation loading failed, delete the object.</li>
<li>Support default=true/false attrs for checkable items.</li>
<li>Better adaptors support to handle those from <code>IPluginAdaptor</code> everywhere.</li>
<li>Load plugins with <code>ExportExternalSymbolsHint</code>.</li>
<li>Show plugins description instead of filename and wrap long rows.</li>
<li>MergeModel is more failsafe now — detect when underlying source models are destroyed.</li>
<li>Theme path search fix.</li>
<li>Properly parent the TabContainer.</li>
<li>Swap tooltip widgets when swapping tabs.</li>
<li>Fixed segfault on non-multitabs tabs.</li>
<li>Better <code>Util::TreeItem</code> interface.</li>
<li>Show menu on action trigger as well.</li>
<li>Hopefully fixed SSL dialog crashes.</li>
<li>Fixed segfaults when there are no tabs.</li>
<li>Slightly changed initialization order for plugins with tabs.</li>
<li>LANG detection fix.</li>
<li>Fixed some tabs not restoring.</li>
<li>Refactored XmlSettingsDialogs.</li>
<li>Hide window on exit immediately.</li>
<li>Fixed multiple Glance instances showing up.</li>
<li>Fixed tab names desync when opening tabs next to current is enabled.</li>
<li>Full screen Glance view.</li>
<li>Some SSL errors dialog fixes.</li>
<li>Show only ""Entity"" fiels for the common job adder.</li>
<li>Renamed DownloadEntity to Entity.</li>
<li>Better menu in the tab bar.</li>
</ul>
<h3>Aggregator</h3>
<ul>
<li>Fixed channels with empty links.</li>
<li>Better error logging.</li>
<li>Release/Cleanup fixes.</li>
<li>Remember ""Hide read"" state.</li>
<li>Severely optimized feeds with categories.</li>
<li>Severely optimized ItemsFilterModel.</li>
<li>Extremely optimized feeds updates especially if we already have a lot of items locally in that feed. Less disk activity, less DB pressure, less comparisons, a whole lot faster and smoother stuff.</li>
<li>Style fixes.</li>
<li>Fully separated Summary views and Aggregator's own tab views.</li>
<li>Fixed segfaults on exit.</li>
<li>Correctly handle foreign tasks.</li>
<li>Correctly trim by number: remove excessive items only from the channel where they are excessive.</li>
<li>Correcly handle RSS 2.0 feeds with no dates.</li>
<li>Better user notifications.</li>
<li>Fixed that after addition feeds are unviewable until restart.</li>
<li></code>SettingsSink</code> has a parent now.</li>
<li>Merged Link and Title into one hyperlink in <code>ItemsWidget</code>.</li>
<li>Fixed out-of-sync selections.</li>
<li>Enable/disable mark/add to item bucket actions when no items are selected.</li>
<li>Generate better fb2 exports.</li>
<li>Show RSS icon for iconless channels.</li>
<li>Properly filter in merge mode.</li>
<li>Better handling of MediaRSS.</li>
<li>Consider LinkRel attribute.</li>
<li>Moved lots of actions to the menu.</li>
<li>Fixed HTML markup in titles.</li>
<li>Nicer items rendering.</li>
<li>Experimental ""Unread items on top"" mode.</li>
<li>Detect also non-namespaced ""author"" tags in RSS feeds.</li>
<li>Refactored database. Should be better and faster now.</li>
<li>Fixed broken items search.</li>
<li>Fixed a segfault on task delegation failure.</li>
<li>Notify about failed delegations.</li>
</ul>
<h3>BitTorrent</h3>
<ul>
<li>Emit <code>fileFinished()</code> with <code>QUrl</code> rather than with <code>QString</code>.</li>
<li>Redesigned a bit the AddTorrent dialog.</li>
<li>Some UTF-8-related fixes.</li>
<li>Fixed incorrect size of folders in <code>TorrentFilesModel</code>.</li>
<li>Fast speed control now compatible with Summary.</li>
<li>Better handling of the version.</li>
<li>Reworked new torrent wizard a bit. Allow to select files now.</li>
<li>Don't remove old torrents when saving session.</li>
<li>Restructured the settings.</li>
<li>Fixed addition of paused torrents.</li>
<li>Fixed compilation on gcc 4.5.</li>
<li>Fixed segfault on Windows when BitTorrent is run for the first time.</li>
</ul>
<h3>CSTP</h3>
<ul>
<li>Timer-based interface updates instead of event-based. Should be less CPU-hungry now.</li>
<li>Better error handling & notification about errors.</li>
<li>Take into account content-disposition and metadata from the replies.</li>
<li>Removed one obsolete now proxy model, should speed things up a little bit.</li>
<li>Moved some code to <code>SecondInit()</code> to avoid segfaults on some systems.</li>
<li>Long file names & other similar things handling in CSTP.</li>
<li>Show errors about failed files to the user.</li>
</ul>
<h3>DBusManager</h3>
<ul>
<li>Check for proper connection in CouldHandle.</li>
<li>Fixed a rare segfault on startup.</li>
</ul>
<h3>LMP</h3>
<ul>
<li>Fixed <code>KeyInterceptor</code>.</li>
<li>Proper initial volume.</li>
<li>Properly enqueue tasks.</li>
</ul>
<h3>NetworkMonitor</h3>
<ul>
<li>Fixed a rare segfault when <code>QNetworkReply</code> could be deleted without emitting <code>finished()</code> or <code>error()</code> signal.</li>
</ul>
<h3>Poshuku</h3>
<ul>
<li>Renamed to Poshuku Browser.</li>
<li>Ask for page restore even if title is empty.</li>
<li>Handle well links to RSS/Atom feeds with empty/no titles.</li>
<li>Return proper tags for <code>RoleTags</code> in <code>FavoritesModel</code>.</li>
<li>Don't show tags that don't exist.</li>
<li>Properly check tags.</li>
<li>Add to history on title changes as well.</li>
<li>Show correct image in error page.</li>
<li>Check if passed plugin is a good one.</li>
<li>Fixed a possible segfault on misinitialization.</li>
<li>Save page position in session.</li>
<li>Fixed wrong init.</li>
<li>Better session saving.</li>
<li>Fixed random jumps.</li>
<li>Show More and External menus on action trigger as well.</li>
<li>Moved some actions to the Tools menu.</li>
<li>Autodiscovery has been rewritten with QWebElement API. Should detect external resources on more sites.</li>
<li>Moved Import/Export XBel actions to menu.</li>
<li>Correctly handle theme updates for Reload/Stop button.</li>
<li>Primitives antialiasing off by default now (extremely slow).</li>
<li>Correctly handle IP urls like <code>::1</code>.</li>
<li>Fixed some bugs in Favorites with Flat to Folders proxy model. Should get rid of wrong tags after addition and such things.</li>
<li>Finally fixed Ctrl+C.</li>
<li>Error handling working on Qt ≥4.6.</li>
<li>Fixed handling of unknown schemes.</li>
<li>Propertly handle names/icons for first tab.</li>
<li>Saner size calculation for tab previews/thumbnails.</li>
<li>Correctly handle percent-encoded URLs.</li>
<li>Fixed handling of non-UTF URLs.</li>
<li>Working GMail (though not working password manager for now).</li>
<li>Migrated to hook-based slots.</li>
<li>Don't add items to history on title change.</li>
<li>Handle non-UTF8 symbols correctly in history.</li>
<li>Fixes for dark palettes.</li>
<li>Fixed a deadlock.</li>
<li>Fixes for database migration.</li>
<li>Fixed Qt 4.6 compatibility.</li>
</ul>
<h3>Poshuku CleanWeb</h3>
<ul>
<li>Correctly reject the filtered connection and return a valid reply.</li>
<li>Slight optimization: don't check against the filters if <code>originatingObject()</code> is null.</li>
<li>Optimization: don't check data: uris.</li>
<li>Fixed segfaults when clicking on the ""Load flash"" button.</li>
<li>Notifications about successful addition of a new subscription.</li>
</ul>
<h3>SeekThru</h3>
<ul>
<li>Fixed segfaults on errors.</li>
<li>Fixed rare segfault in StartupFirstPage by initializing header only after model has been populated.</li>
</ul>
<h3>vGrabber</h3>
<ul>
<li>Fixed/updated vkontakte's audio regexps.</li>
<li>Removed some old and outdated stuff.</li>
<li>Correctly work with cp1251 encoding and cyrillic names.</li>
<li>Context menu and action to copy URL to clipboard.</li>
</ul>
"
87,page,Changelog for 0.3.75,1291556491,changelog-0.3.75,"<h2>New features</h2>

<h3>Core</h3>
<ul>
<li>Experimental support for on-the-fly load/unload of plugins.</li>
<li>Unified new tab menu.</li>
<li>Notify user about plugin loading errors.</li>
<li>Nicer, richer startup options.</li>
<li>Datasources framework.</li>
<li>Detect available languages at runtime rather than have them hardcoded in the compile time.</li>
<li>Support explicit plugin loading from arbitrary paths.</li>
<li>Allow to set default new tab type.</li>
<li>Open X selection in new tab on middle click on the new tab button.</li>
<li>Hide menu and toolbar in fullscreen.</li>
<li>Control from keyboard in Glance.</li>
<li>Nicer tab bar menu.</li>
<li>Removed the left action bar.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Support <code type=""xml"">content:encoded</code>.</li>
<li>Select/deselect all buttons in startup wizard.</li>
<li>MySQL backend support.</li>
</ul>

<h3>Auscrie</h3>
<ul>
<li>Savepic.ru poster.</li>
</ul>

<h3>BitTorrent</h3>
<ul>
<li>Allow trackerless torrents.</li>
<li>Handle files on double click.</li>
<li>Removed spoofind caps.</li>
</ul>

<h3>CSTP</h3>
<ul>
<li>Support for <em>file://</em> URLs as well.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>LeechCraft Package Manager: new plugin.</li>
</ul>

<h3>New Life</h3>
<ul>
<li>Support for importing stuff from Firefox.</li>
</ul>

<h3>Popishu</h3>
<ul>
<li>New plugin for simple plain text editing.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Optional IDN support via libidn.</li>
<li>Support for external editors like Popishu.</li>
<li>MySQL backend support.</li>
<li>Correctly handle forms to load/save passwords.</li>
</ul>

<h3>SecMan</h3>
<ul>
<li>Plugin for storing personal data.</li>
<li>Support only basic unencrypted storage for now.</li>
</ul>

<h3>Qrosp</h3>
<ul>
<li>Handle plugin wrapping requests.</li>
</ul>

<h3>SeekThru</h3>
<ul>
<li>Support syncing.</li>
</ul>

<h3>ShellOpen</h3>
<ul>
<li>New plugin for opening things via external apps.</li>
</ul>

<h3>Syncer</h3>
<ul>
<li>Added new plugin for synchronization.</li>
</ul>

<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Nicer category selectors.</li>
</ul>

<h3>Core</h3>
<ul>
<li>Great reduce in startup time.</li>
<li>Avoid infinite loop and HDD space exhaustion (with logs) when one of plugins failed to load. Just skip it.</li>
<li>Fixed some bugs in directory watcher.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Fixed channels not being added.</li>
<li>Don't notify about null external data.</li>
<li>Saner colors by default.</li>
<li>Fixed interpreting palette colors.</li>
</ul>

<h3>BitTorrent</h3>
<ul>
<li>Fixed huuuuuge performance penalty.</li>
<li>Fixed the ""Trackers"" action in dashboard.</li>
<li>Fixed settings description.</li>
<li>Fixed compatibility with the <code>clang</code> compiler.</li>
<li>Correctly calculate the size of the torrent if a file was chosen.</li>
<li>Fixed restoring torrents if DHT is disabled.</li>
</ul>

<h3>DBusManager</h3>
<ul>
<li>Fixed a bug that hasn't appeared yet, though.</li>
</ul>

<h3>LMP</h3>
<ul>
<li>Accept .mp4 as well by default.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Force session info flush to avoid information loss.</li>
<li>Styling fixes.</li>
<li>Check if protocol can be handled before emitting it.</li>
<li>Select all the text in the address bar on focus.</li>
<li>Set tab title for new tabs.</li>
<li>Correctly handle import data files.</li>
</ul>

<h4>Poshuku CleanWeb</h4>
<ul>
<li>Fixes for Qt 4.7.</li>
</ul>

<h3>Qrosp</h3>
<ul>
<li>Declare <code>QNetworkAccessManager*</code>.</li>
<li>Proper convertation for metaobjects.</li>
</ul>

<h3>SeekThru</h3>
<ul>
<li>Fixed segfaults on platforms that don't support hiding exported symbols.</li>
</ul>

<h3>Summary</h3>
<ul>
<li>Better search widget interface.</li>
<li>Filter Downloads category as it should be filtered.</li>
</ul>

<h3>Tab++</h3>
<ul>
<li>Correctly handle non-existent tabs.</li>
</ul>

<h3>vGrabber</h3>
<ul>
<li>Fixed vkontakte.ru video grabbing.</li>
</ul>","<h2>New features</h2>

<h3>Core</h3>
<ul>
<li>Experimental support for on-the-fly load/unload of plugins.</li>
<li>Unified new tab menu.</li>
<li>Notify user about plugin loading errors.</li>
<li>Nicer, richer startup options.</li>
<li>Datasources framework.</li>
<li>Detect available languages at runtime rather than have them hardcoded in the compile time.</li>
<li>Support explicit plugin loading from arbitrary paths.</li>
<li>Allow to set default new tab type.</li>
<li>Open X selection in new tab on middle click on the new tab button.</li>
<li>Hide menu and toolbar in fullscreen.</li>
<li>Control from keyboard in Glance.</li>
<li>Nicer tab bar menu.</li>
<li>Removed the left action bar.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Support <code type=""xml"">content:encoded</code>.</li>
<li>Select/deselect all buttons in startup wizard.</li>
<li>MySQL backend support.</li>
</ul>

<h3>Auscrie</h3>
<ul>
<li>Savepic.ru poster.</li>
</ul>

<h3>BitTorrent</h3>
<ul>
<li>Allow trackerless torrents.</li>
<li>Handle files on double click.</li>
<li>Removed spoofind caps.</li>
</ul>

<h3>CSTP</h3>
<ul>
<li>Support for <em>file://</em> URLs as well.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>LeechCraft Package Manager: new plugin.</li>
</ul>

<h3>New Life</h3>
<ul>
<li>Support for importing stuff from Firefox.</li>
</ul>

<h3>Popishu</h3>
<ul>
<li>New plugin for simple plain text editing.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Optional IDN support via libidn.</li>
<li>Support for external editors like Popishu.</li>
<li>MySQL backend support.</li>
<li>Correctly handle forms to load/save passwords.</li>
</ul>

<h3>SecMan</h3>
<ul>
<li>Plugin for storing personal data.</li>
<li>Support only basic unencrypted storage for now.</li>
</ul>

<h3>Qrosp</h3>
<ul>
<li>Handle plugin wrapping requests.</li>
</ul>

<h3>SeekThru</h3>
<ul>
<li>Support syncing.</li>
</ul>

<h3>ShellOpen</h3>
<ul>
<li>New plugin for opening things via external apps.</li>
</ul>

<h3>Syncer</h3>
<ul>
<li>Added new plugin for synchronization.</li>
</ul>

<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Nicer category selectors.</li>
</ul>

<h3>Core</h3>
<ul>
<li>Great reduce in startup time.</li>
<li>Avoid infinite loop and HDD space exhaustion (with logs) when one of plugins failed to load. Just skip it.</li>
<li>Fixed some bugs in directory watcher.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Fixed channels not being added.</li>
<li>Don't notify about null external data.</li>
<li>Saner colors by default.</li>
<li>Fixed interpreting palette colors.</li>
</ul>

<h3>BitTorrent</h3>
<ul>
<li>Fixed huuuuuge performance penalty.</li>
<li>Fixed the ""Trackers"" action in dashboard.</li>
<li>Fixed settings description.</li>
<li>Fixed compatibility with the <code>clang</code> compiler.</li>
<li>Correctly calculate the size of the torrent if a file was chosen.</li>
<li>Fixed restoring torrents if DHT is disabled.</li>
</ul>

<h3>DBusManager</h3>
<ul>
<li>Fixed a bug that hasn't appeared yet, though.</li>
</ul>

<h3>LMP</h3>
<ul>
<li>Accept .mp4 as well by default.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Force session info flush to avoid information loss.</li>
<li>Styling fixes.</li>
<li>Check if protocol can be handled before emitting it.</li>
<li>Select all the text in the address bar on focus.</li>
<li>Set tab title for new tabs.</li>
<li>Correctly handle import data files.</li>
</ul>

<h4>Poshuku CleanWeb</h4>
<ul>
<li>Fixes for Qt 4.7.</li>
</ul>

<h3>Qrosp</h3>
<ul>
<li>Declare <code>QNetworkAccessManager*</code>.</li>
<li>Proper convertation for metaobjects.</li>
</ul>

<h3>SeekThru</h3>
<ul>
<li>Fixed segfaults on platforms that don't support hiding exported symbols.</li>
</ul>

<h3>Summary</h3>
<ul>
<li>Better search widget interface.</li>
<li>Filter Downloads category as it should be filtered.</li>
</ul>

<h3>Tab++</h3>
<ul>
<li>Correctly handle non-existent tabs.</li>
</ul>

<h3>vGrabber</h3>
<ul>
<li>Fixed vkontakte.ru video grabbing.</li>
</ul>"
88,story,"LeechCraft 0.3.95 is released, 0.4.0 is coming",1290984732,,"Today LeechCraft 0.3.95 is released. This release designates the beginning of feature freeze for the 0.4.0 version, which we will talk about a bit later.

LeechCraft 0.3.95 is available prepackaged, as always, for the following distros and OS right now:
<ul>
<li>Ubuntu 10.04 and 10.10, from <code type=""bash"">ppa:0xd34df00d/leechcraft</code> PPA repository.</li>
<li>Gentoo, from the <code>rion</code> overlay, the leechcraft-full-0.3.95 package.</li>
<li>Microsoft Windows: <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.3.95/leechcraft-0.3.95.exe/download"">download from SourceForge</a>.</li>
</ul>

And, well, now about the 0.4.0 version. We have only three open issues for the 0.4.0 version, and all of them are feature requests, so LeechCraft 0.4.0 is expected to be released in the following week or two. We will have 4 releases inbetween every 3-4 days, each with bugfixes and maybe a new feature..","Today LeechCraft 0.3.95 is released. This release designates the beginning of feature freeze for the 0.4.0 version, which we will talk about a bit later.

LeechCraft 0.3.95 is available prepackaged, as always, for the following distros and OS right now:
<ul>
<li>Ubuntu 10.04 and 10.10, from <code type=""bash"">ppa:0xd34df00d/leechcraft</code> PPA repository.</li>
<li>Gentoo, from the <code>rion</code> overlay, the leechcraft-full-0.3.95 package.</li>
<li>Microsoft Windows: <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.3.95/leechcraft-0.3.95.exe/download"">download from SourceForge</a>.</li>
</ul>

And, well, now about the 0.4.0 version. We have only three open issues for the 0.4.0 version, and all of them are feature requests, so LeechCraft 0.4.0 is expected to be released in the following week or two. We will have 4 releases inbetween every 3-4 days, each with bugfixes and maybe a new feature.."
90,page,Changelog for 0.3.80,1291556534,changelog-0.3.80,"<h2>Features</h2>

<h3>Core</h3>
<ul>
<li>Shortcut keys for glance and navigation to tab number 1-10.</li>
<li>Added system default Qt style to the options.</li>
<li>Added keyboard accelerators for new tab menu.</li>
</ul>

<h3>Kinotify</h3>
<ul>
<li>Completely rewritten notifications plugin.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Actions for upgrading and updating everything.</li>
<li>Added <code>data</code> package type.</li>
</ul>

<h3>New Life</h3>
<ul>
<li>Import Manager for Firefox importer.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Embed the menu into the main menu.</li>
<li>Added Paste action to all text fields.</li>
</ul>

<h4>Poshuku CleanWeb</h4>
<ul>
<li>Support for <code type=""bash"">subscriptionslist.xml</code> stuff.</li>
</ul>

<h2>Fixes</h2>

<h3>Core</h3>
<ul>
<li>Removed some stuff previously marked as obsolete, regarding <code>log()</code> and <code>notifyFinished()</code> signals.</li>
<li>Moved to datasource concept everywhere.</li>
<li>Fix layouting in settings dialog.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Fixed a segfault on action finish.</li>
<li>Fixed untoggable buttons.</li>
<li>Fixed scrolling without selected items.</li>
<li>Use <code type=""bash"">7za</code> on Windows instead of <code type=""bash"">tar</code>.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Check if the new forms data is equal to old.</li>
<li>Escape '+' in search queries.</li>
<li>Compatibility with Google improved on non-UTF8 systems.</li>
</ul>

<h3>Tab++</h3>
<ul>
<li>Add to the right and be not floating by default now. Fixes rendering errors sometimes.</li>
</ul>","<h2>Features</h2>

<h3>Core</h3>
<ul>
<li>Shortcut keys for glance and navigation to tab number 1-10.</li>
<li>Added system default Qt style to the options.</li>
<li>Added keyboard accelerators for new tab menu.</li>
</ul>

<h3>Kinotify</h3>
<ul>
<li>Completely rewritten notifications plugin.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Actions for upgrading and updating everything.</li>
<li>Added <code>data</code> package type.</li>
</ul>

<h3>New Life</h3>
<ul>
<li>Import Manager for Firefox importer.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Embed the menu into the main menu.</li>
<li>Added Paste action to all text fields.</li>
</ul>

<h4>Poshuku CleanWeb</h4>
<ul>
<li>Support for <code type=""bash"">subscriptionslist.xml</code> stuff.</li>
</ul>

<h2>Fixes</h2>

<h3>Core</h3>
<ul>
<li>Removed some stuff previously marked as obsolete, regarding <code>log()</code> and <code>notifyFinished()</code> signals.</li>
<li>Moved to datasource concept everywhere.</li>
<li>Fix layouting in settings dialog.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Fixed a segfault on action finish.</li>
<li>Fixed untoggable buttons.</li>
<li>Fixed scrolling without selected items.</li>
<li>Use <code type=""bash"">7za</code> on Windows instead of <code type=""bash"">tar</code>.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Check if the new forms data is equal to old.</li>
<li>Escape '+' in search queries.</li>
<li>Compatibility with Google improved on non-UTF8 systems.</li>
</ul>

<h3>Tab++</h3>
<ul>
<li>Add to the right and be not floating by default now. Fixes rendering errors sometimes.</li>
</ul>"
91,page,Changelog for 0.3.95,1291556544,changelog-0.3.95,"<h2>New features</h2>

<h3>Aggregator</h3>
<ul>
<li>Allow to disable automatic updates at all.</li>
<li>Allow to add feed from feeds list context menu.</li>
<li>Actions for marking as read and open in new tab.</li>
<li>Support selection of multiple items at once.</li>
</ul>

<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Always initialize internal browser in <code>SelectableBrowser</code> — fixes various segfaults when Poshuku is unavailable.</li>
<li>Fixed Mac OS paths.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Don't store max IDs, instead, take them from DB on startup.</li>
</ul>

<h3>Core</h3>
<ul>
<li>Fixed occasional segfault on exit.</li>
<li>Fixed unclose tab management.</li>
</ul>

<h3>Kinotify</h3>
<ul>
<li>Fixed a memory leak.</li>
<li>Fixes for multiscreen configurations.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Hide everything additional in the description browser.</li>
</ul>","<h2>New features</h2>

<h3>Aggregator</h3>
<ul>
<li>Allow to disable automatic updates at all.</li>
<li>Allow to add feed from feeds list context menu.</li>
<li>Actions for marking as read and open in new tab.</li>
<li>Support selection of multiple items at once.</li>
</ul>

<h2>Fixes</h2>

<h3>Overall</h3>
<ul>
<li>Always initialize internal browser in <code>SelectableBrowser</code> — fixes various segfaults when Poshuku is unavailable.</li>
<li>Fixed Mac OS paths.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Don't store max IDs, instead, take them from DB on startup.</li>
</ul>

<h3>Core</h3>
<ul>
<li>Fixed occasional segfault on exit.</li>
<li>Fixed unclose tab management.</li>
</ul>

<h3>Kinotify</h3>
<ul>
<li>Fixed a memory leak.</li>
<li>Fixes for multiscreen configurations.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Hide everything additional in the description browser.</li>
</ul>"
92,page,Changelog for 0.4.0,1291556558,changelog-0.4.0,"<h2>Fixes</h2>
<h3>Core</h3>
<ul>
<li>Remove smart tab width calculation mode, it fails on some styles.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Navigate to the selected item in autocompletion list on mouse click.</li>
<li>Allow to search by categories via the <code>!</code>-beginning string.</li>
<li>Fixed UA string, GMail and such should work out of the box now.</li>
</ul>","<h2>Fixes</h2>
<h3>Core</h3>
<ul>
<li>Remove smart tab width calculation mode, it fails on some styles.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Navigate to the selected item in autocompletion list on mouse click.</li>
<li>Allow to search by categories via the <code>!</code>-beginning string.</li>
<li>Fixed UA string, GMail and such should work out of the box now.</li>
</ul>"
93,story,LeechCraft 0.4.0 is out!,1291212044,,"We are happy and proud to announce the release of LeechCraft 0.4.0.

This is a huge step forward since the 0.3 release, both in terms of code and architecture things and in UI, usability and, of course, the featureset.

Since 0.3.0, we've introduced a better and easier to understand user interface, several new plugins like Qrosp for scripting support, LackMan for package management and lots of others smaller plugins. Of course, there were tons of improvements and bugfixes in already-existing plugins.

LeechCraft 0.4.0 is already packaged for Ubuntu 10.04 and 10.10 and is available, as always, at <code>ppa:0xd34df00d/leechcraft</code>, there are also ebuilds in rion overlay for Gentoo and PKGBUILDs for Arch Linux. Windows installer is also <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.4/leechcraft-0.4.0-1.exe/download"">available</a>.

Please give it a try and report bugs, incosistencies and anything you find. You can find us at Jabber conference at leechcraft@conference.jabber.ru and you can also use the <a href=""https://lists.sourceforge.net/lists/listinfo/leechcraft-users"">leechcraft-users@lists.sourceforge.net</a> maillist.

By the way, it's still hard to develop the application by myself with rare contributions from other people. So, if you are the one of the following:
<ul>
<li>UI designers or just people not afraid to run LeechCraft, test it and report bugs.</li>
<li>Developers for the following features, among others:
<ul>
<li>Implementation of other protocols in IM client (only XMPP is implemented now).</li>
<li>Maintaining EiskaltDC++ for LeechCraft, or writing another DC client from scratch.</li>
<li>UI coding.</li>
<li>Support layers for Google Chrome extensions and GreaseMonkey scripts.</li>
<li>Media player to replace LMP.</li>
<li>Win32-developers for WIn32-specific tasks and testing.</li>
<li>Any task you find interesting as developer or as user.</li>
</ul>
<li>Maintainers for OpenSUSE, Mandriva, FreeBSD and any other distro.</li>
<li>People ready to write documentation, both technical docs and user manuals.</li>
</ul>","We are happy and proud to announce the release of LeechCraft 0.4.0.

This is a huge step forward since the 0.3 release, both in terms of code and architecture things and in UI, usability and, of course, the featureset.

Since 0.3.0, we've introduced a better and easier to understand user interface, several new plugins like Qrosp for scripting support, LackMan for package management and lots of others smaller plugins. Of course, there were tons of improvements and bugfixes in already-existing plugins.

LeechCraft 0.4.0 is already packaged for Ubuntu 10.04 and 10.10 and is available, as always, at <code>ppa:0xd34df00d/leechcraft</code>, there are also ebuilds in rion overlay for Gentoo and PKGBUILDs for Arch Linux. Windows installer is also <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.4/leechcraft-0.4.0-1.exe/download"">available</a>.

Please give it a try and report bugs, incosistencies and anything you find. You can find us at Jabber conference at leechcraft@conference.jabber.ru and you can also use the <a href=""https://lists.sourceforge.net/lists/listinfo/leechcraft-users"">leechcraft-users@lists.sourceforge.net</a> maillist.

By the way, it's still hard to develop the application by myself with rare contributions from other people. So, if you are the one of the following:
<ul>
<li>UI designers or just people not afraid to run LeechCraft, test it and report bugs.</li>
<li>Developers for the following features, among others:
<ul>
<li>Implementation of other protocols in IM client (only XMPP is implemented now).</li>
<li>Maintaining EiskaltDC++ for LeechCraft, or writing another DC client from scratch.</li>
<li>UI coding.</li>
<li>Support layers for Google Chrome extensions and GreaseMonkey scripts.</li>
<li>Media player to replace LMP.</li>
<li>Win32-developers for WIn32-specific tasks and testing.</li>
<li>Any task you find interesting as developer or as user.</li>
</ul>
<li>Maintainers for OpenSUSE, Mandriva, FreeBSD and any other distro.</li>
<li>People ready to write documentation, both technical docs and user manuals.</li>
</ul>"
95,page,Changelog for 0.4.60,1295309657,changelog-0.4.60,"<h2>New features</h2>
<h3>Overall</h3>
<ul>
<li>Build with <code>-Wl,--as-needed</code> on UNIXes.</li>
</ul>

<h3>Core</h3>
<ul>
<li>Added <code>ResourceLoader</code> class.</li>
<li>Removed menu bar at all in favor of menu button.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Notify on FB2 export finish.</li>
</ul>

<h3>Azoth</h3>
<ul>
<li>Introduced Azoth, the plugin for IM, despite it was in source archives for 0.4 series, so I won't write about every commit related to Azoth here..</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>""Reload all"" action.</li>
<li>Search by categories (by prepending ! to the search string) with suggestions.</li>
<li>Actions with hotkeys for History and Bookmarks (Ctrl+H and Ctrl+B respectively).</li>
<li>Save sidebar position.</li>
</ul>

<h2>Fixes</h2>
<h3>Overall</h3>
<ul>
<li>Removed Nufella, PoC, Remoter and YASD from the source tree. If somebody needs them, just revert c5922ca607858fc11d6171f1af4e3971f3c2169b.</li>
<li>Removed LCNP (c387a7927f723bdda4c26eaeee626e8a59a1b762).</li>
</ul>

<h3>Core</h3>
<ul>
<li>Fixed some segfaults on exit.</li>
<li>Plugin manager dependency calculation fixes.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li><a href=""http://dev.leechcraft.org/issues/210"">#210</a>: fixed default color for unread items in settings.</li>
<li><a href=""http://dev.leechcraft.org/issues/219"">#219</a>: add feed to the database only after first successful parse.</li>
<li>Fixed some rare segfaults.</li>
<li>Removed useless dependency on boost.date_time.</li>
</ul>

<h3>AnHero</h3>
<ul>
<li>Explicitly enable DrKonqi on KDE 4.5 and higher.</li>
</ul>

<h3>Kinotify</h3>
<ul>
<li>Fixed widgets leak.</li>
<li>Fixed animation points.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Fixed ugly selections.</li>
<li>Fixed tests not compiling without fixing them by hand.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Changed User-Agent string format to something like <code>Mozilla/5.0 (X11; U; Linux x86_64; ru-RU) AppleWebKit/533.3 (KHTML, like Gecko) Leechcraft/0.4.60-4-geaa173c Safari/533.3</code>, gmail and other similar sites recognize LeechCraft now.</li>
<li>Fixed labels in the form data storage remember dialog.</li>
<li>Remember last used forms data, not first used.</li>
</ul>

<h3>Qrosp</h3>
<ul>
<li>Wrapper objects depend on the main Qrosp plugin now.</li>
</ul>","<h2>New features</h2>
<h3>Overall</h3>
<ul>
<li>Build with <code>-Wl,--as-needed</code> on UNIXes.</li>
</ul>

<h3>Core</h3>
<ul>
<li>Added <code>ResourceLoader</code> class.</li>
<li>Removed menu bar at all in favor of menu button.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li>Notify on FB2 export finish.</li>
</ul>

<h3>Azoth</h3>
<ul>
<li>Introduced Azoth, the plugin for IM, despite it was in source archives for 0.4 series, so I won't write about every commit related to Azoth here..</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>""Reload all"" action.</li>
<li>Search by categories (by prepending ! to the search string) with suggestions.</li>
<li>Actions with hotkeys for History and Bookmarks (Ctrl+H and Ctrl+B respectively).</li>
<li>Save sidebar position.</li>
</ul>

<h2>Fixes</h2>
<h3>Overall</h3>
<ul>
<li>Removed Nufella, PoC, Remoter and YASD from the source tree. If somebody needs them, just revert c5922ca607858fc11d6171f1af4e3971f3c2169b.</li>
<li>Removed LCNP (c387a7927f723bdda4c26eaeee626e8a59a1b762).</li>
</ul>

<h3>Core</h3>
<ul>
<li>Fixed some segfaults on exit.</li>
<li>Plugin manager dependency calculation fixes.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li><a href=""http://dev.leechcraft.org/issues/210"">#210</a>: fixed default color for unread items in settings.</li>
<li><a href=""http://dev.leechcraft.org/issues/219"">#219</a>: add feed to the database only after first successful parse.</li>
<li>Fixed some rare segfaults.</li>
<li>Removed useless dependency on boost.date_time.</li>
</ul>

<h3>AnHero</h3>
<ul>
<li>Explicitly enable DrKonqi on KDE 4.5 and higher.</li>
</ul>

<h3>Kinotify</h3>
<ul>
<li>Fixed widgets leak.</li>
<li>Fixed animation points.</li>
</ul>

<h3>LackMan</h3>
<ul>
<li>Fixed ugly selections.</li>
<li>Fixed tests not compiling without fixing them by hand.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Changed User-Agent string format to something like <code>Mozilla/5.0 (X11; U; Linux x86_64; ru-RU) AppleWebKit/533.3 (KHTML, like Gecko) Leechcraft/0.4.60-4-geaa173c Safari/533.3</code>, gmail and other similar sites recognize LeechCraft now.</li>
<li>Fixed labels in the form data storage remember dialog.</li>
<li>Remember last used forms data, not first used.</li>
</ul>

<h3>Qrosp</h3>
<ul>
<li>Wrapper objects depend on the main Qrosp plugin now.</li>
</ul>"
96,page,Changelog for 0.4.65,1295311186,changelog-0.4.65,"<h2>New features</h2>
<h3>Core</h3>
<ul>
<li>Added <code>listview</code> item type to XSD.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li><a href=""http://dev.leechcraft.org/issues/260"">#260</a>: mark all as read or unread by tag category.</li>
</ul>

<h3>Azoth</h3>
This section features both Azoth and its plugins like Azoth Xoox.
<ul>
<li>Added feature to grant or deny authentication.</li>
<li>Request authentication when granting it to another contact.</li>
<li>Lots of small fixes in UI and representation.</li>
<li>Connect to MUCs that were joined while being offline.</li>
<li>Support showing VCards.</li>
<li><a href=""http://dev.leechcraft.org/issues/242"">#242</a>: support <code>/nick</code> command.</li>
<li>Support <code>/me</code> in chats.</li>
<li><a href=""http://dev.leechcraft.org/issues/241"">#241</a>: support changing roles and affiliations in MUCs.</li>
<li><a href=""http://dev.leechcraft.org/issues/240"">#240</a>: support kicking and banning.</li>
<li><a href=""http://dev.leechcraft.org/issues/236"">#236</a>: show MUC subject in tab instead of separate dialog.</li>
<li>Allow to change MUC subject.</li>
<li>Detect role/affiliation changes and notify about them.</li>
<li><a href=""http://dev.leechcraft.org/issues/185"">#185</a>: allow to add new contacts.</li>
<li><a href=""http://dev.leechcraft.org/issues/186"">#186</a>: support renaming items in contact list.</li>
<li><a href=""http://dev.leechcraft.org/issues/239"">#239</a>: support manipulation authentification from contact's context menu.</li>
<li><a href=""http://dev.leechcraft.org/issues/253"">#253</a>: allow to hide offline contacts.</li>
<li>Draw icon for state of the account.</li>
<li>Stubs for client version detection.</li>
<li>Nicer delegate, showing client icons.</li>
<li><a href=""http://dev.leechcraft.org/issues/187"">#187</a>: allow to remove items from contact list.</li>
<li><a href=""http://dev.leechcraft.org/issues/269"">#269</a>: support proxies, take the settings from the Core.</li>
<li><a href=""http://dev.leechcraft.org/issues/262"">#262</a>: nicer Change Status menu.</li>
</ul>

<h3>Poshuku</h3>
<h4>OnlineBookmarks</h4>
<ul>
<li><a href=""http://dev.leechcraft.org/issues/60"">#60</a>: added plugin for synchronizing bookmarks with various social bookmarks services like Read It Later.</li>
</ul>

<h3>Syncer</h3>
<ul>
<li>Use host, port, login and password from syncer settings.</li>
</ul>

<h2>Fixes</h2>
<h3>Aggregator</h3>
<ul>
<li>Removed dependency on boost.date_time.</li>
<li><a href=""http://dev.leechcraft.org/issues/261"">#261</a>: disable actions that are not needed if no item is selected.</li>
<li>Reset items model if corresponding channel has been deleted.</li>
</ul>

<h3>Azoth</h3>
<ul>
<li>Store outgoing private messages as well.</li>
<li><a href=""http://dev.leechcraft.org/issues/238"">#238</a>: don't allow joining a conference if it's already joined.</li>
<li><a href=""http://dev.leechcraft.org/issues/243"">#243</a>, <a href=""http://dev.leechcraft.org/issues/244"">#244</a>, <a href=""http://dev.leechcraft.org/issues/245"">#245</a>: fixed lots of smaller bugs with connections to MUCs.</li>
<li>Nicer calculation of message edit height in chat tabs.</li>
<li>Show proper self nick in chats.</li>
<li><a href=""http://dev.leechcraft.org/issues/249"">#249</a>: update account list in preferences when needed.</li>
<li>Fixed display of %1 in chats.</li>
<li>Smooth avatar scaling in contact list.</li>
<li>Cache scaled avatars: eat less CPU (or, at least, perform faster) when resizing/scrolling contact list.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Fixed ""Remove Bookmarks"" action triggered on tag category: remove all bookmarks with that tag instead of segfault.</li>
</ul>","<h2>New features</h2>
<h3>Core</h3>
<ul>
<li>Added <code>listview</code> item type to XSD.</li>
</ul>

<h3>Aggregator</h3>
<ul>
<li><a href=""http://dev.leechcraft.org/issues/260"">#260</a>: mark all as read or unread by tag category.</li>
</ul>

<h3>Azoth</h3>
This section features both Azoth and its plugins like Azoth Xoox.
<ul>
<li>Added feature to grant or deny authentication.</li>
<li>Request authentication when granting it to another contact.</li>
<li>Lots of small fixes in UI and representation.</li>
<li>Connect to MUCs that were joined while being offline.</li>
<li>Support showing VCards.</li>
<li><a href=""http://dev.leechcraft.org/issues/242"">#242</a>: support <code>/nick</code> command.</li>
<li>Support <code>/me</code> in chats.</li>
<li><a href=""http://dev.leechcraft.org/issues/241"">#241</a>: support changing roles and affiliations in MUCs.</li>
<li><a href=""http://dev.leechcraft.org/issues/240"">#240</a>: support kicking and banning.</li>
<li><a href=""http://dev.leechcraft.org/issues/236"">#236</a>: show MUC subject in tab instead of separate dialog.</li>
<li>Allow to change MUC subject.</li>
<li>Detect role/affiliation changes and notify about them.</li>
<li><a href=""http://dev.leechcraft.org/issues/185"">#185</a>: allow to add new contacts.</li>
<li><a href=""http://dev.leechcraft.org/issues/186"">#186</a>: support renaming items in contact list.</li>
<li><a href=""http://dev.leechcraft.org/issues/239"">#239</a>: support manipulation authentification from contact's context menu.</li>
<li><a href=""http://dev.leechcraft.org/issues/253"">#253</a>: allow to hide offline contacts.</li>
<li>Draw icon for state of the account.</li>
<li>Stubs for client version detection.</li>
<li>Nicer delegate, showing client icons.</li>
<li><a href=""http://dev.leechcraft.org/issues/187"">#187</a>: allow to remove items from contact list.</li>
<li><a href=""http://dev.leechcraft.org/issues/269"">#269</a>: support proxies, take the settings from the Core.</li>
<li><a href=""http://dev.leechcraft.org/issues/262"">#262</a>: nicer Change Status menu.</li>
</ul>

<h3>Poshuku</h3>
<h4>OnlineBookmarks</h4>
<ul>
<li><a href=""http://dev.leechcraft.org/issues/60"">#60</a>: added plugin for synchronizing bookmarks with various social bookmarks services like Read It Later.</li>
</ul>

<h3>Syncer</h3>
<ul>
<li>Use host, port, login and password from syncer settings.</li>
</ul>

<h2>Fixes</h2>
<h3>Aggregator</h3>
<ul>
<li>Removed dependency on boost.date_time.</li>
<li><a href=""http://dev.leechcraft.org/issues/261"">#261</a>: disable actions that are not needed if no item is selected.</li>
<li>Reset items model if corresponding channel has been deleted.</li>
</ul>

<h3>Azoth</h3>
<ul>
<li>Store outgoing private messages as well.</li>
<li><a href=""http://dev.leechcraft.org/issues/238"">#238</a>: don't allow joining a conference if it's already joined.</li>
<li><a href=""http://dev.leechcraft.org/issues/243"">#243</a>, <a href=""http://dev.leechcraft.org/issues/244"">#244</a>, <a href=""http://dev.leechcraft.org/issues/245"">#245</a>: fixed lots of smaller bugs with connections to MUCs.</li>
<li>Nicer calculation of message edit height in chat tabs.</li>
<li>Show proper self nick in chats.</li>
<li><a href=""http://dev.leechcraft.org/issues/249"">#249</a>: update account list in preferences when needed.</li>
<li>Fixed display of %1 in chats.</li>
<li>Smooth avatar scaling in contact list.</li>
<li>Cache scaled avatars: eat less CPU (or, at least, perform faster) when resizing/scrolling contact list.</li>
</ul>

<h3>Poshuku</h3>
<ul>
<li>Fixed ""Remove Bookmarks"" action triggered on tag category: remove all bookmarks with that tag instead of segfault.</li>
</ul>"
97,book,Kinotify,1296494287,,"",""
98,book,Theming Kinotify,1296497175,development-kinotify-theming,"Kinotify supports themes for the notifications.

<h2>File layout</h2>

A notification theme includes an HTML template file named <code>tmp.html</code> and optionally any other files you may need in the notification.

For Kinotify to detect your theme, create a directory in <code>~/.leechcraft/data/kinotify/themes/notification</code> with the desired name (it would be the name of your theme) and place at least the template file there. For a sample theme called, for example, Sample, that would be <code>~/.leechcraft/data/kinotify/themes/notification/Sample/tmp.html</code>.

<h2>Template contents</h2>

The templates are encouraged to support actions from the plugins. To support actions, insert a <code>form</code>tag where appropriate. Kinotify would append <code>input</code> elements with the <code>type=""button""</code> to the first found <code>form</code> element in your theme file.

Kinotify uses WebKit internally to render the notification, so feel free to use whatever decent versions of WebKit support in your HTML.

<h3>Supported placeholders</h3>

The template file will have the following fixed strings substituted accordingly:
<ul>
<li><code>{title}</code> — would be replaced with the actual title of the notification.</li>
<li><code>{body}</code> — would be replaced with the text of the notification.</li>
<li><code>{imagepath}</code> — would be replaced with either path to the icon representing the notification or the base64-encoded contents of the icon.</li>
</ul>

The theme may also have a subfolder named <code>img</code>, and for each file there matching the pattern <code>*.png</code> the <code>{basename}</code> string in the template would be substituted with the contents of the corresponding <code>basename.png</code> file in base64-scheme.

The theme may refer to the colors of the current palette using the <code>{ColorRole}</code> placeholder, which will be replaced with the RGB-string of the corresponding color, like <code>100, 0, 0</code> for somewhat red color. The <code>Role</code> may have the following values with the corresponding meaning:
<ul>
<li>Window</li>
<li>WindowText</li>
<li>Base</li>
<li>AlternateBase</li>
<li>ToolTipBase</li>
<li>ToolTipText</li>
<li>Text</li>
<li>Button</li>
<li>ButtonText</li>
<li>BrightText</li>
</ul>

<h2>Notes</h2>

<h3>Samples</h3>

Currently two predefined themes come with Kinotify: Commie and Adaptive, located at <code>src/plugins/kinotify/themes/notification/</code> in the source tree or in <code>/usr/share/leechcraft/kinotify/themes/notification</code> in installed LeechCraft.

<h3>Testing</h3>

Please note that <strong>you don't need to restart LeechCraft or reset the theme</strong> for the changes to take effect. Just do something that would produce notifications.","Kinotify supports themes for the notifications.

<h2>File layout</h2>

A notification theme includes an HTML template file named <code>tmp.html</code> and optionally any other files you may need in the notification.

For Kinotify to detect your theme, create a directory in <code>~/.leechcraft/data/kinotify/themes/notification</code> with the desired name (it would be the name of your theme) and place at least the template file there. For a sample theme called, for example, Sample, that would be <code>~/.leechcraft/data/kinotify/themes/notification/Sample/tmp.html</code>.

<h2>Template contents</h2>

The templates are encouraged to support actions from the plugins. To support actions, insert a <code>form</code>tag where appropriate. Kinotify would append <code>input</code> elements with the <code>type=""button""</code> to the first found <code>form</code> element in your theme file.

Kinotify uses WebKit internally to render the notification, so feel free to use whatever decent versions of WebKit support in your HTML.

<h3>Supported placeholders</h3>

The template file will have the following fixed strings substituted accordingly:
<ul>
<li><code>{title}</code> — would be replaced with the actual title of the notification.</li>
<li><code>{body}</code> — would be replaced with the text of the notification.</li>
<li><code>{imagepath}</code> — would be replaced with either path to the icon representing the notification or the base64-encoded contents of the icon.</li>
</ul>

The theme may also have a subfolder named <code>img</code>, and for each file there matching the pattern <code>*.png</code> the <code>{basename}</code> string in the template would be substituted with the contents of the corresponding <code>basename.png</code> file in base64-scheme.

The theme may refer to the colors of the current palette using the <code>{ColorRole}</code> placeholder, which will be replaced with the RGB-string of the corresponding color, like <code>100, 0, 0</code> for somewhat red color. The <code>Role</code> may have the following values with the corresponding meaning:
<ul>
<li>Window</li>
<li>WindowText</li>
<li>Base</li>
<li>AlternateBase</li>
<li>ToolTipBase</li>
<li>ToolTipText</li>
<li>Text</li>
<li>Button</li>
<li>ButtonText</li>
<li>BrightText</li>
</ul>

<h2>Notes</h2>

<h3>Samples</h3>

Currently two predefined themes come with Kinotify: Commie and Adaptive, located at <code>src/plugins/kinotify/themes/notification/</code> in the source tree or in <code>/usr/share/leechcraft/kinotify/themes/notification</code> in installed LeechCraft.

<h3>Testing</h3>

Please note that <strong>you don't need to restart LeechCraft or reset the theme</strong> for the changes to take effect. Just do something that would produce notifications."
99,book,Workflow,1328971294,development-workflow,"<h2>Workflow</h2>

There are three different approaches to the development workflow:

<dl>
<dt>Fork-tree</dt>
<dd>You fork the project by the means of GitHub. This is currently the best way to contribute to LeechCraft: you have your own repo, with your rules and whatever you like, and we just see one of your branches that we occasionally integrate with ours.</dd>
<dt>Separate git remote</dt>
<dd>You clone the main repo somewhere else and tell us where it is, thus basically becoming another remote besides main one. This is somewhat similar to the <em>fork-tree</em> approach.</dd>
<dt>Out-of-tree</dt>
<dd>You manage your files yourself. This is the longest way to get your changes into official distribution.</dd>
</dl>

You'd need a GitHub account for the first approach.

<h3>Fork-tree</h3>

It's the preferred way to contribute to LeechCraft.

You fork the <a href=""http://github.com/0xd34df00d/leechcraft"">project on GitHub</a> and do whatever you like to your fork. There is an excellent <a href=""http://help.github.com/fork-a-repo/"" target=""_blank"">guide</a> about forking on GitHub.

When you think you are ready to get something merged from your fork into upstream, you <a href=""http://help.github.com/send-pull-requests/"" target=""_blank"">send a pull request</a> to us. We review the changes, comment on some if there are any problems with logic/style/etc., you fix your code accordingly, and when the code is ready, we merge it into our codebase.

You would also need to occasionally merge changes from our repo to your fork. Please <strong>don't</strong> use the Fork Queue feature of GitHub for that. Instead, use the following command:
<code type=""bash"">
git pull git://github.com/0xd34df00d/leechcraft.git master</code>It would merge the changes from our <code>master</code> branch to the branch you are currently on.

<h3>Separate git remote</h3>

You clone main LeechCraft's git repo (at <a href=""git://github.com/0xd34df00d/leechcraft.git"">git://github.com/0xd34df00d/leechcraft.git</a>) and make it publically available. After that if you want your changes merged back in the master (and sure you do!) you just tell us when you've committed something to the repo. Or, better, you setup an RSS feed for your repo and tell us its address. That way, we would know about new commits automatically.

<h3>Out-of-tree</h3>

Well, since LeechCraft supports building plugins without keeping them in LeechCraft source tree, you can always use a separate repo (or even don't use any VCS at all). In this case you would likely need to contact us anyway to merge your changes to our codebase.

For that, you'd generally post an issue with ""Patch"" category to our <a href=""http://dev.leechcraft.org/projects/leechcraft/issues"">issue tracker</a>. We review it and either accept or decline (and close the issue in both cases) or tell you what should be improved. You improve it, update the issue for this patch, and the cycle repeats.

<h2>Notes</h2>

<h3>Translations</h3>

It would be great if you'd use git, since it's much easier to maintain the continiously changing files (and translations) in it. Nevertheless, if you don't like git or don't want it to use it for some reason, just ask us to generate the translation files for the required language, after that we send you those files and you send them back when finished. It's better to work in small chunks since the codebase, features and, consequently, translation files may change.","<h2>Workflow</h2>

There are three different approaches to the development workflow:

<dl>
<dt>Fork-tree</dt>
<dd>You fork the project by the means of GitHub. This is currently the best way to contribute to LeechCraft: you have your own repo, with your rules and whatever you like, and we just see one of your branches that we occasionally integrate with ours.</dd>
<dt>Separate git remote</dt>
<dd>You clone the main repo somewhere else and tell us where it is, thus basically becoming another remote besides main one. This is somewhat similar to the <em>fork-tree</em> approach.</dd>
<dt>Out-of-tree</dt>
<dd>You manage your files yourself. This is the longest way to get your changes into official distribution.</dd>
</dl>

You'd need a GitHub account for the first approach.

<h3>Fork-tree</h3>

It's the preferred way to contribute to LeechCraft.

You fork the <a href=""http://github.com/0xd34df00d/leechcraft"">project on GitHub</a> and do whatever you like to your fork. There is an excellent <a href=""http://help.github.com/fork-a-repo/"" target=""_blank"">guide</a> about forking on GitHub.

When you think you are ready to get something merged from your fork into upstream, you <a href=""http://help.github.com/send-pull-requests/"" target=""_blank"">send a pull request</a> to us. We review the changes, comment on some if there are any problems with logic/style/etc., you fix your code accordingly, and when the code is ready, we merge it into our codebase.

You would also need to occasionally merge changes from our repo to your fork. Please <strong>don't</strong> use the Fork Queue feature of GitHub for that. Instead, use the following command:
<code type=""bash"">
git pull git://github.com/0xd34df00d/leechcraft.git master</code>It would merge the changes from our <code>master</code> branch to the branch you are currently on.

<h3>Separate git remote</h3>

You clone main LeechCraft's git repo (at <a href=""git://github.com/0xd34df00d/leechcraft.git"">git://github.com/0xd34df00d/leechcraft.git</a>) and make it publically available. After that if you want your changes merged back in the master (and sure you do!) you just tell us when you've committed something to the repo. Or, better, you setup an RSS feed for your repo and tell us its address. That way, we would know about new commits automatically.

<h3>Out-of-tree</h3>

Well, since LeechCraft supports building plugins without keeping them in LeechCraft source tree, you can always use a separate repo (or even don't use any VCS at all). In this case you would likely need to contact us anyway to merge your changes to our codebase.

For that, you'd generally post an issue with ""Patch"" category to our <a href=""http://dev.leechcraft.org/projects/leechcraft/issues"">issue tracker</a>. We review it and either accept or decline (and close the issue in both cases) or tell you what should be improved. You improve it, update the issue for this patch, and the cycle repeats.

<h2>Notes</h2>

<h3>Translations</h3>

It would be great if you'd use git, since it's much easier to maintain the continiously changing files (and translations) in it. Nevertheless, if you don't like git or don't want it to use it for some reason, just ask us to generate the translation files for the required language, after that we send you those files and you send them back when finished. It's better to work in small chunks since the codebase, features and, consequently, translation files may change."
100,book,Having tabs in your plugin,1377039961,development-having-tabs-in-your-plugin,"Plugins that can have tabs should implement the <a href=""http://doc.leechcraft.org/core/class_i_have_tabs.html"" target=""_blank"">IHaveTabs</a> interface.

<h2>Tab classes concept</h2>

Each plugin can have one ore more tabs opened at the same time, and different tabs belonging to the same plugin could have different semantics and meaning. For example, a single IM plugin can provide two kinds of tabs: chat tab and service discovery tab. The different kinds of tabs in LeechCraft are called tab classes.

Tabs of different classes can have different semantics. For example, tabs of one class could be opened by the user, while another tabs can only be opened (spontaneously) by the plugin, while there could be only one tab of a third class.

Different tab classes may have different priorities. Priority defines what tab should be opened when user requests to open a new tab without specifying the exact tab class he wants. When user requests a new tab, but doesn't specify its type (for example, just hits Ctrl+T), priorities of two tab classes are compared: the priority of the class of the current tab and the highest priority among all the tabs. If current priority plus some delta is higher than maximum one, a new instance of current tab class is opened, otherwise the tab with the highest priority is opened. For example, if web browser tab has priority of 80, text editor — 70 and search plugin — 60, and delta is 15, then if current tab is web browser or search plugin, the new tab will be a web browser tab (since 60 + 15 < 80), but if the current tab is text editor's one, then the new tab will also be a text editor (70 + 15 > 80).

The tab classes are described by the <a href=""http://doc.leechcraft.org/core/struct_leech_craft_1_1_tab_class_info.html"">TabClassInfo</a> structure.

<h2>IHaveTabs methods</h2>

The list of available tab classes should be returned from the <code>IHaveTabs::GetTabClasses ()</code> method. This method should return a list of <code>LeechCraft::TabClassInfo</code> structs.

When a tab has been requested by the user, the <code>IHaveTabs::TabOpenRequested (const QByteArray&)</code> method would be called, passing the ID of the corresponding tab class, which is the one of the IDs returned from <code>IHaveTabs::GetTabClasses ()</code> (the <code>LeechCraft::TabClassInfo::TabClass_</code> member).

There is also a bunch of signals that should be present in classes implementing the <code>IHaveTabs</code> interface:

<ul>
<li><code>addNewTab(const QString& name, QWidget *widget)</code> adds a new tab containing <code>widget</code> and initially having </code>name</code> as the tab name.</li>
<li><code>removeTab(QWidget *widget)</code> removes previously added tab with <code>widget</code>.</li>
<li><code>changeTabName (QWidget *widget, const QString& newName)</code> changes the tab's name to <code>newName</code>, where <code>widget</code> is the tab's widget.</li>
<li><code>changeTabIcon (QWidget *widget, const QIcon& icon)</code> same as the above, but changes the tab's icon.</li>
<li><code>statusBarChanged (QWidget *widget, const QString& newText)</code> notifies LeechCraft the the status message for this tab has been changed to <code>newText</code>.</li>
<li><code>raiseTab (QWidget *widget)</code> brings the tab with <code>widget</code> to the front.</li>
</ul>

The <code>widget</code> added by the <code>addNewTab</code> must implement <code>ITabWidget</code>.

The <code>widget</code> parameter of the last five signals should be the widget previously added by the <code>addNewTab</code> signal.

<h2>ITabWidget</h2>

Widgets added by <code>IHaveTabs</code> should implement <code>ITabWidget</code> interface (documented <a href=""http://doc.leechcraft.org/core/class_i_tab_widget.html"" target=""_blank"">here</a>). This interface has following functions:

<ul>
<li><code>GetTabClassInfo ()</code> should return the tab class of this tab. The tab class should be equal to the one returned from <code>IHaveTabs::GetTabClasses ()</code> with the same tab class ID.</li>
<li><code>ParentMultiTabs ()</code> should return the parent object which implements the <code>IHaveTabs</code> interface and manages this tab (that is, the instance object).
<li><code>Remove()</code> is called by LeechCraft when user requests the given tab to close, for example, by triggering the Close action or pressing the ""X"" button on the tab.</li>
<li><code>GetToolBar ()</code> should return the toolbar associated with this tab (or <code>NULL</code> if there is no toolbar). The toolbar is only visible when the tab is active.</li>
<li><code>GetTabBarContextMenuAction ()</code> returns the list of actions which would appear in the context menu of this tab. The default implementation returns an empty list.</li>
<li><code>GetWindowMenus ()</code> returns a map of lists of actions to be inserted to the global menu. Refer to its documentation for more information.</li>
<li><code>TabMadeCurrent ()</code> is called by LeechCraft to notify the tab that it is made current by the user. The default implementation does nothing.</li>
</ul>

<h2>Logical paths and tabs grouping</h2>

To group tabs, logical paths are used. That way Tab++, for example, groups the tabs from Poshuku belonging to the same domain. To use logical paths, just set the <code>WidgetLogicalPath</code> property on your tab widgets to a <code>QString</code> containing slash-separated hierarchical tree-like structure and update it as necessary. LeechCraft would take care of the rest. For example:
<pre><code>
widget->setProperty (""WidgetLogicalPath"", ""somedomain.com/Sample Web Page Title"");
</code></pre>","Plugins that can have tabs should implement the <a href=""http://doc.leechcraft.org/core/class_i_have_tabs.html"" target=""_blank"">IHaveTabs</a> interface.

<h2>Tab classes concept</h2>

Each plugin can have one ore more tabs opened at the same time, and different tabs belonging to the same plugin could have different semantics and meaning. For example, a single IM plugin can provide two kinds of tabs: chat tab and service discovery tab. The different kinds of tabs in LeechCraft are called tab classes.

Tabs of different classes can have different semantics. For example, tabs of one class could be opened by the user, while another tabs can only be opened (spontaneously) by the plugin, while there could be only one tab of a third class.

Different tab classes may have different priorities. Priority defines what tab should be opened when user requests to open a new tab without specifying the exact tab class he wants. When user requests a new tab, but doesn't specify its type (for example, just hits Ctrl+T), priorities of two tab classes are compared: the priority of the class of the current tab and the highest priority among all the tabs. If current priority plus some delta is higher than maximum one, a new instance of current tab class is opened, otherwise the tab with the highest priority is opened. For example, if web browser tab has priority of 80, text editor — 70 and search plugin — 60, and delta is 15, then if current tab is web browser or search plugin, the new tab will be a web browser tab (since 60 + 15 < 80), but if the current tab is text editor's one, then the new tab will also be a text editor (70 + 15 > 80).

The tab classes are described by the <a href=""http://doc.leechcraft.org/core/struct_leech_craft_1_1_tab_class_info.html"">TabClassInfo</a> structure.

<h2>IHaveTabs methods</h2>

The list of available tab classes should be returned from the <code>IHaveTabs::GetTabClasses ()</code> method. This method should return a list of <code>LeechCraft::TabClassInfo</code> structs.

When a tab has been requested by the user, the <code>IHaveTabs::TabOpenRequested (const QByteArray&)</code> method would be called, passing the ID of the corresponding tab class, which is the one of the IDs returned from <code>IHaveTabs::GetTabClasses ()</code> (the <code>LeechCraft::TabClassInfo::TabClass_</code> member).

There is also a bunch of signals that should be present in classes implementing the <code>IHaveTabs</code> interface:

<ul>
<li><code>addNewTab(const QString& name, QWidget *widget)</code> adds a new tab containing <code>widget</code> and initially having </code>name</code> as the tab name.</li>
<li><code>removeTab(QWidget *widget)</code> removes previously added tab with <code>widget</code>.</li>
<li><code>changeTabName (QWidget *widget, const QString& newName)</code> changes the tab's name to <code>newName</code>, where <code>widget</code> is the tab's widget.</li>
<li><code>changeTabIcon (QWidget *widget, const QIcon& icon)</code> same as the above, but changes the tab's icon.</li>
<li><code>statusBarChanged (QWidget *widget, const QString& newText)</code> notifies LeechCraft the the status message for this tab has been changed to <code>newText</code>.</li>
<li><code>raiseTab (QWidget *widget)</code> brings the tab with <code>widget</code> to the front.</li>
</ul>

The <code>widget</code> added by the <code>addNewTab</code> must implement <code>ITabWidget</code>.

The <code>widget</code> parameter of the last five signals should be the widget previously added by the <code>addNewTab</code> signal.

<h2>ITabWidget</h2>

Widgets added by <code>IHaveTabs</code> should implement <code>ITabWidget</code> interface (documented <a href=""http://doc.leechcraft.org/core/class_i_tab_widget.html"" target=""_blank"">here</a>). This interface has following functions:

<ul>
<li><code>GetTabClassInfo ()</code> should return the tab class of this tab. The tab class should be equal to the one returned from <code>IHaveTabs::GetTabClasses ()</code> with the same tab class ID.</li>
<li><code>ParentMultiTabs ()</code> should return the parent object which implements the <code>IHaveTabs</code> interface and manages this tab (that is, the instance object).
<li><code>Remove()</code> is called by LeechCraft when user requests the given tab to close, for example, by triggering the Close action or pressing the ""X"" button on the tab.</li>
<li><code>GetToolBar ()</code> should return the toolbar associated with this tab (or <code>NULL</code> if there is no toolbar). The toolbar is only visible when the tab is active.</li>
<li><code>GetTabBarContextMenuAction ()</code> returns the list of actions which would appear in the context menu of this tab. The default implementation returns an empty list.</li>
<li><code>GetWindowMenus ()</code> returns a map of lists of actions to be inserted to the global menu. Refer to its documentation for more information.</li>
<li><code>TabMadeCurrent ()</code> is called by LeechCraft to notify the tab that it is made current by the user. The default implementation does nothing.</li>
</ul>

<h2>Logical paths and tabs grouping</h2>

To group tabs, logical paths are used. That way Tab++, for example, groups the tabs from Poshuku belonging to the same domain. To use logical paths, just set the <code>WidgetLogicalPath</code> property on your tab widgets to a <code>QString</code> containing slash-separated hierarchical tree-like structure and update it as necessary. LeechCraft would take care of the rest. For example:
<pre><code>
widget->setProperty (""WidgetLogicalPath"", ""somedomain.com/Sample Web Page Title"");
</code></pre>"
101,book,Azoth,1310086135,development-azoth,"This section describes extending and styling Azoth, the modular IM for LeechCraft.

You may find information regarding implementing support for loading different types of smile packs and chat window styles in [104: Writing resource plugins for Azoth] article, while the rest of articles is pretty obvious-titled.

Please note that Doxygen-generated documentation of Azoth API and interfaces is available <a href=""http://doc.leechcraft.org/azoth/"" target=""_blank"">here</a>.","This section describes extending and styling Azoth, the modular IM for LeechCraft.

You may find information regarding implementing support for loading different types of smile packs and chat window styles in [104: Writing resource plugins for Azoth] article, while the rest of articles is pretty obvious-titled.

Please note that Doxygen-generated documentation of Azoth API and interfaces is available <a href=""http://doc.leechcraft.org/azoth/"" target=""_blank"">here</a>."
102,book,General information about Azoth plugins,1297478303,development-azoth-general,"Azoth has several types of plugins. They can provide support for different protocols, allow Azoth to load various resources (like smile packs or chat window styles) or just hook into Azoth core and other plugins.

So, there are currently three types of plugins for Azoth: protocol plugins, resource source plugins and general plugins for everything that isn't related to the specific types.

Since all these plugins are second-level plugins for Azoth (please refer to [105: Plugins for plugins] page if you are not familiar with the concept), they should implement the <code>IPlugin2</code> to be recognized as such, and should have the following classes in the set returned from <code>IPlugin2::GetPluginClasses()</code>:
<ul>
<li><code>""org.LeechCraft.Plugins.Azoth.Plugins.IGeneralPlugin""</code> for general type plugins</li>
<li><code>""org.LeechCraft.Plugins.Azoth.Plugins.IProtocolPlugin""</code> for for protocol plugins</li>
<li><code>""org.LeechCraft.Plugins.Azoth.Plugins.IResourceSourcePlugin""</code> for plugins that allow loading additional resources</li>
</ul>

Of course, one plugin could be of several types, in this case it should implement all the required interfaces and return all the corresponding plugin classes.","Azoth has several types of plugins. They can provide support for different protocols, allow Azoth to load various resources (like smile packs or chat window styles) or just hook into Azoth core and other plugins.

So, there are currently three types of plugins for Azoth: protocol plugins, resource source plugins and general plugins for everything that isn't related to the specific types.

Since all these plugins are second-level plugins for Azoth (please refer to [105: Plugins for plugins] page if you are not familiar with the concept), they should implement the <code>IPlugin2</code> to be recognized as such, and should have the following classes in the set returned from <code>IPlugin2::GetPluginClasses()</code>:
<ul>
<li><code>""org.LeechCraft.Plugins.Azoth.Plugins.IGeneralPlugin""</code> for general type plugins</li>
<li><code>""org.LeechCraft.Plugins.Azoth.Plugins.IProtocolPlugin""</code> for for protocol plugins</li>
<li><code>""org.LeechCraft.Plugins.Azoth.Plugins.IResourceSourcePlugin""</code> for plugins that allow loading additional resources</li>
</ul>

Of course, one plugin could be of several types, in this case it should implement all the required interfaces and return all the corresponding plugin classes."
103,book,Writing protocol plugins for Azoth,1297483796,development-azoth-protocol-plugins,"This document tries to overview basic ideas regarding implementing protocol plugins in Azoth. Please refer to the doxygen-style documentation in <code type=""bash"">src/plugins/azoth/interfaces/*.h</code> for more information.

<h2>Introduction</h2>

Protocol plugins add support for various protocols to Azoth. Since this involves the plugins for plugins concept of LeechCraft, please refer to the [105: corresponding document] if you are unfamiliar with it.

Since protocol plugins are second-level plugins, they should at least implement <code>IInfo</code> and <code>IPlugin2</code>. For Azoth to detect them as a protocol plugin, the return value of the <code>IPlugin2::GetPluginClasses()</code> method should contain the <code>""org.LeechCraft.Plugins.Azoth.Plugins.IProtocolPlugin""</code> class, and they also need to implement the <code>IProtocolPlugin</code> interface.

The basic picture is the following: <code>IProtocolPlugin</code> provides different <code>IProtocol</code>s, each <code>IProtocol</code> has some <code>IAccount</code>s representing, well, user's accounts, and then each <code>IAccount</code> has several <code>ICLEntry</code> objects, that represent permament contacts, MUCs (see <code>IMUCEntry</code> interface for MUCs), private chats, unauthorized users, and other similar things. The <code>ICLEntry</code> objects are differed by their unique ID (<code>ICLEntry::GetEntryID()</code>), which is basically used in all operations regarding the entries.

<h2>IProtocolPlugin</h2>

<code>IProtocolPlugin</code> returns the list of protocols via its <code>IProtocolPlugin::GetProtocols()</code> method. Each object in the returned list should implement the <code>IProtocol</code> interface.

The protocols list provided by a <code>IProtocolPlugin</code> is static and can't be changed at runtime after the list of protocols has been requested from the plugin, but it can change between LeechCraft runs.

<h2>IProtocol</h2>

<code>IProtocol</code> is the interface that all protocols should implement.

First of all, it declares some features that may or may not be supported by a protocol, see the <code>IProtocol::GetFeatures()</code> method. For each supported feature Azoth would automatically create the needed trigger actions.

A <code>IProtocol</code> also manages accounts that belong to this protocol. When user wants to add a new account in this protocol, the <code>IProtocol::InitiateAccountRegistration()</code> would be called. When removal is requested, the <code>IProtocol::RemoveAccount()</code> would be called. In both cases, as well as account is added or removed because of some other reason, the <code>IProtocol::accountAdded()</code> and <code>IProtocol::accountRemoved()</code> signals should be emitted.

The list of currently registered accounts is retrieved via the <code>IProtocol::GetRegisteredAccounts()</code> method. Each object in the returned list should implement <code>IAccount</code> interface.

<h3>MUC support from the protocol part</h3>

To allow user to join multiuser chats in your plugin, you just need to:
<ul>
<li>Declate that MUCs are supported at all in this protocol by returning the <code>PFSupportsMUCs</code> from <code>IProtocol::GetFeatures()</code>.
<li>Declare that MUCs can be joined by user's wish by returning the <code>PFMUCsJoinable</code> from <code>IProtocol::GetFeatures()</code>.
<li>Return a widget implementing <code>IMUCJoinWidget</code> from the <code>IProtocol::GetMUCJoinWidget()</code> which would be used to join the MUCs.</code>
</ul>

<h2>IAccount</h2>

<code>IAccount</code> represents a single account. It also defines a set of features (see <code>IAccount::AccountFeature</code> enum) and provides various methods for manipulating the contact list entries present in this account. Each object in the related methods should implement <code>ICLEntry</code>, of course.

An up-to-date list of contact list entries should be returned from <code>IAccount::GetCLEntries()</code> method. Authorization/subscription manipulation is done via <code>Authorize()</code> and <code>DenyAuth()</code> methods, and new items could be added via the <code>RequestAuth()</code>. Entries are removed from the contact list via the <code>RemoveEntry()</code> method. Whenever the list of entries changes for any reason, the <code>gotCLItems()</code> or <code>removedCLItems()</code> signals should be emitted. Signals <code>authorizationRequested()</code>, <code>itemSubscribed()</code>, <code>itemUnsubscribed()</code>, <code>itemCancelledSubscription()</code> and <code>itemGrantedSubscription()</code> should be emitted when corresponding subscription events are detected.

If the account supports file transfers, it should return the <code>FMUCsSupportFileTransfers</code> flag from the <code>IAccount::GetAccountFeatures()</code> and return a proper transfer manager object, which should implement <code>ITransferManager</code> interface, from the <code>GetTransferManager()</code> method.

<h2>ICLEntry</h2>

<code>ICLEntry</code> is the basic interface for everything that may appear in the contact list — be it a persistent contact in Jabber roster, a multiuser conference, an unauthorized user, or anything. Whenever the entry changes, either as the result of our actions or as a result of roster push in XMPP, for example, the corresponding signals should be emitted: <code>nameChanged()</code>, <code>groupsChanged()</code>, <code>avatarChanged()</code>, depending on what has changed.

<h3>Types</h3>

There are several types of entries:
<ul>
<li><code>ETChat</code> for usual chats between two contacts.</li>
<li><code>ETMUC</code> for multi-user chatrooms, in this case the entry should also implement <code>IMUCEntry</code> interface (see the end of this section).</li>
<li><code>ETPrivateChat</code> for private chats between two participants of a MUC.</li>
<li><code>ETUnauthEntry</code> for representing entries that have requested authorization but haven't been denied or granted yet.</li>
</ul>

<h3>Entry IDs</h3>

Entries are identified by their ID string returned by <code>ICLEntry::GetEntryID()</code>, unique to the account. Generally a protocol-defined string (Jabber ID for XMPP, UIN for ICQ, and such) will do just fine. If there are multiple representations of a single remote contact in the contact list, they should all have a different ID string. For example, it's a good idea to append something like <code>""_unauth""</code> to entries representing unauthorized ones.

Entries also have human-readable ID, which most likely would be just the protocol-defined identification string. It's ok to have several different entries in the contact list with the same human-readable ID, as long as they represent the same remote contact.

Another difference is that human-readable ID should be really human-readable, and IDs in such format the user is most likely to enter in various dialogs like user search or user addition.

<h3>Features</h3>

The entry advertises its features via <code>ICLEntry::GetEntryFeatures()</code> method.

The entry may be permanent (<code>FPermanentEntry</code>) or session-wide (<code>FSessionEntry</code>). For example, a contact stored on the server is a permament entry, while an <code>ICLEntry</code> representing a multiuser chatroom and participans in that chat room is a session-wide entry.

If the entry can be renamed and saved in the contact list under another name, it should return the <code>FSupportsRenames</code> flag and perform the renames in <code>SetEntryName()</code> method.

<h3>Authentication</h3>

If the entry supports authentication manipulation (for example, an entry representing a MUC most likely <em>won't</em> support it), it should return <code>FSupportsAuth</code> flag from <code>GetEntryFeatures()</code> and also implement <code>IAuthable</code> interface, and that interface is pretty obvious.

<h3>Variants (resources) support</h3>

In several protocols, like XMPP, entry may have different target variants, or resources. This is reflected by the <code>Variants()</code> method that should return the currently available variants, in descending order of precedence. If variants concept isn't supported by the protocol, a list of single (null) string should be returned. When the list of variants changes, the <code>availableVariantsChanged()</code> signal should be emitted.

<h3>Messages</h3>

To create a message, the <code>CreateMessage()</code> method is used. The returned object should implement the <code>IMessage</code> interface and should <em>not</em> be sent automatically. Instead, <code>IMessage::Send()</code> is used to send the message at the appropriate moment. If the protocol supports variants, the message should be directed to variant passed to the method, or to the variant with the highest priority if the passed one is currently unavailable.

When a new message is received, the <code>gotMessage()</code> signal should be emitted. All sent and received messages should be stored and later accessed via the <code>GetAllMessages()</code> method. The only exception is for MUC entries, since they are expected to have each sent out message to come back from the server (this behavior is modelled after the XMPP protocol).

<h3>Chat participation</h3>

For protocols and entries that support chat participation state notifications, the signal <code>chatPartStateChanged()</code> should be used accordingly.

<h3>Entry/client information</h3>

The <code>ShowInfo()</code> method is called when user asks to show the information about the entry. The method should show the dialog with the information about this entry.

The <code>GetClientInfo()</code> method is used to obtain information about client's software and features. It returns a <code>QMap</code> with the following expected fields:
<ul>
<li><code>""client_type""</code> with the ID of the client software, like <code>""psi""</code> for the Psi IM.</li>
<li><code>""client_name""</code> with the human-readable name of the client software.</li>
<li><code>""client_version""</code> with the version string of the client.</li>
</ul>

<h3>IMUCEntry</h3>

The <code>IMUCEntry</code> interface is for entries that represent multi-user chatrooms. It advertises MUC-specific features via <code>GetMUCFeatures()</code>. MUC subject may be got or changed via <code>GetMUCSubject()</code> and <code>SetMUCSubject()</code>. Current participants may be obtained via the <code>GetParticipatns()</code>, which should return a list of objects implementing <code>ICLEntry</code>, and user's nick may be got or changed via <code>GetNick()</code> and <code>SetNick()</code>. One leaves the room by calling the <code>Leave()</code> method.

It also provides means for changing user's roles and affiliations: <code>MayChangeRole()</code> and <code>MayChangeAffiliation()</code> are used to query whether our user may change the role and affiliation of another participant to the target value, while <code>GetRole()</code>, <code>GetAffiliation()</code>, <code>SetRole()</code> and <code>SetAffiliation()</code> are used to get and set roles and affiliations. Kicking is done by setting the role to <code>MUCRNone</code>, while banning is done via <code>MUCAOutcast</code> affiliation.

<h2>IMessage</h2>

The <code>IMessage</code> interface should be implemented by objects representing messages of different kinds: chat messages, MUC messages, statuses, etc.

The message should only be sent out as the result of <code>Send()</code> call.

<h3>Message types and subtypes</h3>

There are five types of messages:
<ul>
<li><code>MTChatMessage</code> for standard one-to-one chat sessions, be it a usual session or a private chat in a MUC.</li>
<li><code>MTMUCMessage</code> for public messages in MUCs.</li>
<li><code>MTStatusMessage</code> for messages representing participant's status/presence changes.</li>
<li><code>MTEventMessage</code> for notifying about events like subject changes in MUCs, kicks, bans and such.</li>
<li><code>MTServiceMessage</code> for other stuff.</li>
</ul>

There is a more precise classification of message types, please refer to the <code>MessageSubType</code> enum for that.

<h3>Relevant entries</h3>

There are basically to entries connected to each message: <em>other entry</em> and <em>parent entry</em>. The difference only appears for public messages in MUCs, since for one-to-one chats both entries are equal and represent the real other entry. For MUCs, <em>other entry</em> is the representation of the participant that sent the message, while <em>parent entry</em> is the MUC entry. <code>OtherPart()</code> and <code>ParentCLEntry()</code> are used respectively to obtain the corresponding entries.

<h2>ITransferManager</h2>

<code>ITransferManager</code> is used for entries that support file transfers (and if account supports that, of course).

To initiate file transfer, the <code>SendFile()</code> method is used, which takes the entry ID, variant and the file name. If the variant is unavailable, or the protocol doesn't support variants, the variant with the highest priority should be used. <code>SendFile()</code> returns an object that implements <code>ITransferJob</code> which may be later used to watch the progress of the file transfer.

Object implementing <code>ITransferJob</code> is also emitted with the <code>fileOffered()</code> signal to signalize incoming file transfer request. To accept the request, <code>ITransferJob::Accept()</code> code with the string parameter representing path to the output directory. To deny the request, or to abort an already started one, <code>ITransferJob::Reject()</code> is used.","This document tries to overview basic ideas regarding implementing protocol plugins in Azoth. Please refer to the doxygen-style documentation in <code type=""bash"">src/plugins/azoth/interfaces/*.h</code> for more information.

<h2>Introduction</h2>

Protocol plugins add support for various protocols to Azoth. Since this involves the plugins for plugins concept of LeechCraft, please refer to the [105: corresponding document] if you are unfamiliar with it.

Since protocol plugins are second-level plugins, they should at least implement <code>IInfo</code> and <code>IPlugin2</code>. For Azoth to detect them as a protocol plugin, the return value of the <code>IPlugin2::GetPluginClasses()</code> method should contain the <code>""org.LeechCraft.Plugins.Azoth.Plugins.IProtocolPlugin""</code> class, and they also need to implement the <code>IProtocolPlugin</code> interface.

The basic picture is the following: <code>IProtocolPlugin</code> provides different <code>IProtocol</code>s, each <code>IProtocol</code> has some <code>IAccount</code>s representing, well, user's accounts, and then each <code>IAccount</code> has several <code>ICLEntry</code> objects, that represent permament contacts, MUCs (see <code>IMUCEntry</code> interface for MUCs), private chats, unauthorized users, and other similar things. The <code>ICLEntry</code> objects are differed by their unique ID (<code>ICLEntry::GetEntryID()</code>), which is basically used in all operations regarding the entries.

<h2>IProtocolPlugin</h2>

<code>IProtocolPlugin</code> returns the list of protocols via its <code>IProtocolPlugin::GetProtocols()</code> method. Each object in the returned list should implement the <code>IProtocol</code> interface.

The protocols list provided by a <code>IProtocolPlugin</code> is static and can't be changed at runtime after the list of protocols has been requested from the plugin, but it can change between LeechCraft runs.

<h2>IProtocol</h2>

<code>IProtocol</code> is the interface that all protocols should implement.

First of all, it declares some features that may or may not be supported by a protocol, see the <code>IProtocol::GetFeatures()</code> method. For each supported feature Azoth would automatically create the needed trigger actions.

A <code>IProtocol</code> also manages accounts that belong to this protocol. When user wants to add a new account in this protocol, the <code>IProtocol::InitiateAccountRegistration()</code> would be called. When removal is requested, the <code>IProtocol::RemoveAccount()</code> would be called. In both cases, as well as account is added or removed because of some other reason, the <code>IProtocol::accountAdded()</code> and <code>IProtocol::accountRemoved()</code> signals should be emitted.

The list of currently registered accounts is retrieved via the <code>IProtocol::GetRegisteredAccounts()</code> method. Each object in the returned list should implement <code>IAccount</code> interface.

<h3>MUC support from the protocol part</h3>

To allow user to join multiuser chats in your plugin, you just need to:
<ul>
<li>Declate that MUCs are supported at all in this protocol by returning the <code>PFSupportsMUCs</code> from <code>IProtocol::GetFeatures()</code>.
<li>Declare that MUCs can be joined by user's wish by returning the <code>PFMUCsJoinable</code> from <code>IProtocol::GetFeatures()</code>.
<li>Return a widget implementing <code>IMUCJoinWidget</code> from the <code>IProtocol::GetMUCJoinWidget()</code> which would be used to join the MUCs.</code>
</ul>

<h2>IAccount</h2>

<code>IAccount</code> represents a single account. It also defines a set of features (see <code>IAccount::AccountFeature</code> enum) and provides various methods for manipulating the contact list entries present in this account. Each object in the related methods should implement <code>ICLEntry</code>, of course.

An up-to-date list of contact list entries should be returned from <code>IAccount::GetCLEntries()</code> method. Authorization/subscription manipulation is done via <code>Authorize()</code> and <code>DenyAuth()</code> methods, and new items could be added via the <code>RequestAuth()</code>. Entries are removed from the contact list via the <code>RemoveEntry()</code> method. Whenever the list of entries changes for any reason, the <code>gotCLItems()</code> or <code>removedCLItems()</code> signals should be emitted. Signals <code>authorizationRequested()</code>, <code>itemSubscribed()</code>, <code>itemUnsubscribed()</code>, <code>itemCancelledSubscription()</code> and <code>itemGrantedSubscription()</code> should be emitted when corresponding subscription events are detected.

If the account supports file transfers, it should return the <code>FMUCsSupportFileTransfers</code> flag from the <code>IAccount::GetAccountFeatures()</code> and return a proper transfer manager object, which should implement <code>ITransferManager</code> interface, from the <code>GetTransferManager()</code> method.

<h2>ICLEntry</h2>

<code>ICLEntry</code> is the basic interface for everything that may appear in the contact list — be it a persistent contact in Jabber roster, a multiuser conference, an unauthorized user, or anything. Whenever the entry changes, either as the result of our actions or as a result of roster push in XMPP, for example, the corresponding signals should be emitted: <code>nameChanged()</code>, <code>groupsChanged()</code>, <code>avatarChanged()</code>, depending on what has changed.

<h3>Types</h3>

There are several types of entries:
<ul>
<li><code>ETChat</code> for usual chats between two contacts.</li>
<li><code>ETMUC</code> for multi-user chatrooms, in this case the entry should also implement <code>IMUCEntry</code> interface (see the end of this section).</li>
<li><code>ETPrivateChat</code> for private chats between two participants of a MUC.</li>
<li><code>ETUnauthEntry</code> for representing entries that have requested authorization but haven't been denied or granted yet.</li>
</ul>

<h3>Entry IDs</h3>

Entries are identified by their ID string returned by <code>ICLEntry::GetEntryID()</code>, unique to the account. Generally a protocol-defined string (Jabber ID for XMPP, UIN for ICQ, and such) will do just fine. If there are multiple representations of a single remote contact in the contact list, they should all have a different ID string. For example, it's a good idea to append something like <code>""_unauth""</code> to entries representing unauthorized ones.

Entries also have human-readable ID, which most likely would be just the protocol-defined identification string. It's ok to have several different entries in the contact list with the same human-readable ID, as long as they represent the same remote contact.

Another difference is that human-readable ID should be really human-readable, and IDs in such format the user is most likely to enter in various dialogs like user search or user addition.

<h3>Features</h3>

The entry advertises its features via <code>ICLEntry::GetEntryFeatures()</code> method.

The entry may be permanent (<code>FPermanentEntry</code>) or session-wide (<code>FSessionEntry</code>). For example, a contact stored on the server is a permament entry, while an <code>ICLEntry</code> representing a multiuser chatroom and participans in that chat room is a session-wide entry.

If the entry can be renamed and saved in the contact list under another name, it should return the <code>FSupportsRenames</code> flag and perform the renames in <code>SetEntryName()</code> method.

<h3>Authentication</h3>

If the entry supports authentication manipulation (for example, an entry representing a MUC most likely <em>won't</em> support it), it should return <code>FSupportsAuth</code> flag from <code>GetEntryFeatures()</code> and also implement <code>IAuthable</code> interface, and that interface is pretty obvious.

<h3>Variants (resources) support</h3>

In several protocols, like XMPP, entry may have different target variants, or resources. This is reflected by the <code>Variants()</code> method that should return the currently available variants, in descending order of precedence. If variants concept isn't supported by the protocol, a list of single (null) string should be returned. When the list of variants changes, the <code>availableVariantsChanged()</code> signal should be emitted.

<h3>Messages</h3>

To create a message, the <code>CreateMessage()</code> method is used. The returned object should implement the <code>IMessage</code> interface and should <em>not</em> be sent automatically. Instead, <code>IMessage::Send()</code> is used to send the message at the appropriate moment. If the protocol supports variants, the message should be directed to variant passed to the method, or to the variant with the highest priority if the passed one is currently unavailable.

When a new message is received, the <code>gotMessage()</code> signal should be emitted. All sent and received messages should be stored and later accessed via the <code>GetAllMessages()</code> method. The only exception is for MUC entries, since they are expected to have each sent out message to come back from the server (this behavior is modelled after the XMPP protocol).

<h3>Chat participation</h3>

For protocols and entries that support chat participation state notifications, the signal <code>chatPartStateChanged()</code> should be used accordingly.

<h3>Entry/client information</h3>

The <code>ShowInfo()</code> method is called when user asks to show the information about the entry. The method should show the dialog with the information about this entry.

The <code>GetClientInfo()</code> method is used to obtain information about client's software and features. It returns a <code>QMap</code> with the following expected fields:
<ul>
<li><code>""client_type""</code> with the ID of the client software, like <code>""psi""</code> for the Psi IM.</li>
<li><code>""client_name""</code> with the human-readable name of the client software.</li>
<li><code>""client_version""</code> with the version string of the client.</li>
</ul>

<h3>IMUCEntry</h3>

The <code>IMUCEntry</code> interface is for entries that represent multi-user chatrooms. It advertises MUC-specific features via <code>GetMUCFeatures()</code>. MUC subject may be got or changed via <code>GetMUCSubject()</code> and <code>SetMUCSubject()</code>. Current participants may be obtained via the <code>GetParticipatns()</code>, which should return a list of objects implementing <code>ICLEntry</code>, and user's nick may be got or changed via <code>GetNick()</code> and <code>SetNick()</code>. One leaves the room by calling the <code>Leave()</code> method.

It also provides means for changing user's roles and affiliations: <code>MayChangeRole()</code> and <code>MayChangeAffiliation()</code> are used to query whether our user may change the role and affiliation of another participant to the target value, while <code>GetRole()</code>, <code>GetAffiliation()</code>, <code>SetRole()</code> and <code>SetAffiliation()</code> are used to get and set roles and affiliations. Kicking is done by setting the role to <code>MUCRNone</code>, while banning is done via <code>MUCAOutcast</code> affiliation.

<h2>IMessage</h2>

The <code>IMessage</code> interface should be implemented by objects representing messages of different kinds: chat messages, MUC messages, statuses, etc.

The message should only be sent out as the result of <code>Send()</code> call.

<h3>Message types and subtypes</h3>

There are five types of messages:
<ul>
<li><code>MTChatMessage</code> for standard one-to-one chat sessions, be it a usual session or a private chat in a MUC.</li>
<li><code>MTMUCMessage</code> for public messages in MUCs.</li>
<li><code>MTStatusMessage</code> for messages representing participant's status/presence changes.</li>
<li><code>MTEventMessage</code> for notifying about events like subject changes in MUCs, kicks, bans and such.</li>
<li><code>MTServiceMessage</code> for other stuff.</li>
</ul>

There is a more precise classification of message types, please refer to the <code>MessageSubType</code> enum for that.

<h3>Relevant entries</h3>

There are basically to entries connected to each message: <em>other entry</em> and <em>parent entry</em>. The difference only appears for public messages in MUCs, since for one-to-one chats both entries are equal and represent the real other entry. For MUCs, <em>other entry</em> is the representation of the participant that sent the message, while <em>parent entry</em> is the MUC entry. <code>OtherPart()</code> and <code>ParentCLEntry()</code> are used respectively to obtain the corresponding entries.

<h2>ITransferManager</h2>

<code>ITransferManager</code> is used for entries that support file transfers (and if account supports that, of course).

To initiate file transfer, the <code>SendFile()</code> method is used, which takes the entry ID, variant and the file name. If the variant is unavailable, or the protocol doesn't support variants, the variant with the highest priority should be used. <code>SendFile()</code> returns an object that implements <code>ITransferJob</code> which may be later used to watch the progress of the file transfer.

Object implementing <code>ITransferJob</code> is also emitted with the <code>fileOffered()</code> signal to signalize incoming file transfer request. To accept the request, <code>ITransferJob::Accept()</code> code with the string parameter representing path to the output directory. To deny the request, or to abort an already started one, <code>ITransferJob::Reject()</code> is used."
104,book,Writing resource plugins for Azoth,1297885916,development-azoth-resource-plugins,"<h2>Introduction</h2>

Resource plugins add support for loading various resources like smile packs or chat window styles into Azoth. Since this involves the plugins for plugins concept of LeechCraft, please refer to the [105: corresponding document] if you are unfamiliar with it.

Since resource plugins are second-level plugins, they should at least implement <code>IInfo</code> and <code>IPlugin2</code>. For Azoth to detect them as a resource plugin, the return value of the <code>IPlugin2::GetPluginClasses()</code> method should contain the <code>""org.LeechCraft.Plugins.Azoth.Plugins.IResourceSourcePlugin""</code> class, and they also need to implement the <code>IResourcePlugin</code> interface.

The <code>IResourcePlugin::GetResourceSources()</code> returns a list of objects, each of them implements an interface which is subclass of <code>IResourceSource</code>. There are currently two subclasses:
<ul>
<li><code>ISmileResourceSource</code> for loaders of smile packs, and</li>
<li><code>IChatStyleResourceSource</code> for loaders of chat style themes.</li>
</ul>

<h2>IResourceSource base</h2>

All interfaces for different types of resource loaders are derived from the <code>IResourceSource</code> interface. This interface contains only one function, <code>IResourceSource::GetOptionsModel()</code>. This function should return the model with a single column that will be added to the corresponding combobox in the settings. The data for the <code>Qt::DisplayRole</code> interpreted as string would later be used to query the resource source for information or load of the corresponding resource pack. We will further refer to this string as <em>option</em>.

<h2>Smile packs</h2>

To be done.

<h2>Chat style themes</h2>

Loaders of chat style themes should implement the <code>IChatStyleResourceSource</code> interface, which has one new method: <code>GetHTMLTemplate()</code>, which takes two parameters — the selected option and the entry object for which to create the template. The object is expected to implement <code>ICLEntry</code>. This method should return (a possibly preprocessed) template for the chat window.","<h2>Introduction</h2>

Resource plugins add support for loading various resources like smile packs or chat window styles into Azoth. Since this involves the plugins for plugins concept of LeechCraft, please refer to the [105: corresponding document] if you are unfamiliar with it.

Since resource plugins are second-level plugins, they should at least implement <code>IInfo</code> and <code>IPlugin2</code>. For Azoth to detect them as a resource plugin, the return value of the <code>IPlugin2::GetPluginClasses()</code> method should contain the <code>""org.LeechCraft.Plugins.Azoth.Plugins.IResourceSourcePlugin""</code> class, and they also need to implement the <code>IResourcePlugin</code> interface.

The <code>IResourcePlugin::GetResourceSources()</code> returns a list of objects, each of them implements an interface which is subclass of <code>IResourceSource</code>. There are currently two subclasses:
<ul>
<li><code>ISmileResourceSource</code> for loaders of smile packs, and</li>
<li><code>IChatStyleResourceSource</code> for loaders of chat style themes.</li>
</ul>

<h2>IResourceSource base</h2>

All interfaces for different types of resource loaders are derived from the <code>IResourceSource</code> interface. This interface contains only one function, <code>IResourceSource::GetOptionsModel()</code>. This function should return the model with a single column that will be added to the corresponding combobox in the settings. The data for the <code>Qt::DisplayRole</code> interpreted as string would later be used to query the resource source for information or load of the corresponding resource pack. We will further refer to this string as <em>option</em>.

<h2>Smile packs</h2>

To be done.

<h2>Chat style themes</h2>

Loaders of chat style themes should implement the <code>IChatStyleResourceSource</code> interface, which has one new method: <code>GetHTMLTemplate()</code>, which takes two parameters — the selected option and the entry object for which to create the template. The object is expected to implement <code>ICLEntry</code>. This method should return (a possibly preprocessed) template for the chat window."
105,book,Plugins for plugins,1297243358,development-plugins-for-plugins,"Plugins could have other plugins for themselves, though this requires some support from both sides. Plugins for other plugins would be further called as second-level plugins, while plugins that support them would be called plugin-ready (or first-level) plugins.

Plugin-ready plugin should implement the <code>IPluginReady</code> interface to indicate that it supports plugins for itself, while second-level plugin should implement <code>IPlugin2</code>.

LeechCraft core automatically determines which plugins should be connected with which other plugins using the so-called plugin classes. A plugin-ready plugin returns a set of strings representing plugin classes that it supports, and second-level plugin returns a set of strings that it provides. Then, if intersection between these sets for a pair of plugins is non-empty, the second-level plugin is connected with the plugin-ready one.

Of course, one second-level plugin may provide several different plugin classes, and they may logically belong to the same first-level plugin or to different ones. In first case, the second-level plugin would be added only once, in the second case, it will be added to each first-level plugin with which the classes intersection is non-empty.

The interface for first-level plugins, <code>IPluginReady</code>, has two methods, <code>QSet<QByteArray> GetExpectedPluginClasses() const</code> and <code>void AddPlugin(QObject*)</code>. The first one returns the list of expected plugin classes, and the second one is used to add corresponding plugins to this one. The <code>IPlugin2</code> interface has only one method, <code>QSet<QByteArray> GetPluginClasses() const</code> that returns the list of plugin classes that this plugin provides.

The <code>void IPluginReady::AddPlugin(QObject*)</code> is called by the LeechCraft core to connect the first-level plugin with the corresponding second-level one when both of them have performed their initial initialization (with the <code>void IInfo::Init(ICoreProxy_ptr)</code> method), but before <code>void IInfo::SecondInit()</code>. So it is safe to rely on each other in the <code>AddPlugin</code> and <code>SecondInit</code>, assuming both plugins initialize themselves correctly in <code>Init</code>

The second-level plugins are considered to be dependent on first-level ones, so if not all plugin classes of a plugin found the corresponding first-level plugins, the second-level plugin is not initialized.

Of course, second-level plugins may have plugins for themselves as well, in which case they become both first-level and second-level plugins as once.","Plugins could have other plugins for themselves, though this requires some support from both sides. Plugins for other plugins would be further called as second-level plugins, while plugins that support them would be called plugin-ready (or first-level) plugins.

Plugin-ready plugin should implement the <code>IPluginReady</code> interface to indicate that it supports plugins for itself, while second-level plugin should implement <code>IPlugin2</code>.

LeechCraft core automatically determines which plugins should be connected with which other plugins using the so-called plugin classes. A plugin-ready plugin returns a set of strings representing plugin classes that it supports, and second-level plugin returns a set of strings that it provides. Then, if intersection between these sets for a pair of plugins is non-empty, the second-level plugin is connected with the plugin-ready one.

Of course, one second-level plugin may provide several different plugin classes, and they may logically belong to the same first-level plugin or to different ones. In first case, the second-level plugin would be added only once, in the second case, it will be added to each first-level plugin with which the classes intersection is non-empty.

The interface for first-level plugins, <code>IPluginReady</code>, has two methods, <code>QSet<QByteArray> GetExpectedPluginClasses() const</code> and <code>void AddPlugin(QObject*)</code>. The first one returns the list of expected plugin classes, and the second one is used to add corresponding plugins to this one. The <code>IPlugin2</code> interface has only one method, <code>QSet<QByteArray> GetPluginClasses() const</code> that returns the list of plugin classes that this plugin provides.

The <code>void IPluginReady::AddPlugin(QObject*)</code> is called by the LeechCraft core to connect the first-level plugin with the corresponding second-level one when both of them have performed their initial initialization (with the <code>void IInfo::Init(ICoreProxy_ptr)</code> method), but before <code>void IInfo::SecondInit()</code>. So it is safe to rely on each other in the <code>AddPlugin</code> and <code>SecondInit</code>, assuming both plugins initialize themselves correctly in <code>Init</code>

The second-level plugins are considered to be dependent on first-level ones, so if not all plugin classes of a plugin found the corresponding first-level plugins, the second-level plugin is not initialized.

Of course, second-level plugins may have plugins for themselves as well, in which case they become both first-level and second-level plugins as once."
106,book,Theming chat windows,1310342934,development-azoth-theming-chatwindow,"Azoth chat windows may be styled if the Azoth StandardStyles plugin is present.

<h2>File layout</h2>

A chat window theme includes an HTML template file named <code type=""bash"">viewcontents.html</code> and optionally any other required files. A different template may be used for MUC chats: if present, <code type=""bash"">viewcontents.muc.html</code> would be used instead of <code type=""bash"">viewcontents.html</code>.

For Azoth StandardStyles to detect your theme, create a directory in <code type=""bash"">~/.leechcraft/data/azoth/styles/standard/</code> with the desired name (it would be the name of your theme) and place at least the template file there. For a sample theme called, for example, Sample, that would be <code type=""bash"">~/.leechcraft/data/azoth/styles/standard/Sample/viewcontents.html</code>.

<h2>Simple example</h2>
A basic theme would look like
<pre><code type=""html"">
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
<html>
	<head>
		<meta name=""coloring"" content=""hash"" />
		<meta name=""themename"" content=""Basic"" />
		<meta name=""author"" content=""Georg Rudoy"" />
		<title>Chat</title>
		<style type=""text/css"">
			a { color: LINKCOLOR; }
			a.nicklink { text-decoration: none; }
			body { background-color: BACKGROUNDCOLOR; color: FOREGROUNDCOLOR; }
			.statusmsg { color: green; }
			.highlightchatmsg { color: red; }
		</style>
	</head>
	<body/>
</html>
</code></pre>

<h2>Message elements</h2>

Messages are appended to the <code type=""html""><body></code> element as <code type=""html""><div></code>s. The classes of those <code type=""html""><div></code>s and their subelements depend on the role of the message, and may be used to show different messages in different style.

The following <code type=""html""><div></code> classes are used:
<ul>
<li><code>""slashmechatmsg""</code> for messages beginning with ""/me"".</li>
<li><code>""highlightchatmsg""</code> for chat messages that triggered a highlight.</li>
<li><code>""chatmsg""</code> for the rest of chat messages.</li>
<li><code>""eventmsg""</code> for the event messages (like kicks, bans and MUC room subject changes).</li>
<li><code>""statusmsg""</code> for status messages (like status changes as well as joins and leaves in MUCs).</li>
</ul>

Nickname, if any, is in <code type=""html""><span class=""nickname""></code> inside the div. Nicknames in the MUCs are basically hyperlinks that allow to insert them in the message line edit, and the corresponding <code type=""html""><a></code> elements have the <code>""nicklink""</code> class. Nicknames in one-to-one chats have class of either <code>""nicknamein""</code> or <code>""nicknameout""</code> depending on whether it's nickname in incoming or outgoing message.

Date/time of the message is shown in a <code type=""html""><span class=""datetime""></code>.

<h2>Nick coloring</h2>

The <code type=""html""><meta name=""coloring"" content=""hash"" /></code> tag defines the type of nick color generation. If it's <code>""hash""</code>, then the smart color-generator is used to generate the colors based on the current palette background (<em>not</em> the HTML template background). If it's a list of space-separated words, than the words are converted to the colors and used instead. The words may have the following format:
<ul>
<li><code type=""html"">#RGB</code> (each of R, G, and B is a single hex digit)</li>
<li><code type=""html"">#RRGGBB</code></li>
<li><code type=""html"">#RRRGGGBBB</code></li>
<li><code type=""html"">#RRRRGGGGBBBB</code></li>
<li>A name from the list of colors defined in the list of SVG color keyword names provided by the World Wide Web Consortium; for example, ""steelblue"" or ""gainsboro"".</li>
</ul>

The color-generator-based hash coloring is not recommended for themes where background color is overridden.

<h2>Autoscrolling</h2>

A script for autoscrolling support would be added to your webpage. The script exposes three functions: <code type=""js"">ScrollToBottom()</code>, <code type=""js"">TestScroll()</code> and <code type=""js"">InstallEventListeners()</code>. It also installs event handlers to <code type=""js"">document.body.DOMNodeInserted</code> event and to <code type=""js"">window.onresize</code> event, and adds a new property to the <code type=""js"">window</code> object, called <code type=""js"">ShouldScroll</code>.","Azoth chat windows may be styled if the Azoth StandardStyles plugin is present.

<h2>File layout</h2>

A chat window theme includes an HTML template file named <code type=""bash"">viewcontents.html</code> and optionally any other required files. A different template may be used for MUC chats: if present, <code type=""bash"">viewcontents.muc.html</code> would be used instead of <code type=""bash"">viewcontents.html</code>.

For Azoth StandardStyles to detect your theme, create a directory in <code type=""bash"">~/.leechcraft/data/azoth/styles/standard/</code> with the desired name (it would be the name of your theme) and place at least the template file there. For a sample theme called, for example, Sample, that would be <code type=""bash"">~/.leechcraft/data/azoth/styles/standard/Sample/viewcontents.html</code>.

<h2>Simple example</h2>
A basic theme would look like
<pre><code type=""html"">
<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">
<html>
	<head>
		<meta name=""coloring"" content=""hash"" />
		<meta name=""themename"" content=""Basic"" />
		<meta name=""author"" content=""Georg Rudoy"" />
		<title>Chat</title>
		<style type=""text/css"">
			a { color: LINKCOLOR; }
			a.nicklink { text-decoration: none; }
			body { background-color: BACKGROUNDCOLOR; color: FOREGROUNDCOLOR; }
			.statusmsg { color: green; }
			.highlightchatmsg { color: red; }
		</style>
	</head>
	<body/>
</html>
</code></pre>

<h2>Message elements</h2>

Messages are appended to the <code type=""html""><body></code> element as <code type=""html""><div></code>s. The classes of those <code type=""html""><div></code>s and their subelements depend on the role of the message, and may be used to show different messages in different style.

The following <code type=""html""><div></code> classes are used:
<ul>
<li><code>""slashmechatmsg""</code> for messages beginning with ""/me"".</li>
<li><code>""highlightchatmsg""</code> for chat messages that triggered a highlight.</li>
<li><code>""chatmsg""</code> for the rest of chat messages.</li>
<li><code>""eventmsg""</code> for the event messages (like kicks, bans and MUC room subject changes).</li>
<li><code>""statusmsg""</code> for status messages (like status changes as well as joins and leaves in MUCs).</li>
</ul>

Nickname, if any, is in <code type=""html""><span class=""nickname""></code> inside the div. Nicknames in the MUCs are basically hyperlinks that allow to insert them in the message line edit, and the corresponding <code type=""html""><a></code> elements have the <code>""nicklink""</code> class. Nicknames in one-to-one chats have class of either <code>""nicknamein""</code> or <code>""nicknameout""</code> depending on whether it's nickname in incoming or outgoing message.

Date/time of the message is shown in a <code type=""html""><span class=""datetime""></code>.

<h2>Nick coloring</h2>

The <code type=""html""><meta name=""coloring"" content=""hash"" /></code> tag defines the type of nick color generation. If it's <code>""hash""</code>, then the smart color-generator is used to generate the colors based on the current palette background (<em>not</em> the HTML template background). If it's a list of space-separated words, than the words are converted to the colors and used instead. The words may have the following format:
<ul>
<li><code type=""html"">#RGB</code> (each of R, G, and B is a single hex digit)</li>
<li><code type=""html"">#RRGGBB</code></li>
<li><code type=""html"">#RRRGGGBBB</code></li>
<li><code type=""html"">#RRRRGGGGBBBB</code></li>
<li>A name from the list of colors defined in the list of SVG color keyword names provided by the World Wide Web Consortium; for example, ""steelblue"" or ""gainsboro"".</li>
</ul>

The color-generator-based hash coloring is not recommended for themes where background color is overridden.

<h2>Autoscrolling</h2>

A script for autoscrolling support would be added to your webpage. The script exposes three functions: <code type=""js"">ScrollToBottom()</code>, <code type=""js"">TestScroll()</code> and <code type=""js"">InstallEventListeners()</code>. It also installs event handlers to <code type=""js"">document.body.DOMNodeInserted</code> event and to <code type=""js"">window.onresize</code> event, and adds a new property to the <code type=""js"">window</code> object, called <code type=""js"">ShouldScroll</code>."
107,book,Various information,1297680687,,"This section is for various ideas, discussions and such.","This section is for various ideas, discussions and such."
109,image,LeechCraft on N900: startup wizard,1297892317,,"",""
110,image,LeechCraft on N900: Aggregator startup,1297892487,,"",""
111,image,LeechCraft on N900: Aggregator feeds selection,1297892570,,"",""
112,image,LeechCraft on N900: Poshuku CleanWeb in startup wizard,1297892617,,"",""
113,image,LeechCraft on N900: SeekThru default searchers setup,1297892654,,"",""
114,image,LeechCraft on N900: Poshuku first page,1297892707,,"",""
115,image,LeechCraft on N900: Azoth roster,1297892775,,"",""
116,image,LeechCraft on N900: Azoth and Aggregator,1297892795,,"",""
117,image,LeechCraft on N900: Multiuser chatroom in Azoth,1297892829,,"",""
118,image,LeechCraft on N900: Poshuku on Maemo,1297892954,,"",""
119,image,LeechCraft on N900: Azoth in a multiuser chatroom,1297892973,,"",""
120,story,LeechCraft on Nokia N900!,1297893725,,"Thanks to guys with nicknames Disabler and smith, LeechCraft is proved to run on Nokia N900. Disabler made it run on N900 with Ubuntu installed, while smith worked with native Maemo installation.

Of course, the interface is not adapted to finger-based manipulations, stylus is required to work with LeechCraft, but this proof-of-concept shows that LeechCraft can run there at all, so after some UI adaptation we would have another supported platform :)

If you want to try LeechCraft on N900 with Ubuntu, you can install <a href=""/files/qt-everywhere-opensource-src_4.7.1-1_armel.deb"">Qt 4.7.1</a>, <a href=""/files/qxmpp_0.2.92-git20110213_armel.deb"">QXmpp</a> and <a href=""/files/leechcraft_20110213-1_armel.deb"">LeechCraft</a> from the deb packages. Icons ans shortcuts for Hildon <a href=""/files/leechcraft-n900-icons.zip"">are also available</a> — that archive should be unpacked into <code type=""bash"">/usr</code>.

And, well, some screenshots now:
[img_assist|nid=109|title=|desc=LeechCraft on N900: startup wizard|link=popup|align=left|width=400|height=240]

[img_assist|nid=111|title=|desc=LeechCraft on N900: Aggregator feeds selection|link=popup|align=left|width=400|height=240]

[img_assist|nid=114|title=|desc=LeechCraft on N900: Poshuku first page|link=popup|align=left|width=400|height=240]

[img_assist|nid=115|title=|desc=LeechCraft on N900: Azoth roster|link=popup|align=left|width=400|height=240]

[img_assist|nid=116|title=|desc=LeechCraft on N900: Azoth and Aggregator|link=popup|align=left|width=400|height=240]

[img_assist|nid=117|title=|desc=LeechCraft on N900: Multiuser chatroom in Azoth|link=popup|align=left|width=400|height=240]

[img_assist|nid=118|title=|desc=LeechCraft on N900: Poshuku on Maemo|link=popup|align=left|width=400|height=240]

[img_assist|nid=119|title=|desc=LeechCraft on N900: Azoth in a multiuser chatroom on Maemo|link=popup|align=left|width=400|height=240]","Thanks to guys with nicknames Disabler and smith, LeechCraft is proved to run on Nokia N900. Disabler made it run on N900 with Ubuntu installed, while smith worked with native Maemo installation.

Of course, the interface is not adapted to finger-based manipulations, stylus is required to work with LeechCraft, but this proof-of-concept shows that LeechCraft can run there at all, so after some UI adaptation we would have another supported platform :)

If you want to try LeechCraft on N900 with Ubuntu, you can install <a href=""/files/qt-everywhere-opensource-src_4.7.1-1_armel.deb"">Qt 4.7.1</a>, <a href=""/files/qxmpp_0.2.92-git20110213_armel.deb"">QXmpp</a> and <a href=""/files/leechcraft_20110213-1_armel.deb"">LeechCraft</a> from the deb packages. Icons ans shortcuts for Hildon <a href=""/files/leechcraft-n900-icons.zip"">are also available</a> — that archive should be unpacked into <code type=""bash"">/usr</code>.

And, well, some screenshots now:
[img_assist|nid=109|title=|desc=LeechCraft on N900: startup wizard|link=popup|align=left|width=400|height=240]

[img_assist|nid=111|title=|desc=LeechCraft on N900: Aggregator feeds selection|link=popup|align=left|width=400|height=240]

[img_assist|nid=114|title=|desc=LeechCraft on N900: Poshuku first page|link=popup|align=left|width=400|height=240]

[img_assist|nid=115|title=|desc=LeechCraft on N900: Azoth roster|link=popup|align=left|width=400|height=240]

[img_assist|nid=116|title=|desc=LeechCraft on N900: Azoth and Aggregator|link=popup|align=left|width=400|height=240]

[img_assist|nid=117|title=|desc=LeechCraft on N900: Multiuser chatroom in Azoth|link=popup|align=left|width=400|height=240]

[img_assist|nid=118|title=|desc=LeechCraft on N900: Poshuku on Maemo|link=popup|align=left|width=400|height=240]

[img_assist|nid=119|title=|desc=LeechCraft on N900: Azoth in a multiuser chatroom on Maemo|link=popup|align=left|width=400|height=240]"
122,page,FAQ,1310434749,faq,"<h2>I want to help, what do you have for me?</h2>

Lots of stuff to do.

<h3>Core</h3>

<ul>
<li>Tabs in header.</li>
<li>KDE-style dockwidgets (represented by a button and completely hideable by clicking on it).</li>
</ul>

<h3>New plugins</h3>

<ul>
<li>libvlc-based media player with support for collections, playlists, etc.</li>
<li>GUI for mpd.</li>
<li>Recursive HTTP sites downloader (like <code type=""bash"">wget -m</code> or Teleport Pro).</li>
<li>Window Manager for sure.</li>
<li>Tree-like tabs display, like Tab++ but sanely working.</li>
</ul>

<h3>Azoth</h3>

<ul>
<li>Make history plugin more user-friendly: search, date filter, etc.</li>
<li>Implement XEPs of your like in QXmpp, for examples, some of the red ones in the XEP matrix on [144: Azoth Xoox]'s page.</li>
<li>MSN, ICQ, Gadu-gadu or any other protocol you want.</li>
<li>Vkontakte/Facebook plugins with friends' list, photos and comments.</li>
</ul>

<h3>Poshuku</h3>

<ul>
<li>Support for bookmarks/etc exchange with your favorite social bookmarking service like Read It Later (Poshuku OnlineBookmarks is to be extended for that).</li>
<li>Shortcuts for clickable elements on a web page, like those that appear when pressing Ctrl in Arora.</li>
<li>Speed dial.</li>
<li>Opera-like on/off for pictures.</li>
</ul>

Anyway, think about [9: contacting us].

<h3>But I'm not a programmer!</h3>

That's OK. If you are into drawing stuff, you could design an icon set, emoticons set, or such. If you know some languages but English or Russian, you could help with translations. In either case, please just use LeechCraft, report your ideas, suggestions, tell us about your experience and feelings.

And, of course, help us to build a community, stay around in our XMPP conference, <a href=""xmpp:leechcraft@conference.jabber.ru"">leechcraft@conference.jabber.ru</a>, chat around, answer newbies' questions and such. You can't imagine how it helps when there is at least a person or two that can help you with all that support-related stuff so that you can free a bit of time and context switches to write a bit more code.

<h2>Project</h2>

<h3>Why do you write another browser (torrent client, RSS reader, etc), there is Chrome/Firefox/Opera/whatever?</h3>

Firstly, it's not a browser (or a torrent client, or whatever) with just some additional plugins. The project has quite another goal (see the next question).

Of course, we could use some external browser like Firefox or Chrome, but in order to achieve the goal of the project, we should have a browser plugin we can fully control and adapt to LeechCraft concepts. The same applies to every other plugin we have, basically.

<h3>OK, so what's the goal of the project?</h3>

Our goal is to bring a usable and handy all-in-one (but modular) application that would cover most Internet and common desktop tasks, like browsing, IM, news or media playback.

Implementing a whole Desktop Environment is also in the roadmap. For that, just some plugins like window manager and support for running external applications inside LeechCraft should be added. Unfortunately, that would be a *NIX-only thing.

<h3>Aha! All-in-one application, that's not Unix-way!</h3>

By saying ""all-in-one"" we mean end-user experience.

Architecturally, it's modular and split into different parts, where each module does one thing, and tries to do it well. These modules communicate via a global LeechCraft-wide message bus. Of course, the modules don't use UNIX pipes for communication: in the era of GUI applications using UNIX pipes with text-only data transfers is either extremely inefficient or not usable at all if one makes an application like LeechCraft, with modules abstracted from each other and from the core. One would need to define a quite low-level and abstract protocol for communication, based on something like JSON or XML. This text-based protocol would be used for defining GUI and transferring info about GUI events, and there is no need to say how that would slow things down.

To sum up, LeechCraft is split into different modules, communicating with each other via a standard message bus.

<h3>Why do you invent a bicycle and then try to turn it into a robotized swiss knife?</h3>

Just for fun. We have a chance to plan, build and implement some things right from scratch, experimenting with different ideas and playing with various concepts. And, well, we hope that these experiments would produce some interesting and usable results.

<h3>I think feature X is top priority and you should do it ASAP instead of all your crap</h3>

Seems like you think that opensource is like commercial development, but with free resulting product.  Well, you are wrong. We write what you get as a hobby, and we do implement what we feel like is interesting and fun. There is no fixed, approved and unchangeable roadmap, and, of course, there are no deadlines: we have enough pressures in the real life. So, if a feature is heavily worked on, that's because the one who develops it found it to be useful for him, or just decided that it'd be fun to implement it, but not because somebody ordered him to do that.

So, as soon as someone with required skills is found who is interested in implementing the feature, it'd be worked on.

Nevertheless, please suggest your ideas. If you request something that one of us finds interesting to implement, we will surely do it.

<h3>But feature X would bring you lots of users!</h3>

To be honest, we don't care. We code for fun and self-development, not for popularity, fame or such.

<h3>Everybody wants fame, don't lie</h3>

You are bad at psychology.

<h3>Regarding deadlines... When feature X would be implemented and version Y released?</h3>

When it's ready.

We have the ability to focus on quality, not on fixed release dates, so we won't release unpolished things just because of some special date.

Moreover, we should eat, so we go to work, and some of us study, so we can't predict when we'd have enough time, energy and will to fire up text editor and write some lines of code.

<h3>Why can't I use standalone application for each task?</h3>

You can, nobody's forcing you to use LeechCraft. Nevertheless, we encourage you to try LeechCraft out to see whether it would be more handy for you then a set of poorly integrated standalone applications. Also, please report features that you miss in LeechCraft for us to make it even better, so that you won't ask questions like this.

<h3>Why did you chose such names for plugins? Please change them to something sane.</h3>

The names are no more cryptic then ones like Firefox, Chrome, Deluge, Liferea or whatever. It's just a matter of habit.

<h3>I've downloaded Windows version, and it's total crap</h3>

Well, Windows version isn't the thing that we are focused on due to the lack of Windows developers. Thus, Windows version will most likely have more bugs and lack some features present in builds for other OSes.

<h3>OK, I want integration with Firefox</h3>

Whatever you mean by these words, we will do it when we have all other tasks completed and goals achieved.

<h3>I want some feature implemented</h3>

Please [9: contact us].

<h2>Code & technical issues</h2>

<h3>Why you've chosen C++?</h3>

Well, there are several reasons behind this decision.
<ul>
<li>It's better than C for anything but low-level system development.</li>
<li>It's better than Python, Ruby or other similar interpreted languages for such complex applications that should run as long as the user is logged on (provided you are good enough C++ programmer to write a stable code with little to no memory leaks).</li>
<li><em>Lead developer:</em> I was unaware about Haskell or OCaml at the moment of starting the project, and if I started LeechCraft now, I would definitely chose one of those.</li>
</ul>

<h3>Why you've chosen Qt?</h3>

Since we've already chosen the primary language, the question is what's the most suitable framework for C++. We rejected Gtk, wxWidgets and other libraries in favour of Qt since Qt provides not only a widget set, but a lot more: from metaobjects and reflection to XML parsers, SQL helpers, networking, and such. It's a solid foundation for such application as LeechCraft.

<h3>Will you ever implement running LeechCraft plugins as standalone applications?</h3>

Short answer: no.

Long answer: it's already possible in some sense: you can use LeechCraft core to run any single plugin (or any set of plugins) you want. Use <code type=""bash"">leechcraft -P path/to/plugin.so</code> for that. Please note that this way LeechCraft won't load plugin's dependencies, you need to specify them manually. Please also note that LeechCraft won't check whether it's already running, and it would always start a new instance being invoked this way. Thus, you may end up running several instances of one plugin, and, for example, you may get the corresponding settings files corrupt. And when we give the short answer mentioned previously, we mean that we will never implement the corresponding checks, for example, and we won't ""fix"" the problems mentioned here, since they are not actually problems.

<h2>Plugins</h2>

<h3>Azoth can't connect to my GoogleTalk account</h3>

Use port 5222 instead of 5223.

<h3>Azoth doesn't store passwords</h3>

Install the SecMan plugin.","<h2>I want to help, what do you have for me?</h2>

Lots of stuff to do.

<h3>Core</h3>

<ul>
<li>Tabs in header.</li>
<li>KDE-style dockwidgets (represented by a button and completely hideable by clicking on it).</li>
</ul>

<h3>New plugins</h3>

<ul>
<li>libvlc-based media player with support for collections, playlists, etc.</li>
<li>GUI for mpd.</li>
<li>Recursive HTTP sites downloader (like <code type=""bash"">wget -m</code> or Teleport Pro).</li>
<li>Window Manager for sure.</li>
<li>Tree-like tabs display, like Tab++ but sanely working.</li>
</ul>

<h3>Azoth</h3>

<ul>
<li>Make history plugin more user-friendly: search, date filter, etc.</li>
<li>Implement XEPs of your like in QXmpp, for examples, some of the red ones in the XEP matrix on [144: Azoth Xoox]'s page.</li>
<li>MSN, ICQ, Gadu-gadu or any other protocol you want.</li>
<li>Vkontakte/Facebook plugins with friends' list, photos and comments.</li>
</ul>

<h3>Poshuku</h3>

<ul>
<li>Support for bookmarks/etc exchange with your favorite social bookmarking service like Read It Later (Poshuku OnlineBookmarks is to be extended for that).</li>
<li>Shortcuts for clickable elements on a web page, like those that appear when pressing Ctrl in Arora.</li>
<li>Speed dial.</li>
<li>Opera-like on/off for pictures.</li>
</ul>

Anyway, think about [9: contacting us].

<h3>But I'm not a programmer!</h3>

That's OK. If you are into drawing stuff, you could design an icon set, emoticons set, or such. If you know some languages but English or Russian, you could help with translations. In either case, please just use LeechCraft, report your ideas, suggestions, tell us about your experience and feelings.

And, of course, help us to build a community, stay around in our XMPP conference, <a href=""xmpp:leechcraft@conference.jabber.ru"">leechcraft@conference.jabber.ru</a>, chat around, answer newbies' questions and such. You can't imagine how it helps when there is at least a person or two that can help you with all that support-related stuff so that you can free a bit of time and context switches to write a bit more code.

<h2>Project</h2>

<h3>Why do you write another browser (torrent client, RSS reader, etc), there is Chrome/Firefox/Opera/whatever?</h3>

Firstly, it's not a browser (or a torrent client, or whatever) with just some additional plugins. The project has quite another goal (see the next question).

Of course, we could use some external browser like Firefox or Chrome, but in order to achieve the goal of the project, we should have a browser plugin we can fully control and adapt to LeechCraft concepts. The same applies to every other plugin we have, basically.

<h3>OK, so what's the goal of the project?</h3>

Our goal is to bring a usable and handy all-in-one (but modular) application that would cover most Internet and common desktop tasks, like browsing, IM, news or media playback.

Implementing a whole Desktop Environment is also in the roadmap. For that, just some plugins like window manager and support for running external applications inside LeechCraft should be added. Unfortunately, that would be a *NIX-only thing.

<h3>Aha! All-in-one application, that's not Unix-way!</h3>

By saying ""all-in-one"" we mean end-user experience.

Architecturally, it's modular and split into different parts, where each module does one thing, and tries to do it well. These modules communicate via a global LeechCraft-wide message bus. Of course, the modules don't use UNIX pipes for communication: in the era of GUI applications using UNIX pipes with text-only data transfers is either extremely inefficient or not usable at all if one makes an application like LeechCraft, with modules abstracted from each other and from the core. One would need to define a quite low-level and abstract protocol for communication, based on something like JSON or XML. This text-based protocol would be used for defining GUI and transferring info about GUI events, and there is no need to say how that would slow things down.

To sum up, LeechCraft is split into different modules, communicating with each other via a standard message bus.

<h3>Why do you invent a bicycle and then try to turn it into a robotized swiss knife?</h3>

Just for fun. We have a chance to plan, build and implement some things right from scratch, experimenting with different ideas and playing with various concepts. And, well, we hope that these experiments would produce some interesting and usable results.

<h3>I think feature X is top priority and you should do it ASAP instead of all your crap</h3>

Seems like you think that opensource is like commercial development, but with free resulting product.  Well, you are wrong. We write what you get as a hobby, and we do implement what we feel like is interesting and fun. There is no fixed, approved and unchangeable roadmap, and, of course, there are no deadlines: we have enough pressures in the real life. So, if a feature is heavily worked on, that's because the one who develops it found it to be useful for him, or just decided that it'd be fun to implement it, but not because somebody ordered him to do that.

So, as soon as someone with required skills is found who is interested in implementing the feature, it'd be worked on.

Nevertheless, please suggest your ideas. If you request something that one of us finds interesting to implement, we will surely do it.

<h3>But feature X would bring you lots of users!</h3>

To be honest, we don't care. We code for fun and self-development, not for popularity, fame or such.

<h3>Everybody wants fame, don't lie</h3>

You are bad at psychology.

<h3>Regarding deadlines... When feature X would be implemented and version Y released?</h3>

When it's ready.

We have the ability to focus on quality, not on fixed release dates, so we won't release unpolished things just because of some special date.

Moreover, we should eat, so we go to work, and some of us study, so we can't predict when we'd have enough time, energy and will to fire up text editor and write some lines of code.

<h3>Why can't I use standalone application for each task?</h3>

You can, nobody's forcing you to use LeechCraft. Nevertheless, we encourage you to try LeechCraft out to see whether it would be more handy for you then a set of poorly integrated standalone applications. Also, please report features that you miss in LeechCraft for us to make it even better, so that you won't ask questions like this.

<h3>Why did you chose such names for plugins? Please change them to something sane.</h3>

The names are no more cryptic then ones like Firefox, Chrome, Deluge, Liferea or whatever. It's just a matter of habit.

<h3>I've downloaded Windows version, and it's total crap</h3>

Well, Windows version isn't the thing that we are focused on due to the lack of Windows developers. Thus, Windows version will most likely have more bugs and lack some features present in builds for other OSes.

<h3>OK, I want integration with Firefox</h3>

Whatever you mean by these words, we will do it when we have all other tasks completed and goals achieved.

<h3>I want some feature implemented</h3>

Please [9: contact us].

<h2>Code & technical issues</h2>

<h3>Why you've chosen C++?</h3>

Well, there are several reasons behind this decision.
<ul>
<li>It's better than C for anything but low-level system development.</li>
<li>It's better than Python, Ruby or other similar interpreted languages for such complex applications that should run as long as the user is logged on (provided you are good enough C++ programmer to write a stable code with little to no memory leaks).</li>
<li><em>Lead developer:</em> I was unaware about Haskell or OCaml at the moment of starting the project, and if I started LeechCraft now, I would definitely chose one of those.</li>
</ul>

<h3>Why you've chosen Qt?</h3>

Since we've already chosen the primary language, the question is what's the most suitable framework for C++. We rejected Gtk, wxWidgets and other libraries in favour of Qt since Qt provides not only a widget set, but a lot more: from metaobjects and reflection to XML parsers, SQL helpers, networking, and such. It's a solid foundation for such application as LeechCraft.

<h3>Will you ever implement running LeechCraft plugins as standalone applications?</h3>

Short answer: no.

Long answer: it's already possible in some sense: you can use LeechCraft core to run any single plugin (or any set of plugins) you want. Use <code type=""bash"">leechcraft -P path/to/plugin.so</code> for that. Please note that this way LeechCraft won't load plugin's dependencies, you need to specify them manually. Please also note that LeechCraft won't check whether it's already running, and it would always start a new instance being invoked this way. Thus, you may end up running several instances of one plugin, and, for example, you may get the corresponding settings files corrupt. And when we give the short answer mentioned previously, we mean that we will never implement the corresponding checks, for example, and we won't ""fix"" the problems mentioned here, since they are not actually problems.

<h2>Plugins</h2>

<h3>Azoth can't connect to my GoogleTalk account</h3>

Use port 5222 instead of 5223.

<h3>Azoth doesn't store passwords</h3>

Install the SecMan plugin."
124,story,LeechCraft 0.4.70,1328777120,leechcraft-0.4.70-is-released,"Today LeechCraft 0.4.70 is released!

New significant features in this release:
<ul>
<li>Basic support for IRC protocol in Azoth.</li>
<li>Chat history storage plugin.</li>
<li>Chat window themes.</li>
<li>Support for emoticons in Azoth.</li>
<li>Support for manipulating roles/affiliations in Jabber MUCs.</li>
<li>Many smaller improvements and optimizations, mostly in Azoth, LackMan and Aggregator plugins.</li>
</ul>

Packages for Ubuntu Lucid, Maverick and Natty are already available in <code>ppa:0xd34df00d/leechcraft</code> as well as ebuilds for Gentoo in the <code>rion</code> overlay.

Please try this version out and report all the bugs you find, as well as ideas and suggestions.","Today LeechCraft 0.4.70 is released!

New significant features in this release:
<ul>
<li>Basic support for IRC protocol in Azoth.</li>
<li>Chat history storage plugin.</li>
<li>Chat window themes.</li>
<li>Support for emoticons in Azoth.</li>
<li>Support for manipulating roles/affiliations in Jabber MUCs.</li>
<li>Many smaller improvements and optimizations, mostly in Azoth, LackMan and Aggregator plugins.</li>
</ul>

Packages for Ubuntu Lucid, Maverick and Natty are already available in <code>ppa:0xd34df00d/leechcraft</code> as well as ebuilds for Gentoo in the <code>rion</code> overlay.

Please try this version out and report all the bugs you find, as well as ideas and suggestions."
126,book,Getting started (writing plugins),1311000865,development-getting-started-writing-plugins,"There are different typical scenarios for getting into LeechCraft development, depending on your preferred role in the project.

<h2>Programmer</h2>

Ok, so you want to write new plugins for LeechCraft, or maybe contribute code to existing ones.

<ul>
<li>Take a look at our [64: code style] rules and guidelines so that you know how to write code that'd be easily accepted into LeechCraft main codebase.</li>
<li>You will probably want to know [70: how to build LeechCraft].</li>
<li>Then, while it builds, you may feel like wanting to get familiar with [80: LeechCraft architecture].</li>
<li>Read a [81: quick introduction to writing plugins], where we'd write a simple plugin.</li>
<li>If you are unfamiliar with CMake, you could refer to some tips in our [127: cheatsheet].</li>
<li>Refer to our [99: workflow].</li>
<li>Finally, refer to any relevant documentation about some particular LeechCraft features and ways of doing things (like [100: having tabs in your plugin] or [105: support plugins inside your plugin]) as you need to.
</ul>

<h2>Translator</h2>

LeechCraft uses Qt Linguist for translations, so you will need it installed. Translations for language with the two-letter ISO code <code>lang</code> for a plugin named, for example, Aggregator, are located in that plugin's directory and are named <code type=""bash"">leechcraft_aggregator_lang.ts</code>. Translations may also be targeted to different countries by appending the <code type=""bash"">_COUNTRY</code> two-letter ISO code to the base name of the translation file.

If you want to translate LeechCraft to some language, first, check if the translation exists already. If it does, you will need to update it, otherwise you should generate it from scratch. Both tasks are done with the same sequence of commands, and if you don't want to perform them by yourself, feel free to contact us for us to update/generate the translation for you.

The sequence is:
<ol>
<li>Check if there is any <code>*settings.xml</code> file. If there is, run the shell script located at <code type=""bash"">/tools/scripts/translationstuff/gencpp.sh</code> (relative to the root of the git repository), passing the name of the XML file to it and redirecting the output of the script to a <code type=""bash"">.cpp</code>-file, like:

<code type=""bash"">~/Programming/leechcraft/tools/scripts/translationstuff/gencpp.sh *settings.xml > dummy.cpp</code></li>
<li>Run the following command to update (or generate) the translation you want to work on:

<code type=""bash"">lupdate *.cpp *.h *.ui -ts leechcraft_pluginname_lang.ts</code>

Please note that plugin may have additional files with translatable strings in subdirectories, in that case you should pass them in similar manner as well (before the <code type=""bash"">-ts</code>).</li>
</ol>","There are different typical scenarios for getting into LeechCraft development, depending on your preferred role in the project.

<h2>Programmer</h2>

Ok, so you want to write new plugins for LeechCraft, or maybe contribute code to existing ones.

<ul>
<li>Take a look at our [64: code style] rules and guidelines so that you know how to write code that'd be easily accepted into LeechCraft main codebase.</li>
<li>You will probably want to know [70: how to build LeechCraft].</li>
<li>Then, while it builds, you may feel like wanting to get familiar with [80: LeechCraft architecture].</li>
<li>Read a [81: quick introduction to writing plugins], where we'd write a simple plugin.</li>
<li>If you are unfamiliar with CMake, you could refer to some tips in our [127: cheatsheet].</li>
<li>Refer to our [99: workflow].</li>
<li>Finally, refer to any relevant documentation about some particular LeechCraft features and ways of doing things (like [100: having tabs in your plugin] or [105: support plugins inside your plugin]) as you need to.
</ul>

<h2>Translator</h2>

LeechCraft uses Qt Linguist for translations, so you will need it installed. Translations for language with the two-letter ISO code <code>lang</code> for a plugin named, for example, Aggregator, are located in that plugin's directory and are named <code type=""bash"">leechcraft_aggregator_lang.ts</code>. Translations may also be targeted to different countries by appending the <code type=""bash"">_COUNTRY</code> two-letter ISO code to the base name of the translation file.

If you want to translate LeechCraft to some language, first, check if the translation exists already. If it does, you will need to update it, otherwise you should generate it from scratch. Both tasks are done with the same sequence of commands, and if you don't want to perform them by yourself, feel free to contact us for us to update/generate the translation for you.

The sequence is:
<ol>
<li>Check if there is any <code>*settings.xml</code> file. If there is, run the shell script located at <code type=""bash"">/tools/scripts/translationstuff/gencpp.sh</code> (relative to the root of the git repository), passing the name of the XML file to it and redirecting the output of the script to a <code type=""bash"">.cpp</code>-file, like:

<code type=""bash"">~/Programming/leechcraft/tools/scripts/translationstuff/gencpp.sh *settings.xml > dummy.cpp</code></li>
<li>Run the following command to update (or generate) the translation you want to work on:

<code type=""bash"">lupdate *.cpp *.h *.ui -ts leechcraft_pluginname_lang.ts</code>

Please note that plugin may have additional files with translatable strings in subdirectories, in that case you should pass them in similar manner as well (before the <code type=""bash"">-ts</code>).</li>
</ol>"
127,book,CMake cheatsheet,1397221096,development-cmake-cheatsheet,"This cheatsheet contains solutions for typical tasks that a LeechCraft developer may face.

We will mostly use code snippets from the <code type=""bash"">CMakeLists.txt</code> of the Auscrie plugin, which is listed fully at the end of the page.

<h2>Adding new source files</h2>

Add the names of the source (<code type=""bash"">*.cpp</code>) files you want to the <code>SRCS</code> variable if you're using the <code>CMakeLists.txt</code> generated by default by our <code type=""bash"">genplugin.py</code> script. So, for example, if you had
<code type=""cmake"">
set (SRCS
    auscrie.cpp
    shooterdialog.cpp
    poster.cpp
    )</code>
and you've written a class, say, <code>RequestBuilder</code> with <code type=""bash"">requestbuilder.h</code> and <code type=""bash"">requestbuilder.cpp</code> header/implementation files, you should have:
<code type=""cmake"">
set (SRCS
    auscrie.cpp
    shooterdialog.cpp
    poster.cpp
    requestbuilder.cpp
    )</code>

<em>Note:</em> Starting with CMake 2.8.6 we rely on the <a href=""http://blogs.kde.org/node/4495"" target=""_blank"">automoc</a> feature to automatically run Qt's <code>moc</code> over headers with <code type=""cpp-qt"">Q_OBJECT</code> macro. That's why there is no <code>HEADERS</code> variable anymore. For this feature to work, though, every such header should be included at least once in source files listed in the <code>SRCS</code> variable.

<h2>Handling .ui files</h2>

Set a variable with the list of .ui files like the ones with headers and sources and pass it to the <code type=""cmake"">QT4_WRAP_UI</code> command. For example, for two .ui files <code type=""bash"">shooterdialog.ui</code> and <code type=""bash"">savedialog.ui</code>, the following code would be written:
<code type=""cmake"">
set (FORMS
    shooterdialog.ui
    savedialog.ui
    )
QT4_WRAP_UI (UIS_H ${FORMS})</code>

After that, the <code type=""cmake"">UIS_H</code> would contain the list of headers generated by the <code type=""bash"">uic</code>. It should be included as the dependency for your library:
<code type=""cmake"">
add_library (leechcraft_auscrie SHARED
    ...
    ${UIS_H}
    ...
    )</code>

<h2>Adding resources</h2>

To add the resources file, say, <code type=""bash"">anheroresources.qrc</code>, add the following to the <code type=""cmake"">CMakeLists.txt</code>, before the <code type=""cmake"">ADD_LIBRARY</code> call:
<code type=""cmake"">
set (RESOURCES auscrieresources.qrc)
QT4_ADD_RESOURCES (RCCS ${RESOURCES})</code>
Don't forget to add the <code type=""cmake"">${RCCS}</code> to the list of dependencies for your library. For the above example with AnHero:
<code type=""cmake"">
add_library (leechcraft_auscrie SHARED
    ...
    ${RCCS}
    ...
    )</code>

<h2>Adding translations</h2>

Use the <code type=""cmake"">CreateTrs</code> macro defined in LeechCraft cmake files, like:
<code type=""cmake"">
CreateTrs (""auscrie"" ""de;en;es;fr;it;oc;ru_RU;uk_UA"" COMPILED_TRANSLATIONS)
</code>
Here you pass the name of your plugin as the first parameter, the ;-separated list of translations languages as the second one and the variable name for the list of files with compiled translations (<code type=""bash"">*.qm</code>) as third parameter.

<code type=""cmake"">CreateTrs</code> will take care running the <code>lrelease</code> executable over your translation files, so just don't forget to add the compiled translations as the dependency of your plugin:
<code type=""cmake"">
add_library (leechcraft_auscrie SHARED
    ...
    ${COMPILED_TRANSLATIONS}
    ...
    )</code>

Don't also forget to install the resulting files if you don't embed them into resources (and this is the recommended scheme). See the next section regarding installing.

<h2>Installing arbitrary files</h2>

Just use the <code type=""cmake"">INSTALL</code> macro.

To install a list of files, for example, the compiled translations from the previous section:
<code type=""cmake"">
install (FILES ${COMPILED_TRANSLATIONS} DESTINATION ${LC_TRANSLATIONS_DEST})
</code>

Of course, you can hardcode the installation path instead of using variables. For that, just replace the <code type=""cmake"">${LC_TRANSLATIONS_DEST}</code> with the corresponding string.

<h2>Installing (and using) QML files</h2>

A recommended approach of using QML files is to install them into <code type=""cmake"">${LC_QML_DEST}</code> and load with the <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html#a8b2539ffea3b461facdfb6d5f890cd40""><code type=""cpp"">Util::GetSysPath</code></a> method.

So, place your QML files into the <code type=""bash"">share/qml/pluginname</code> subdirectory of your plugin directory. Install the whole subdirectory:
<code type=""cmake"">
install (DIRECTORY share/qml/pluginname DESTINATION ${LC_QML_DEST})
</code>
and get the path to a QML file in your C++ code like this:
<code type=""cpp"">
const auto& filepath = Util::GetSysPath (Util::SysPath::QML, ""pluginname"", ""Filename.qml"");
</code>

Don't forget to check the <code>filepath</code> if it's empty just in case!

<h2>Adding Qt modules besides Core and GUI</h2>

To include support for other Qt modules but Core and GUI, set the corresponding <code type=""cmake"">QT_USE_*</code> variable before the line with <code type=""cmake"">INCLUDE (${QT_USE_FILE})</code>. The full list of the variables is given at the <a href=""http://www.cmake.org/cmake/help/cmake2.6docs.html#module:FindQt4"" target=""_blank"">CMake doc page</a>.

For example, for a plugin that needs QtNetwork as well:

<code type=""cmake"">
set (QT_USE_QTNETWORK TRUE)
include (${QT_USE_FILE})
</code>

<h2>CMakeLists.txt from the Auscrie plugin</h2>

<code type=""cmake"">
CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT (leechcraft_auscrie)
INCLUDE (InitLCPlugin OPTIONAL)

SET (QT_USE_QTNETWORK TRUE)
INCLUDE (${QT_USE_FILE})
INCLUDE_DIRECTORIES (
	${CMAKE_CURRENT_BINARY_DIR}
	${Boost_INCLUDE_DIR}
	${LEECHCRAFT_INCLUDE_DIR}
	)
SET (SRCS
	auscrie.cpp
	shooterdialog.cpp
	poster.cpp
	requestbuilder.cpp
	)
SET (FORMS
	shooterdialog.ui
	)
SET (RESOURCES auscrieresources.qrc)
CreateTrs (""auscrie"" ""de;en;es;fr;it;oc;ru_RU;uk_UA"" COMPILED_TRANSLATIONS)
QT4_WRAP_UI (UIS_H ${FORMS})
QT4_ADD_RESOURCES (RCCS ${RESOURCES})

ADD_LIBRARY (leechcraft_auscrie SHARED
	${COMPILED_TRANSLATIONS}
	${SRCS}
	${MOC_SRCS}
	${UIS_H}
	${RCCS}
	)
TARGET_LINK_LIBRARIES (leechcraft_auscrie
	${QT_LIBRARIES}
	${LEECHCRAFT_LIBRARIES}
	)
INSTALL (TARGETS leechcraft_auscrie DESTINATION ${LC_PLUGINS_DEST})
INSTALL (FILES ${COMPILED_TRANSLATIONS} DESTINATION ${LC_TRANSLATIONS_DEST})
</code>","This cheatsheet contains solutions for typical tasks that a LeechCraft developer may face.

We will mostly use code snippets from the <code type=""bash"">CMakeLists.txt</code> of the Auscrie plugin, which is listed fully at the end of the page.

<h2>Adding new source files</h2>

Add the names of the source (<code type=""bash"">*.cpp</code>) files you want to the <code>SRCS</code> variable if you're using the <code>CMakeLists.txt</code> generated by default by our <code type=""bash"">genplugin.py</code> script. So, for example, if you had
<code type=""cmake"">
set (SRCS
    auscrie.cpp
    shooterdialog.cpp
    poster.cpp
    )</code>
and you've written a class, say, <code>RequestBuilder</code> with <code type=""bash"">requestbuilder.h</code> and <code type=""bash"">requestbuilder.cpp</code> header/implementation files, you should have:
<code type=""cmake"">
set (SRCS
    auscrie.cpp
    shooterdialog.cpp
    poster.cpp
    requestbuilder.cpp
    )</code>

<em>Note:</em> Starting with CMake 2.8.6 we rely on the <a href=""http://blogs.kde.org/node/4495"" target=""_blank"">automoc</a> feature to automatically run Qt's <code>moc</code> over headers with <code type=""cpp-qt"">Q_OBJECT</code> macro. That's why there is no <code>HEADERS</code> variable anymore. For this feature to work, though, every such header should be included at least once in source files listed in the <code>SRCS</code> variable.

<h2>Handling .ui files</h2>

Set a variable with the list of .ui files like the ones with headers and sources and pass it to the <code type=""cmake"">QT4_WRAP_UI</code> command. For example, for two .ui files <code type=""bash"">shooterdialog.ui</code> and <code type=""bash"">savedialog.ui</code>, the following code would be written:
<code type=""cmake"">
set (FORMS
    shooterdialog.ui
    savedialog.ui
    )
QT4_WRAP_UI (UIS_H ${FORMS})</code>

After that, the <code type=""cmake"">UIS_H</code> would contain the list of headers generated by the <code type=""bash"">uic</code>. It should be included as the dependency for your library:
<code type=""cmake"">
add_library (leechcraft_auscrie SHARED
    ...
    ${UIS_H}
    ...
    )</code>

<h2>Adding resources</h2>

To add the resources file, say, <code type=""bash"">anheroresources.qrc</code>, add the following to the <code type=""cmake"">CMakeLists.txt</code>, before the <code type=""cmake"">ADD_LIBRARY</code> call:
<code type=""cmake"">
set (RESOURCES auscrieresources.qrc)
QT4_ADD_RESOURCES (RCCS ${RESOURCES})</code>
Don't forget to add the <code type=""cmake"">${RCCS}</code> to the list of dependencies for your library. For the above example with AnHero:
<code type=""cmake"">
add_library (leechcraft_auscrie SHARED
    ...
    ${RCCS}
    ...
    )</code>

<h2>Adding translations</h2>

Use the <code type=""cmake"">CreateTrs</code> macro defined in LeechCraft cmake files, like:
<code type=""cmake"">
CreateTrs (""auscrie"" ""de;en;es;fr;it;oc;ru_RU;uk_UA"" COMPILED_TRANSLATIONS)
</code>
Here you pass the name of your plugin as the first parameter, the ;-separated list of translations languages as the second one and the variable name for the list of files with compiled translations (<code type=""bash"">*.qm</code>) as third parameter.

<code type=""cmake"">CreateTrs</code> will take care running the <code>lrelease</code> executable over your translation files, so just don't forget to add the compiled translations as the dependency of your plugin:
<code type=""cmake"">
add_library (leechcraft_auscrie SHARED
    ...
    ${COMPILED_TRANSLATIONS}
    ...
    )</code>

Don't also forget to install the resulting files if you don't embed them into resources (and this is the recommended scheme). See the next section regarding installing.

<h2>Installing arbitrary files</h2>

Just use the <code type=""cmake"">INSTALL</code> macro.

To install a list of files, for example, the compiled translations from the previous section:
<code type=""cmake"">
install (FILES ${COMPILED_TRANSLATIONS} DESTINATION ${LC_TRANSLATIONS_DEST})
</code>

Of course, you can hardcode the installation path instead of using variables. For that, just replace the <code type=""cmake"">${LC_TRANSLATIONS_DEST}</code> with the corresponding string.

<h2>Installing (and using) QML files</h2>

A recommended approach of using QML files is to install them into <code type=""cmake"">${LC_QML_DEST}</code> and load with the <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html#a8b2539ffea3b461facdfb6d5f890cd40""><code type=""cpp"">Util::GetSysPath</code></a> method.

So, place your QML files into the <code type=""bash"">share/qml/pluginname</code> subdirectory of your plugin directory. Install the whole subdirectory:
<code type=""cmake"">
install (DIRECTORY share/qml/pluginname DESTINATION ${LC_QML_DEST})
</code>
and get the path to a QML file in your C++ code like this:
<code type=""cpp"">
const auto& filepath = Util::GetSysPath (Util::SysPath::QML, ""pluginname"", ""Filename.qml"");
</code>

Don't forget to check the <code>filepath</code> if it's empty just in case!

<h2>Adding Qt modules besides Core and GUI</h2>

To include support for other Qt modules but Core and GUI, set the corresponding <code type=""cmake"">QT_USE_*</code> variable before the line with <code type=""cmake"">INCLUDE (${QT_USE_FILE})</code>. The full list of the variables is given at the <a href=""http://www.cmake.org/cmake/help/cmake2.6docs.html#module:FindQt4"" target=""_blank"">CMake doc page</a>.

For example, for a plugin that needs QtNetwork as well:

<code type=""cmake"">
set (QT_USE_QTNETWORK TRUE)
include (${QT_USE_FILE})
</code>

<h2>CMakeLists.txt from the Auscrie plugin</h2>

<code type=""cmake"">
CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT (leechcraft_auscrie)
INCLUDE (InitLCPlugin OPTIONAL)

SET (QT_USE_QTNETWORK TRUE)
INCLUDE (${QT_USE_FILE})
INCLUDE_DIRECTORIES (
	${CMAKE_CURRENT_BINARY_DIR}
	${Boost_INCLUDE_DIR}
	${LEECHCRAFT_INCLUDE_DIR}
	)
SET (SRCS
	auscrie.cpp
	shooterdialog.cpp
	poster.cpp
	requestbuilder.cpp
	)
SET (FORMS
	shooterdialog.ui
	)
SET (RESOURCES auscrieresources.qrc)
CreateTrs (""auscrie"" ""de;en;es;fr;it;oc;ru_RU;uk_UA"" COMPILED_TRANSLATIONS)
QT4_WRAP_UI (UIS_H ${FORMS})
QT4_ADD_RESOURCES (RCCS ${RESOURCES})

ADD_LIBRARY (leechcraft_auscrie SHARED
	${COMPILED_TRANSLATIONS}
	${SRCS}
	${MOC_SRCS}
	${UIS_H}
	${RCCS}
	)
TARGET_LINK_LIBRARIES (leechcraft_auscrie
	${QT_LIBRARIES}
	${LEECHCRAFT_LIBRARIES}
	)
INSTALL (TARGETS leechcraft_auscrie DESTINATION ${LC_PLUGINS_DEST})
INSTALL (FILES ${COMPILED_TRANSLATIONS} DESTINATION ${LC_TRANSLATIONS_DEST})
</code>"
128,book,Using notifications,1364889080,development-using-notifications,"Notifications are just normal LeechCraft entities with a special MIME and a predefined structure.

<h2>Creating notifications</h2>

To create a notification, use the <code>LeechCraft::Util::MakeNotification (const QString& header, const QString& body, Priority priority)</code> function (in the <code type=""bash"">util/util.h</code> header). Given a header, a body and priority of your notification, it would return a properly initialized <code>LeechCraft::Entity</code> object.

This entity should then be sent from your plugin using the <code>gotEntity (const LeechCraft::Entity&)</code> signal. Please note its signature, the namespace specification there must not be omitted, otherwise the signal won't be detected by LeechCraft core. Of course, the signal should be emitted from the plugin instance class, the one that you write in the <code>Q_EXPORT_PLUGIN2</code> macro.

You may generally use the HTML markup in your notification body.

A sample code would look like (assuming we are in the <code>LeechCraft</code> namespace):
<code>
const auto& e = Util::MakeEntity (""Azoth"",
        tr (""New message from <em>%1</em>"").arg (buddyName),
        PInfo_);
emit gotEntity (e);
</code>

The entity may also be customized before emitting it with the <code>gotEntity</code> signal. See the next sections for examples.

<h2>Having actions in notification</h2>

To have actions in your notification, create a <code>LeechCraft::Util::NotificationActionHandler</code> object (in <code type=""bash"">util/notificationactionhandler.h</code> header) using <code>new</code>, passing the entity that should have actions to its constructor. Then, add the actions by calling <code>AddFunction (const QString& name, Callback_t func)</code> method of the action handler object. The first parameter, <code>name</code>, is the user-visible name of your action. The second parameter is the function that would be called when the action is triggered by the user. The function should have no parameters and return nothing.

Please note that the created object must not be deleted explicitly by you. It will be automatically deleted whenever needed.

An example code would look like:
<code>
Entity e = Util::MakeEntity (""Azoth"",
        tr (""New message from <em>%1</em>"").arg (buddyName),
        PInfo_);
auto handler = new Util::NotificationActionHandler (e);
handler->AddFunction (tr (""Open chat""),
        [buddyObject] () { ChatManager_->OpenChat (buddyObject); });
emit gotEntity (e);
</code>

Please also note that not all notification engines support actions, so your notification should be sensible even without them.

<h2>Using custom pixmap</h2>

Just set the <code>""NotificationPixmap""</code> element of the <code>Entity::Additional_</code> map to the <code>QPixmap</code> you want to be shown.

Sample code:

<code>
Entity e = Util::MakeEntity (""Azoth"", tr (""New message from <em>%1</em>"").arg (buddyName), PInfo_);
e.Additional_ [""NotificationPixmap""] = QVariant::fromValue<QPixmap> (buddyObject->GetAvatar ());
emit gotEntity (e);
</code>

Please note that not all implementations support showing custom pixmaps.","Notifications are just normal LeechCraft entities with a special MIME and a predefined structure.

<h2>Creating notifications</h2>

To create a notification, use the <code>LeechCraft::Util::MakeNotification (const QString& header, const QString& body, Priority priority)</code> function (in the <code type=""bash"">util/util.h</code> header). Given a header, a body and priority of your notification, it would return a properly initialized <code>LeechCraft::Entity</code> object.

This entity should then be sent from your plugin using the <code>gotEntity (const LeechCraft::Entity&)</code> signal. Please note its signature, the namespace specification there must not be omitted, otherwise the signal won't be detected by LeechCraft core. Of course, the signal should be emitted from the plugin instance class, the one that you write in the <code>Q_EXPORT_PLUGIN2</code> macro.

You may generally use the HTML markup in your notification body.

A sample code would look like (assuming we are in the <code>LeechCraft</code> namespace):
<code>
const auto& e = Util::MakeEntity (""Azoth"",
        tr (""New message from <em>%1</em>"").arg (buddyName),
        PInfo_);
emit gotEntity (e);
</code>

The entity may also be customized before emitting it with the <code>gotEntity</code> signal. See the next sections for examples.

<h2>Having actions in notification</h2>

To have actions in your notification, create a <code>LeechCraft::Util::NotificationActionHandler</code> object (in <code type=""bash"">util/notificationactionhandler.h</code> header) using <code>new</code>, passing the entity that should have actions to its constructor. Then, add the actions by calling <code>AddFunction (const QString& name, Callback_t func)</code> method of the action handler object. The first parameter, <code>name</code>, is the user-visible name of your action. The second parameter is the function that would be called when the action is triggered by the user. The function should have no parameters and return nothing.

Please note that the created object must not be deleted explicitly by you. It will be automatically deleted whenever needed.

An example code would look like:
<code>
Entity e = Util::MakeEntity (""Azoth"",
        tr (""New message from <em>%1</em>"").arg (buddyName),
        PInfo_);
auto handler = new Util::NotificationActionHandler (e);
handler->AddFunction (tr (""Open chat""),
        [buddyObject] () { ChatManager_->OpenChat (buddyObject); });
emit gotEntity (e);
</code>

Please also note that not all notification engines support actions, so your notification should be sensible even without them.

<h2>Using custom pixmap</h2>

Just set the <code>""NotificationPixmap""</code> element of the <code>Entity::Additional_</code> map to the <code>QPixmap</code> you want to be shown.

Sample code:

<code>
Entity e = Util::MakeEntity (""Azoth"", tr (""New message from <em>%1</em>"").arg (buddyName), PInfo_);
e.Additional_ [""NotificationPixmap""] = QVariant::fromValue<QPixmap> (buddyObject->GetAvatar ());
emit gotEntity (e);
</code>

Please note that not all implementations support showing custom pixmaps."
129,book,Implementing tags (and other text) completion,1302729324,development-implementing-tags-and-other-text-completion,"LeechCraft utility library has several classes that aid in supporting completion for tags and basically any other text that consists of ';'-separated categories, like groups in IM or such. These classes are: <code>Util::TagsLineEdit</code>, <code>Util::TagsCompleter</code> and <code>Util::CategorySelector</code> (all in the namespace <code>LeechCraft</code>, of course).

<h2>Line edit</h2>

The <code>Util::TagsLineEdit</code> class, which derives from <code>QLineEdit</code>, represents a line edit widget where user may enter ';'-separated text. Later the <code>Util::TagsCompleter</code> may be used to add the necessary autocompletion functionality to this line edit.

<h2>Tags completer</h2>

<code>Util::TagsCompleter</code> is a subclass of <code>QCompleter</code> and provides the completing itself.

A <code>Util::TagsCompleter</code> is set on a <code>Util::TagsLineEdit</code> by passing that line edit to the completer's constructor. The rest would be done by the completer itself.

By default, it uses the words for completion from the global LeechCraft tags database, but another source model may be set by calling <code>OverrideModel</code> method. The passed model should have as many rows as there are variants of the text (amount of tags or categories, for example), and for each row the first column (with the 0 index) should contain a <code>QString</code> with the corresponding text. Typically, a <code>QStringListModel</code> will do.

<h2>Category selector</h2>

Additionally, <code>Util::CategorySelector</code> class, which is subclassed from <code>QWidget</code>, represents a list of categories which can be checked and unchecked by the mouse. It is designed to work with <code>Util::TagsLineEdit</code> class to add a graphical representation for the list of the categories.

A default category selector may be added to a <code>Util::TagsLineEdit</code> by calling to the <code>Util::TagsLineEdit::AddSelector</code> function. The selector uses the tags completer internally, so it should be added only after the completer is added to the line edit.

<code>Util::CategorySelector::SetPossibleSelections (const QStringList&)</code> is used to set all the possible selections for a given selector, and <code>Util::CategorySelector::SetSelections (const QStringList&)</code> is used then to select items from the ones set with the <code>SetPossibleSelections</code> function.

A custom selector may be created as a usual object, and then its signals and slots may be used to associate it with a line edit or any other suitable object. <code>Util::CategorySelector</code> has the <code>selectionChanged (const QStringList& newSelection)</code> signal which is emitted whenever the selection is changed by the user, for example, by checking or unchecking some items. The selector also has <code>lineTextChanged (const QString&)</code> slot which may be connected to a line edit's <code>textChanged (const QString&)</code> signal, and it is used to sync the changes to the line edit contents made by the user with the contents and selections in the selector.","LeechCraft utility library has several classes that aid in supporting completion for tags and basically any other text that consists of ';'-separated categories, like groups in IM or such. These classes are: <code>Util::TagsLineEdit</code>, <code>Util::TagsCompleter</code> and <code>Util::CategorySelector</code> (all in the namespace <code>LeechCraft</code>, of course).

<h2>Line edit</h2>

The <code>Util::TagsLineEdit</code> class, which derives from <code>QLineEdit</code>, represents a line edit widget where user may enter ';'-separated text. Later the <code>Util::TagsCompleter</code> may be used to add the necessary autocompletion functionality to this line edit.

<h2>Tags completer</h2>

<code>Util::TagsCompleter</code> is a subclass of <code>QCompleter</code> and provides the completing itself.

A <code>Util::TagsCompleter</code> is set on a <code>Util::TagsLineEdit</code> by passing that line edit to the completer's constructor. The rest would be done by the completer itself.

By default, it uses the words for completion from the global LeechCraft tags database, but another source model may be set by calling <code>OverrideModel</code> method. The passed model should have as many rows as there are variants of the text (amount of tags or categories, for example), and for each row the first column (with the 0 index) should contain a <code>QString</code> with the corresponding text. Typically, a <code>QStringListModel</code> will do.

<h2>Category selector</h2>

Additionally, <code>Util::CategorySelector</code> class, which is subclassed from <code>QWidget</code>, represents a list of categories which can be checked and unchecked by the mouse. It is designed to work with <code>Util::TagsLineEdit</code> class to add a graphical representation for the list of the categories.

A default category selector may be added to a <code>Util::TagsLineEdit</code> by calling to the <code>Util::TagsLineEdit::AddSelector</code> function. The selector uses the tags completer internally, so it should be added only after the completer is added to the line edit.

<code>Util::CategorySelector::SetPossibleSelections (const QStringList&)</code> is used to set all the possible selections for a given selector, and <code>Util::CategorySelector::SetSelections (const QStringList&)</code> is used then to select items from the ones set with the <code>SetPossibleSelections</code> function.

A custom selector may be created as a usual object, and then its signals and slots may be used to associate it with a line edit or any other suitable object. <code>Util::CategorySelector</code> has the <code>selectionChanged (const QStringList& newSelection)</code> signal which is emitted whenever the selection is changed by the user, for example, by checking or unchecking some items. The selector also has <code>lineTextChanged (const QString&)</code> slot which may be connected to a line edit's <code>textChanged (const QString&)</code> signal, and it is used to sync the changes to the line edit contents made by the user with the contents and selections in the selector."
130,story,Development digest #1,1304760442,devel-digest-1,"After some discussion in our development team, we've decided to periodically publish development digests in the news section of this site. The digests would primarily cover new features and decisions by the dev team. They won't be strongly periodical, but would rather be published as long as there is enough new material or to announce something really important.

So, today the first digest is published, and we'd like to note the following changes done in the last couple of weeks:

<ul>
<li>Azoth now supports configuring MUC rooms, and the configuration functionality is implemented in the Xoox plugin.</li>
<li>Major improvements in Acetamide 2, the rewrite of IRC protocol support in Azoth, have been merged in the master development branch. For example, Acetamide now supports all the commands from the RFC 2812, and CTCP request/replies are now shown in the current tab.</li>
<li>Entity handler dialog has been reworked a bit, so that ""Browse"" is now a button, and it allows to choose the correct path without closing the dialog.</li>
<li>Work has been started on the emoticons converter which is to convert emoticons packs from other clients into LeechCraft Azoth's own native format. The repository is at https://github.com/Maledictus/SmilesConverter. Currently only Kopete is supported, Psi support is on its way.</li>
</ul>","After some discussion in our development team, we've decided to periodically publish development digests in the news section of this site. The digests would primarily cover new features and decisions by the dev team. They won't be strongly periodical, but would rather be published as long as there is enough new material or to announce something really important.

So, today the first digest is published, and we'd like to note the following changes done in the last couple of weeks:

<ul>
<li>Azoth now supports configuring MUC rooms, and the configuration functionality is implemented in the Xoox plugin.</li>
<li>Major improvements in Acetamide 2, the rewrite of IRC protocol support in Azoth, have been merged in the master development branch. For example, Acetamide now supports all the commands from the RFC 2812, and CTCP request/replies are now shown in the current tab.</li>
<li>Entity handler dialog has been reworked a bit, so that ""Browse"" is now a button, and it allows to choose the correct path without closing the dialog.</li>
<li>Work has been started on the emoticons converter which is to convert emoticons packs from other clients into LeechCraft Azoth's own native format. The repository is at https://github.com/Maledictus/SmilesConverter. Currently only Kopete is supported, Psi support is on its way.</li>
</ul>"
132,story,Development digest #2,1306079375,devel-digest-2,"So, we haven't published any digests in the last couple of weeks, and the next delay would be even lengthier, since most of us have finals now, but nevertheless, some new features have been introduced.

<ul>
<li>Added support for Psi+ and Kopete emoticons packs in Azoth NativeEmoticons <em>(thanks Magog)</em>.</li>
<li>Fixed loading resources when started with current directory not equal to <code type=""bash"">leechcraft.exe</code> directory on Windows.</li>
<li>Added search in the contact list in Azoth.</li>
<li>Support for password-protected rooms in Azoth Xoox.</li>
<li>Added new plugin, Azoth HiLi, for customizing highlights in the MUCs. Highlights could be triggered by plain strings or by regexps.</li>
<li>p100q plugin for Azoth now supports parsing tags and selecting them, and user avatars are also shown <em>(thanks Ignotus)</em>.</li>
<li>Added <code>GM_addStyle</code>, <code>GM_getValue</code>, <code>GM_deleteValue</code>, <code>GM_setValue</code>, <code>GM_listValues</code>, <code>GM_openInTab</code>, <code>GM_getResourceText</code>, <code>GM_getResourceURL</code> and <code>GM_log</code> functions in Poshuku FatApe, the GreaseMonkey support layer <em>(thanks Nobodyzzz)</em>.</li>
<li>Kinotify became more system palette-aware, as well as some default text styles for different contexts were added. Should look fancier now.</li>
<li>Outgoing messages don't contain a datetime stamp now in Azoth Xoox.</li>
<li>Fixed a segfault when closing a tab in Poshuku with an active context menu.</li>
<li>Several fixes in Acetamide <em>(thanks Magog, once again)</em>.</li>
<li>Rather not user-oriented, but nevertheless: documented Poshuku's hooks and changed signatures of some of them.</li>
</ul>","So, we haven't published any digests in the last couple of weeks, and the next delay would be even lengthier, since most of us have finals now, but nevertheless, some new features have been introduced.

<ul>
<li>Added support for Psi+ and Kopete emoticons packs in Azoth NativeEmoticons <em>(thanks Magog)</em>.</li>
<li>Fixed loading resources when started with current directory not equal to <code type=""bash"">leechcraft.exe</code> directory on Windows.</li>
<li>Added search in the contact list in Azoth.</li>
<li>Support for password-protected rooms in Azoth Xoox.</li>
<li>Added new plugin, Azoth HiLi, for customizing highlights in the MUCs. Highlights could be triggered by plain strings or by regexps.</li>
<li>p100q plugin for Azoth now supports parsing tags and selecting them, and user avatars are also shown <em>(thanks Ignotus)</em>.</li>
<li>Added <code>GM_addStyle</code>, <code>GM_getValue</code>, <code>GM_deleteValue</code>, <code>GM_setValue</code>, <code>GM_listValues</code>, <code>GM_openInTab</code>, <code>GM_getResourceText</code>, <code>GM_getResourceURL</code> and <code>GM_log</code> functions in Poshuku FatApe, the GreaseMonkey support layer <em>(thanks Nobodyzzz)</em>.</li>
<li>Kinotify became more system palette-aware, as well as some default text styles for different contexts were added. Should look fancier now.</li>
<li>Outgoing messages don't contain a datetime stamp now in Azoth Xoox.</li>
<li>Fixed a segfault when closing a tab in Poshuku with an active context menu.</li>
<li>Several fixes in Acetamide <em>(thanks Magog, once again)</em>.</li>
<li>Rather not user-oriented, but nevertheless: documented Poshuku's hooks and changed signatures of some of them.</li>
</ul>"
134,page,Friends,1306080611,friends,"Project friends:

<a href=""http://welinux.ru"" target=""_blank""><img src=""http://welinux.ru/favicon.ico"" alt=""welinux"" />welinux.ru</a>","Project friends:

<a href=""http://welinux.ru"" target=""_blank""><img src=""http://welinux.ru/favicon.ico"" alt=""welinux"" />welinux.ru</a>"
136,story,Development digest #3,1307002059,devel-digest-3,"Last week or so something great has happened: EiskaltDC++ is now working again in LeechCraft, thanks Negativ, the author and main developer of EiskaltDC++, for porting it to the new LeechCraft's tabs system. And, of course, despite finals, there are some other changes. So, a bit more detailed list follows:
<ul>
<li>EiskaltDC++ was synced with upstream (new features and bugfixes!) and adapted to the new LeechCraft tabs system introduced a month ago or so <em>(thanks Negativ)</em>.</li>
<li>Support for recursive Service Discovery in Azoth Xoox.</li>
<li>Azoth Xoox now supports registering on gateways to other protocols, and, of course, working with the gateways.</li>
<li>Kinotify plugin supports links in notifications and opens them as it should.</li>
<li>Aggregator finally saves columns width <em>(thanks Akon32)</em>.</li>
<li>And, once again, one more user-invisible change. Core changed a bit semantics of notifications handling. Now notifications are really broadcast. This enables us to implement things like audio notifications for different events in addition to already present visual ones, and such.</li>
</ul>

And, maybe the last change, the broadcast notifications, should be better explained.

Previously, all entities in inter-modular LeechCraft bus were not broadcast, and the first plugin that accepted an entity was fed with that entity, and the processing stopped after that. Now, if the entity is not a delegation request and there are no downloaders that are ready to accept that entity, the entity is fed to all the plugins that accepted it, not the first one.

Taking the user notifications example, previously, only visual notifications plugin or audio notifications plugin (assuming the latter is present) could handle the entity, but not both. You would either get sound or get a nice popup, but you could never get them at once. Now, the corresponding entity is fed to both of these plugins, so it is possible to have to a visual notification and hear a sound simultaneously from the same event.

There is also a small downside of this change. Previously, if two different visual notifications plugins were used, like, libnotify one and Kinotify, only the first one was used. Now, you would get notifications through both libnotify and Kinotify, unless you explicitly disable one of them (or unless your system doesn't support libnotify).","Last week or so something great has happened: EiskaltDC++ is now working again in LeechCraft, thanks Negativ, the author and main developer of EiskaltDC++, for porting it to the new LeechCraft's tabs system. And, of course, despite finals, there are some other changes. So, a bit more detailed list follows:
<ul>
<li>EiskaltDC++ was synced with upstream (new features and bugfixes!) and adapted to the new LeechCraft tabs system introduced a month ago or so <em>(thanks Negativ)</em>.</li>
<li>Support for recursive Service Discovery in Azoth Xoox.</li>
<li>Azoth Xoox now supports registering on gateways to other protocols, and, of course, working with the gateways.</li>
<li>Kinotify plugin supports links in notifications and opens them as it should.</li>
<li>Aggregator finally saves columns width <em>(thanks Akon32)</em>.</li>
<li>And, once again, one more user-invisible change. Core changed a bit semantics of notifications handling. Now notifications are really broadcast. This enables us to implement things like audio notifications for different events in addition to already present visual ones, and such.</li>
</ul>

And, maybe the last change, the broadcast notifications, should be better explained.

Previously, all entities in inter-modular LeechCraft bus were not broadcast, and the first plugin that accepted an entity was fed with that entity, and the processing stopped after that. Now, if the entity is not a delegation request and there are no downloaders that are ready to accept that entity, the entity is fed to all the plugins that accepted it, not the first one.

Taking the user notifications example, previously, only visual notifications plugin or audio notifications plugin (assuming the latter is present) could handle the entity, but not both. You would either get sound or get a nice popup, but you could never get them at once. Now, the corresponding entity is fed to both of these plugins, so it is possible to have to a visual notification and hear a sound simultaneously from the same event.

There is also a small downside of this change. Previously, if two different visual notifications plugins were used, like, libnotify one and Kinotify, only the first one was used. Now, you would get notifications through both libnotify and Kinotify, unless you explicitly disable one of them (or unless your system doesn't support libnotify)."
138,story,LeechCraft 0.4.75 is released,1328777132,leechcraft-0.4.75-is-released,"Today is our next milestone release, the 0.4.75, ""Focus Shall Not Fail"".

This release incorporates a great change: EiskaltDC++, an awesome Direct Connect and Advanced Direct Connect client, now serves as LeechCraft plugin. So, LeechCraft can now download stuff via NMDC and ADC in addition to BitTorrent (and HTTP, of course).

Azoth, our IM client, has also been improved a lot. Its IRC implementation, the Acetamide plugin, is completely reworked and now supports RFC 2812 among new features.

[img_assist|nid=139|title=MUC in Azoth|desc=|link=popup|width=440|height=272]

XMPP protocol now also supports more things, like bookmarks (with autojoin), password-protected rooms, configuring MUC rooms, service discovery and gateways. Roster is a bit fancier now, especially in MUCs, and supports groupless mode. URIs for joining MUCs and such are handled now as well. And, support for chat state notifications is also added, so now one would see when a remote user is typing. These notifications are also sent to remote users, but for privacy-concerned users this could be disabled in settings, of course.

[img_assist|nid=141|title=Service Discovery|desc=|link=popup|width=440|height=272]

Some funny bugs have been fixed in Azoth. For example, one of them prevented Azoth from handling messages that had been received while the user was offline. The other caused Azoth Xoox to request all the VCards of all the VCard-less users right after coming online, which effectively halted the connection.

Various other plugins for Azoth have also been improved. Support for Psi+ and Kopete emoticons packs is implemented in Azoth NativeEmoticons, for example. Support for the <em>psto.net</em> and <em>juick.com</em> microblogging services has been improved severely. A new plugin, Azoth HiLi, allows to configure custom highlights in chat rooms.

[img_assist|nid=140|title=Juick in Azoth|desc=|link=popup|width=440|height=272]

Kinotify now supports showing a custom picture in the notification, so, for example, if an IM contact has sent you a message, the avatar of that contact (if any) would be displayed instead of standard pixmap.

We've also started developing a new plugin for Poshuku, FatApe, for supporting GreaseMonkey userscripts in our browser. It already works and supports almost whole API of original GreaseMonkey, but there is still no GUI for managing userscripts, so they should be placed manually into the <code type=""bash"">~/.leechcraft/data/poshuku/fatape/scripts</code> directory.

A new plugin (except EiskaltDC++, of course) has been introduced, the GMail Notifier, which, as the name states, notifies about new mail in GMail inboxes.

LeechCraft has also moved to the new tabs system, which was originally planned for the 0.6 series. Now, the exact tab that one wants would open most of the times when hitting <code>Ctrl+T</code>.

Of course, there are more small improvements and fixes here or there, but describing them all in this release announce would render it completely incomprehensible.

And, sad but true, our good old Chatter plugin has been removed in favour of Azoth Acetamide, since Chatter is unmaintained.

If you are really curious, you can view our development digests related to this milestone here: [130: #1], [132: #2] and [136: #3]. If you are even more curious, you could view the output of <code type=""bash"">git log 0.4.70..0.4.75</code>. Beware: it's almost 600 commits there.

Packages are already available for Ubuntu Lucid, Maverick and Natty (<code>ppa:0xd34df00d/leechcraft</code>, as always), and Gentoo ebuilds are also available (in the <code>rion</code> overlay). Packages for Fedora, OpenSUSE are in progress, as well as Windows installer.

And, well, as you may have noticed, releases have names from now on.","Today is our next milestone release, the 0.4.75, ""Focus Shall Not Fail"".

This release incorporates a great change: EiskaltDC++, an awesome Direct Connect and Advanced Direct Connect client, now serves as LeechCraft plugin. So, LeechCraft can now download stuff via NMDC and ADC in addition to BitTorrent (and HTTP, of course).

Azoth, our IM client, has also been improved a lot. Its IRC implementation, the Acetamide plugin, is completely reworked and now supports RFC 2812 among new features.

[img_assist|nid=139|title=MUC in Azoth|desc=|link=popup|width=440|height=272]

XMPP protocol now also supports more things, like bookmarks (with autojoin), password-protected rooms, configuring MUC rooms, service discovery and gateways. Roster is a bit fancier now, especially in MUCs, and supports groupless mode. URIs for joining MUCs and such are handled now as well. And, support for chat state notifications is also added, so now one would see when a remote user is typing. These notifications are also sent to remote users, but for privacy-concerned users this could be disabled in settings, of course.

[img_assist|nid=141|title=Service Discovery|desc=|link=popup|width=440|height=272]

Some funny bugs have been fixed in Azoth. For example, one of them prevented Azoth from handling messages that had been received while the user was offline. The other caused Azoth Xoox to request all the VCards of all the VCard-less users right after coming online, which effectively halted the connection.

Various other plugins for Azoth have also been improved. Support for Psi+ and Kopete emoticons packs is implemented in Azoth NativeEmoticons, for example. Support for the <em>psto.net</em> and <em>juick.com</em> microblogging services has been improved severely. A new plugin, Azoth HiLi, allows to configure custom highlights in chat rooms.

[img_assist|nid=140|title=Juick in Azoth|desc=|link=popup|width=440|height=272]

Kinotify now supports showing a custom picture in the notification, so, for example, if an IM contact has sent you a message, the avatar of that contact (if any) would be displayed instead of standard pixmap.

We've also started developing a new plugin for Poshuku, FatApe, for supporting GreaseMonkey userscripts in our browser. It already works and supports almost whole API of original GreaseMonkey, but there is still no GUI for managing userscripts, so they should be placed manually into the <code type=""bash"">~/.leechcraft/data/poshuku/fatape/scripts</code> directory.

A new plugin (except EiskaltDC++, of course) has been introduced, the GMail Notifier, which, as the name states, notifies about new mail in GMail inboxes.

LeechCraft has also moved to the new tabs system, which was originally planned for the 0.6 series. Now, the exact tab that one wants would open most of the times when hitting <code>Ctrl+T</code>.

Of course, there are more small improvements and fixes here or there, but describing them all in this release announce would render it completely incomprehensible.

And, sad but true, our good old Chatter plugin has been removed in favour of Azoth Acetamide, since Chatter is unmaintained.

If you are really curious, you can view our development digests related to this milestone here: [130: #1], [132: #2] and [136: #3]. If you are even more curious, you could view the output of <code type=""bash"">git log 0.4.70..0.4.75</code>. Beware: it's almost 600 commits there.

Packages are already available for Ubuntu Lucid, Maverick and Natty (<code>ppa:0xd34df00d/leechcraft</code>, as always), and Gentoo ebuilds are also available (in the <code>rion</code> overlay). Packages for Fedora, OpenSUSE are in progress, as well as Windows installer.

And, well, as you may have noticed, releases have names from now on."
139,image,Jabber conference in Azoth,1347817735,,A Jabber conference opened in Azoth IM.,A Jabber conference opened in Azoth IM.
140,image,Psto session in Azoth,1321473881,,A chat session with the Psto microblogging service opened in Azoth. Psto plugin with coloring and other handy features is demonstrated here.,A chat session with the Psto microblogging service opened in Azoth. Psto plugin with coloring and other handy features is demonstrated here.
141,image,Service discovery in Azoth,1347818251,,Azoth demonstrating its Service Discovery features.,Azoth demonstrating its Service Discovery features.
143,page,Azoth,1406498911,plugins-azoth,"[img_assist|nid=139|title=MUC|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=249|title=MUC with Adium style|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=141|title=Service Discovery|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=162|title=Psto in Azoth|desc=|link=popup|align=right|width=220|height=136]

Azoth is the modular IM client for LeechCraft.

Totally in the spirit of LeechCraft, Azoth is modular itself. For example, protocols are provided by corresponding plugins, so Azoth is a multiprotocol client as well. Modularity also allows Azoth to be flexible, extensible and enables the modules to use each other and avoid code and functionality duplication.

Unlike other multiprotocol clients which tend to implement only those features that are present in all the protocols, Azoth is modelled after the XMPP protocol, aiming to provide extensive and full support for XMPP while remaining usable for other protocols.

<h3>Protocols</h3>

Azoth supports the following protocols (links point to the pages of corresponding modules):
<ul>
<li>[145: IRC].</li>
<li>[295: Mail.Ru Agent].</li>
<li>[294: Windows Live Messenger] (former MSN).</li>
<li>[144: XMPP].</li>
<li>[472: VKontakte].</li>
<li>[453: Eveyrthing from libpurple].</li>
<li>[315: Everything from Telepathy].</li>
</ul>

<h3>Key features</h3>
<ul>
<li>Multiple accounts.</li>
<li>Metacontacts.</li>
<li>Server history.</li>
<li>Nested groups that are handled as tags for contacts.</li>
<li>File transfers.</li>
<li>Audio calls.</li>
<li>Rich text messages.</li>
<li>Extended statuses: current mood, tune, activity.</li>
<li>Full support for multiuser chatrooms.</li>
<li>Bookmarks and history of visited conferences.</li>
<li>Invites to conferences.</li>
<li>Handling URIs for joining multiuser chatrooms, adding items to contact list and such.</li>
<li>Different emoticons packs and animated smiles.</li>
<li>Notifications about chat state participation.</li>
<li>Group message delivery.</li>
<li>In-band registration.</li>
<li>Delivery notifications.</li>
<li>Attention requests.</li>
<li>Service discovery.</li>
<li>PGP-encrypted messaging.</li>
<li><a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">OTR</a>.</li>
<li>Support for exchanging contacts.</li>
<li>Support for search.</li>
<li>Optional groupless contact list mode.</li>
<li>Image sending via [529: data filter] plugins.</li>
</ul>

Please note that some of these features depend on the underlying protocol implementation.

<h3>Other plugins</h3>
<ul>
<li>[196: AdiumStyles] for supporting Adium styles.</li>
<li>Autoidle for autochanging status due to inactivity timeout.</li>
<li>Autopaste for automatic pasting of long texts to pastebins instead of chat sessions.</li>
<li>[163: ChatHistory] for, well, storing logs of chats.</li>
<li>Depester for ignoring specific multiuser chatrooms participants.</li>
<li>EmbedMedia for showing media objects like flash videos or images directly in the chat window.</li>
<li>Herbicide, a basic antispam plugin.</li>
<li>HiLi for customizing highlight settings in conferences.</li>
<li>Juick for enhanced experience with the <a href=""http://juick.com"">juick.com</a> microblogging service.</li>
<li>LastSeen for recording contacts' last online and availability time on client side.</li>
<li>[214: Metacontacts] for supporting metacontacts.</li>
<li>[191: Modnok] for inline displaying LaTeX formulae.</li>
<li>[618: MuCommands] for IRC-style commands.</li>
<li>NativeEmoticons for supporting emoticons packs in Psi+, Kopete and own format.</li>
<li>[616: OTRoid] for supporting <a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">Off-the-Record messaging</a>.</li>
<li>Rosenthal for spellchecking based on plugins like root-level [559: Rosenthal].</li>
<li>StandardStyles for basic styling support.</li>
<li>Xtazy for publishing currently playing tune.</li>
</ul>","[img_assist|nid=139|title=MUC|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=249|title=MUC with Adium style|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=141|title=Service Discovery|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=162|title=Psto in Azoth|desc=|link=popup|align=right|width=220|height=136]

Azoth is the modular IM client for LeechCraft.

Totally in the spirit of LeechCraft, Azoth is modular itself. For example, protocols are provided by corresponding plugins, so Azoth is a multiprotocol client as well. Modularity also allows Azoth to be flexible, extensible and enables the modules to use each other and avoid code and functionality duplication.

Unlike other multiprotocol clients which tend to implement only those features that are present in all the protocols, Azoth is modelled after the XMPP protocol, aiming to provide extensive and full support for XMPP while remaining usable for other protocols.

<h3>Protocols</h3>

Azoth supports the following protocols (links point to the pages of corresponding modules):
<ul>
<li>[145: IRC].</li>
<li>[295: Mail.Ru Agent].</li>
<li>[294: Windows Live Messenger] (former MSN).</li>
<li>[144: XMPP].</li>
<li>[472: VKontakte].</li>
<li>[453: Eveyrthing from libpurple].</li>
<li>[315: Everything from Telepathy].</li>
</ul>

<h3>Key features</h3>
<ul>
<li>Multiple accounts.</li>
<li>Metacontacts.</li>
<li>Server history.</li>
<li>Nested groups that are handled as tags for contacts.</li>
<li>File transfers.</li>
<li>Audio calls.</li>
<li>Rich text messages.</li>
<li>Extended statuses: current mood, tune, activity.</li>
<li>Full support for multiuser chatrooms.</li>
<li>Bookmarks and history of visited conferences.</li>
<li>Invites to conferences.</li>
<li>Handling URIs for joining multiuser chatrooms, adding items to contact list and such.</li>
<li>Different emoticons packs and animated smiles.</li>
<li>Notifications about chat state participation.</li>
<li>Group message delivery.</li>
<li>In-band registration.</li>
<li>Delivery notifications.</li>
<li>Attention requests.</li>
<li>Service discovery.</li>
<li>PGP-encrypted messaging.</li>
<li><a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">OTR</a>.</li>
<li>Support for exchanging contacts.</li>
<li>Support for search.</li>
<li>Optional groupless contact list mode.</li>
<li>Image sending via [529: data filter] plugins.</li>
</ul>

Please note that some of these features depend on the underlying protocol implementation.

<h3>Other plugins</h3>
<ul>
<li>[196: AdiumStyles] for supporting Adium styles.</li>
<li>Autoidle for autochanging status due to inactivity timeout.</li>
<li>Autopaste for automatic pasting of long texts to pastebins instead of chat sessions.</li>
<li>[163: ChatHistory] for, well, storing logs of chats.</li>
<li>Depester for ignoring specific multiuser chatrooms participants.</li>
<li>EmbedMedia for showing media objects like flash videos or images directly in the chat window.</li>
<li>Herbicide, a basic antispam plugin.</li>
<li>HiLi for customizing highlight settings in conferences.</li>
<li>Juick for enhanced experience with the <a href=""http://juick.com"">juick.com</a> microblogging service.</li>
<li>LastSeen for recording contacts' last online and availability time on client side.</li>
<li>[214: Metacontacts] for supporting metacontacts.</li>
<li>[191: Modnok] for inline displaying LaTeX formulae.</li>
<li>[618: MuCommands] for IRC-style commands.</li>
<li>NativeEmoticons for supporting emoticons packs in Psi+, Kopete and own format.</li>
<li>[616: OTRoid] for supporting <a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">Off-the-Record messaging</a>.</li>
<li>Rosenthal for spellchecking based on plugins like root-level [559: Rosenthal].</li>
<li>StandardStyles for basic styling support.</li>
<li>Xtazy for publishing currently playing tune.</li>
</ul>"
144,page,Azoth Xoox,1435704528,plugins-azoth-xoox,"Azoth Xoox provides support for the XMPP protocol in Azoth.

Xoox is based on the <a href=""https://github.com/qxmpp-project/qxmpp"">QXmpp</a> library.

<h3>Feature highlights</h3>

<ul>
<li>Media calls support (Jingle).</li>
<li>Support for PEP and current user activity, mood, tune and location.</li>
<li>Bookmarks with autojoin support.</li>
<li>Full support for MUCs.</li>
<li>Support for messages with HTML content.</li>
<li>Notifications about chat state participation.</li>
<li>Service discovery support.</li>
<li>Gateway support, with registration.</li>
<li>Support for various file transfer methods.</li>
<li>In-band registration of accounts (right from the client).</li>
<li>Privacy lists.</li>
<li>Encrypted and signed messages and presences.</li>
<li>Full CAPTCHA support.</li>
<li>Support for ad-hoc commands.</li>
<li>Support for exchanging roster items.</li>
<li>Search for contacts in Jabber.</li>
</ul>

<h3>XEPs matrix</h3>

This table summarizes the status of different XEPs in Azoth Xoox.

<style type=""text/css"">
.xepm, .xepm tr, .xepm td { border:1px solid #000; }
.splan { background-color: #FF5858; }
.sinprog { background-color: #FFE958; }
.sdone { background-color: #2ED52E; }
</style>

<table class=""xepm"" style=""width:85%;"">
<thead><tr>
 <th width=""35%"">XEP</th><th width=""65%"">Notes</th>
</tr></thead>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0004.html"">XEP-0004</a>: Data Forms</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0012.html"">XEP-0012</a>: Last Activity</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0016.html"">XEP-0016</a>: Privacy Lists</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a>: Current Jabber OpenPGP Usage</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0030.html"">XEP-0030</a>: Service Discovery</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0045.html"">XEP-0045</a>: Multi-User Chat</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0047.html"">XEP-0047</a>: In-Band Bytestreams</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0048.html"">XEP-0048</a>: Bookmarks</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0050.html"">XEP-0050</a>: Ad-Hoc Commands</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0054.html"">XEP-0054</a>: vcard-temp</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0055.html"">XEP-0055</a>: Jabber Search</td><td></td>
</tr>
<tr>
 <td class=""sinprog""><a href=""http://xmpp.org/extensions/xep-0060.html"">XEP-0060</a>: Publish-Subscribe</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0065.html"">XEP-0065</a>: SOCKS5 Bytestreams</a></td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0071.html"">XEP-0071</a>: XHTML-IM</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0077.html"">XEP-0077</a>: In-Band Registration</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0078.html"">XEP-0078</a>: Non-SASL Authentication</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0080.html"">XEP-0080</a>: User Location</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0082.html"">XEP-0082</a>: XMPP Date and Time Profiles</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0083.html"">XEP-0083</a>: Nested Roster Groups</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0084.html"">XEP-0084</a>: User Avatar</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0085.html"">XEP-0085</a>: Chat State Notifications</td><td>Clients with old entity caps XEP don't send these notifications to Azoth.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0090.html"">XEP-0090</a>: Legacy Entity Time</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0091.html"">XEP-0091</a>: Legacy Delayed Delivery</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0092.html"">XEP-0092</a>: Software Version</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0095.html"">XEP-0095</a>: Stream Initiation</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0096.html"">XEP-0096</a>: SI File Transfer</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0100.html"">XEP-0100</a>: Gateway Interaction</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0106.html"">XEP-0106</a>: JID Escaping</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0107.html"">XEP-0107</a>: User Mood</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0108.html"">XEP-0108</a>: User Activity</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0115.html"">XEP-0115</a>: Entity Capabilities</td><td>Versions of this XEP prior to 1.4 aren't supported.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0118.html"">XEP-0118</a>: User Tune</td><td></td>
</tr>
<tr>
 <td class=""splan""><a href=""http://xmpp.org/extensions/xep-0122.html"">XEP-0122</a>: Data Forms Validation</td><td></td>
</tr>
<tr>
 <td class=""splan""><a href=""http://xmpp.org/extensions/xep-0126.html"">XEP-0126</a>: Invisibility</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0128.html"">XEP-0128</a>: Service Discovery Extensions</td><td></td>
</tr>
<tr>
 <td class=""sinprog""><a href=""http://xmpp.org/extensions/xep-0136.html"">XEP-0136</a>: Message Archiving</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0138.html"">XEP-0138</a>: Stream Compression</td><td></td>
</tr>
<tr>
 <td class=""splan""><a href=""http://xmpp.org/extensions/xep-0141.html"">XEP-0141</a>: Data Forms Layout </td><td>Allows to group data fields together.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0144.html"">XEP-0144</a>: Roster Item Exchange</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0145.html"">XEP-0145</a>: Annotations</td><td>Allows to add notes to contacts.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0146.html"">XEP-0146</a>: Remote Controlling Clients</td><td>Allows to control the client remotely, for example, for fetching unread messages.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0147.html"">XEP-0147</a>: XMPP URI Scheme Query Components</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0153.html"">XEP-0153</a>: vCard-Based Avatars</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0158.html"">XEP-0158</a>: CAPTCHA Forms</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0163.html"">XEP-0163</a>: Personal Eventing Protocol</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0166.html"">XEP-0166</a>: Jingle</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0167.html"">XEP-0167</a>: Jingle RTP Sessions</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0176.html"">XEP-0176</a>: Jingle ICE-UDP Transport Method</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0184.html"">XEP-0184</a>: Message Delivery Receipts</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0199.html"">XEP-0199</a>: XMPP Ping</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0202.html"">XEP-0202</a>: Entity Time</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0203.html"">XEP-0203</a>: Delayed Delivery</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0221.html"">XEP-0221</a>: Data Forms Media Element</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0224.html"">XEP-0224</a>: Attention</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0231.html"">XEP-0231</a>: Bits of Binary</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0232.html"">XEP-0232</a>: Software Information</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0245.html"">XEP-0245</a>: The /me command</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0249.html"">XEP-0249</a>: Direct MUC Invitations</td><td></td>
</tr>
<tr>
 <td class=""sinprog""><a href=""http://xmpp.org/extensions/xep-0277.html"">XEP-0277</a>: Microblogging over XMPP</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-280.html"">XEP-0280</a>: Message Carbons</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-313.html"">XEP-0313</a>: Message Archive Management</td><td></td>
</tr>
</table>

The colors match these statuses:
<table class=""xepm"" style=""width: 300px;"">
<tr><td class=""splan"" width=""33%"">Planning</td><td class=""sinprog"" width=""33%"">In progress</td><td class=""sdone"" width=""33%"">Done</td></tr>
</table>","Azoth Xoox provides support for the XMPP protocol in Azoth.

Xoox is based on the <a href=""https://github.com/qxmpp-project/qxmpp"">QXmpp</a> library.

<h3>Feature highlights</h3>

<ul>
<li>Media calls support (Jingle).</li>
<li>Support for PEP and current user activity, mood, tune and location.</li>
<li>Bookmarks with autojoin support.</li>
<li>Full support for MUCs.</li>
<li>Support for messages with HTML content.</li>
<li>Notifications about chat state participation.</li>
<li>Service discovery support.</li>
<li>Gateway support, with registration.</li>
<li>Support for various file transfer methods.</li>
<li>In-band registration of accounts (right from the client).</li>
<li>Privacy lists.</li>
<li>Encrypted and signed messages and presences.</li>
<li>Full CAPTCHA support.</li>
<li>Support for ad-hoc commands.</li>
<li>Support for exchanging roster items.</li>
<li>Search for contacts in Jabber.</li>
</ul>

<h3>XEPs matrix</h3>

This table summarizes the status of different XEPs in Azoth Xoox.

<style type=""text/css"">
.xepm, .xepm tr, .xepm td { border:1px solid #000; }
.splan { background-color: #FF5858; }
.sinprog { background-color: #FFE958; }
.sdone { background-color: #2ED52E; }
</style>

<table class=""xepm"" style=""width:85%;"">
<thead><tr>
 <th width=""35%"">XEP</th><th width=""65%"">Notes</th>
</tr></thead>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0004.html"">XEP-0004</a>: Data Forms</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0012.html"">XEP-0012</a>: Last Activity</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0016.html"">XEP-0016</a>: Privacy Lists</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a>: Current Jabber OpenPGP Usage</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0030.html"">XEP-0030</a>: Service Discovery</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0045.html"">XEP-0045</a>: Multi-User Chat</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0047.html"">XEP-0047</a>: In-Band Bytestreams</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0048.html"">XEP-0048</a>: Bookmarks</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0050.html"">XEP-0050</a>: Ad-Hoc Commands</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0054.html"">XEP-0054</a>: vcard-temp</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0055.html"">XEP-0055</a>: Jabber Search</td><td></td>
</tr>
<tr>
 <td class=""sinprog""><a href=""http://xmpp.org/extensions/xep-0060.html"">XEP-0060</a>: Publish-Subscribe</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0065.html"">XEP-0065</a>: SOCKS5 Bytestreams</a></td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0071.html"">XEP-0071</a>: XHTML-IM</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0077.html"">XEP-0077</a>: In-Band Registration</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0078.html"">XEP-0078</a>: Non-SASL Authentication</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0080.html"">XEP-0080</a>: User Location</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0082.html"">XEP-0082</a>: XMPP Date and Time Profiles</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0083.html"">XEP-0083</a>: Nested Roster Groups</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0084.html"">XEP-0084</a>: User Avatar</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0085.html"">XEP-0085</a>: Chat State Notifications</td><td>Clients with old entity caps XEP don't send these notifications to Azoth.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0090.html"">XEP-0090</a>: Legacy Entity Time</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0091.html"">XEP-0091</a>: Legacy Delayed Delivery</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0092.html"">XEP-0092</a>: Software Version</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0095.html"">XEP-0095</a>: Stream Initiation</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0096.html"">XEP-0096</a>: SI File Transfer</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0100.html"">XEP-0100</a>: Gateway Interaction</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0106.html"">XEP-0106</a>: JID Escaping</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0107.html"">XEP-0107</a>: User Mood</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0108.html"">XEP-0108</a>: User Activity</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0115.html"">XEP-0115</a>: Entity Capabilities</td><td>Versions of this XEP prior to 1.4 aren't supported.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0118.html"">XEP-0118</a>: User Tune</td><td></td>
</tr>
<tr>
 <td class=""splan""><a href=""http://xmpp.org/extensions/xep-0122.html"">XEP-0122</a>: Data Forms Validation</td><td></td>
</tr>
<tr>
 <td class=""splan""><a href=""http://xmpp.org/extensions/xep-0126.html"">XEP-0126</a>: Invisibility</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0128.html"">XEP-0128</a>: Service Discovery Extensions</td><td></td>
</tr>
<tr>
 <td class=""sinprog""><a href=""http://xmpp.org/extensions/xep-0136.html"">XEP-0136</a>: Message Archiving</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0138.html"">XEP-0138</a>: Stream Compression</td><td></td>
</tr>
<tr>
 <td class=""splan""><a href=""http://xmpp.org/extensions/xep-0141.html"">XEP-0141</a>: Data Forms Layout </td><td>Allows to group data fields together.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0144.html"">XEP-0144</a>: Roster Item Exchange</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0145.html"">XEP-0145</a>: Annotations</td><td>Allows to add notes to contacts.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0146.html"">XEP-0146</a>: Remote Controlling Clients</td><td>Allows to control the client remotely, for example, for fetching unread messages.</td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0147.html"">XEP-0147</a>: XMPP URI Scheme Query Components</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0153.html"">XEP-0153</a>: vCard-Based Avatars</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0158.html"">XEP-0158</a>: CAPTCHA Forms</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0163.html"">XEP-0163</a>: Personal Eventing Protocol</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0166.html"">XEP-0166</a>: Jingle</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0167.html"">XEP-0167</a>: Jingle RTP Sessions</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0176.html"">XEP-0176</a>: Jingle ICE-UDP Transport Method</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0184.html"">XEP-0184</a>: Message Delivery Receipts</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0199.html"">XEP-0199</a>: XMPP Ping</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0202.html"">XEP-0202</a>: Entity Time</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0203.html"">XEP-0203</a>: Delayed Delivery</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0221.html"">XEP-0221</a>: Data Forms Media Element</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0224.html"">XEP-0224</a>: Attention</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0231.html"">XEP-0231</a>: Bits of Binary</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0232.html"">XEP-0232</a>: Software Information</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0245.html"">XEP-0245</a>: The /me command</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-0249.html"">XEP-0249</a>: Direct MUC Invitations</td><td></td>
</tr>
<tr>
 <td class=""sinprog""><a href=""http://xmpp.org/extensions/xep-0277.html"">XEP-0277</a>: Microblogging over XMPP</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-280.html"">XEP-0280</a>: Message Carbons</td><td></td>
</tr>
<tr>
 <td class=""sdone""><a href=""http://xmpp.org/extensions/xep-313.html"">XEP-0313</a>: Message Archive Management</td><td></td>
</tr>
</table>

The colors match these statuses:
<table class=""xepm"" style=""width: 300px;"">
<tr><td class=""splan"" width=""33%"">Planning</td><td class=""sinprog"" width=""33%"">In progress</td><td class=""sdone"" width=""33%"">Done</td></tr>
</table>"
145,page,Azoth Acetamide,1367148376,plugins-azoth-acetamide,"Azoth Acetamide provides support for the IRC protocol in Azoth.

<h2>Features</h2>
<ul>
<li>Bookmarks.</li>
<li>SSL connections.</li>
<li>Autoidentify.</li>
<li>CTCP support.</li>
<li>Channel management.</li>
<li>Listing channels on a server.</li>
</ul>","Azoth Acetamide provides support for the IRC protocol in Azoth.

<h2>Features</h2>
<ul>
<li>Bookmarks.</li>
<li>SSL connections.</li>
<li>Autoidentify.</li>
<li>CTCP support.</li>
<li>Channel management.</li>
<li>Listing channels on a server.</li>
</ul>"
146,story,Development digest #4,1307651484,devel-digest-4,"This week we mostly focused on Azoth and packaging for RPM distros (and we got included into OpenSUSE as consequence, but that's [148: another story]). So, without any more intro words, let's get to major changes:

<ul>
<li>Azoth Xoox now supports following XEPs:
<ul>
<li><a href=""http://xmpp.org/extensions/xep-0184.html"">XEP-0184</a>: Message Delivery Receipts</li>
<li><a href=""http://xmpp.org/extensions/xep-0221.html"">XEP-0221</a>: Data Forms Media Element <em>(thanks generatorglukoff)</em>.</li>
<li><a href=""http://xmpp.org/extensions/xep-0224.html"">XEP-0224</a>: Attention</li>
</ul></li>
<li>Work on <a href=""http://xmpp.org/extensions/xep-0158.html"">XEP-0158</a>: Data Forms has also begun.</li>
<li>Azoth supports drawing attention and notifing about attention requests from other contacts.</li>
<li>Azoth now also supports visual notifications (in the chat window) about message receipts.</li>
<li>Default altenative nick for MUC conflicts has been added in Azoth Xoox.</li>
<li>Azoth now supports zooming the chat window by Ctrl+Wheel.</li>
<li>BitTorrent plugin now has a nicer torrent removal dialog <em>(thanks Akon32)</em>.</li>
<li>Contact list now has a separate mode, where only participants of current MUC are shown.</li>
</ul>","This week we mostly focused on Azoth and packaging for RPM distros (and we got included into OpenSUSE as consequence, but that's [148: another story]). So, without any more intro words, let's get to major changes:

<ul>
<li>Azoth Xoox now supports following XEPs:
<ul>
<li><a href=""http://xmpp.org/extensions/xep-0184.html"">XEP-0184</a>: Message Delivery Receipts</li>
<li><a href=""http://xmpp.org/extensions/xep-0221.html"">XEP-0221</a>: Data Forms Media Element <em>(thanks generatorglukoff)</em>.</li>
<li><a href=""http://xmpp.org/extensions/xep-0224.html"">XEP-0224</a>: Attention</li>
</ul></li>
<li>Work on <a href=""http://xmpp.org/extensions/xep-0158.html"">XEP-0158</a>: Data Forms has also begun.</li>
<li>Azoth supports drawing attention and notifing about attention requests from other contacts.</li>
<li>Azoth now also supports visual notifications (in the chat window) about message receipts.</li>
<li>Default altenative nick for MUC conflicts has been added in Azoth Xoox.</li>
<li>Azoth now supports zooming the chat window by Ctrl+Wheel.</li>
<li>BitTorrent plugin now has a nicer torrent removal dialog <em>(thanks Akon32)</em>.</li>
<li>Contact list now has a separate mode, where only participants of current MUC are shown.</li>
</ul>"
147,page,Our team,1378142178,our-team,"These people made LeechCraft possible:

<style type=""text/css"">
.authors dt { font-weight: bold; }
</style>

<h2>Authors</h2>

<dl class=""authors"">
<dt>Georg Rudoy aka 0xd34df00d</dt><dd>Email: <a href=""mailto:0xd34df00d@gmail.com"">0xd34df00d@gmail.com</a><ul><li>Lead developer and original author.</li></ul>Years: 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013</dd>
<dt>Oleg Linkin aka magog</dt><dd>Email: <a href=""mailto:MaledictusDeMagog@gmail.com"">MaledictusDeMagog@gmail.com</a><ul><li>Blogique module.</li><li>Azoth Acetamide: IRC support for Azoth.</li><li>Google Drive support in NetStoreManager module.</li><li>Poshuku OnlineBookmarks.</li><li>Firefox importer in New Life.</li><li>Chrome-style tabs.</li><li>Various patches.</li></ul>Years: 2010, 2011, 2012, 2013</dd>
</dl>

<h2>Contributors</h2>

<dl class=""authors"">
<dt>Akon32</dt><dd>Email: <a href=""mailto:akon32@rambler.ru"">akon32@rambler.ru</a><ul><li>SecMan SecureStorage.</li><li>Various patches.</li></ul>Years: 2011</dd>

<dt>Aleksey Frolov aka Aleks Lifey aka atommix</dt><dd>Email: <a href=""mailto:aleks.lifey@gmail.com"">aleks.lifey@gmail.com</a><ul><li>Initial PKGBUILDs for Arch Linux.</li></ul>Years: 2009</dd>

<dt>Aleksey Golovin aka rioky</dt><dd>Email: <a href=""mailto:nekolayer@yandex.ru"">nekolayer@yandex.ru</a><ul><li>openSUSE packages maintainer.</li></ul>Years: 2012</dd>

<dt>Alexander Batischev aka Minoru</dt><dd>Email: <a href=""mailto:eual.jp@gmail.com"">eual.jp@gmail.com</a><ul><li>Ukrainian translations.</li></ul>Years: 2011</dd>

<dt>Alia Eolova aka alieola</dt><dd>Email: <a href=""mailto:aeors-team@yandex.ru"">aeors-team@yandex.ru</a><ul><li>Spanish translations.</li></ul>Years: 2011, 2012</dd>

<dt>Azer Abdullaev aka Like-all</dt><dd>Email: <a href=""mailto:lik3a11@gmail.com"">lik3a11@gmail.com</a><ul><li>Shaitan plugin</li><li>Artwork.</li></ul>Years: 2011, 2012, 2013</dd>

<dt>Boris Pek aka Tehnick</dt><dd>Email: <a href=""mailto:tehnick-8@mail.ru"">tehnick-8@mail.ru</a><ul><li>Debian/Ubuntu maintainership.</li><li>Small fixes.</li></ul>Years: 2011, 2012, 2013</dd>

<dt>Dmitriy Perlow aka DA(P).DarkneSS</dt><dd>Email: <a href=""mailto:dap@open.by"">dap@open.by</a><ul><li>openSUSE maintainership.</li><li>Lackman packages.</li><li>Azoth user guide.</li></ul>Years: 2012, 2013</dd>

<dt>Dimitriy Ryazantcev aka DJm00n</dt><dd>Email: <a href=""mailto:dimitriy.ryazantcev@gmail.com"">dimitriy.ryazantcev@gmail.com</a><ul><li>Windows maintainership.</li><li>Windows fixes.</li></ul>Years: 2011, 2012, 2013</dd>

<dt>Elena Belova aka Zereal</dt><dd>Email: <a href=""mailto:zereal25@gmail.com"">zereal25@gmail.com</a><ul><li>French translations.</li><li>Italian translations.</li><li>Public relations.</li></ul>Years: 2011</dd>

<dt>Eugene Mamin aka DZhon</dt><dd>Email: <a href=""mailto:TheDZhon@gmail.com"">TheDZhon@gmail.com</a><ul><li>Microsoft Windows backend for Liznoo plugin.</li><li>Microsoft Windows builds.</li></ul>Years: 2011, 2012</dd>

<dt>ForNeVeR</dt><dd><ul><li>Maintainer for the Microsoft Windows.</li></ul>Years: 2009, 2010, 2011</dd>

<dt>Ignotus</dt><dd><ul><li>Improvements in Psto.net plugin for Azoth.</li><li>Laure plugin.</li><li>Last.FM Scrobbler plugin.</li><li>openSUSE package maintainer</li><li>Fedora package maintainer</li></ul>Years: 2011, 2012</dd>

<dt>lk4d4</dt><dd>Email: <a href=""mailto:lk4d4@yander.ru"">lk4d4@yander.ru</a><ul><li>Initial ebuilds for Gentoo Linux.</li></ul>Years: 2009</dd>

<dt>Maxim Kirenenko aka part1zan_ aka 0x73571ab</dt><dd>Email: <a href=""mailto:part1zancheg@gmail.com"">part1zancheg@gmail.com</a><ul><li>Extensive and thorough testing.</li></ul>Years: 2010, 2011</dd>

<dt>Mellon</dt><dd>Email: <a href=""mailto:qmellon@gmail.com"">qmellon@gmail.com</a><ul><li>Extensive and thorough testing.</li></ul>Years: 2012, 2013</dd>

<dt>Miha</dt><dd>Email: <a href=""mailto:miha@52.ru"">miha@52.ru</a><ul><li>OpenSUSE package maintainer.</li></ul>Years: 2009</dd>

<dt>nobodyzzz</dt><dd>Email: <a href=""mailto:nobodyzzz666@gmail.com"">nobodyzzz666@gmail.com</a><ul><li>Juick plugin.</li><li>FatApe plugin, the GreaseMonkey support layer for Poshuku.</li><li>Various patches.</li></ul>Years: 2011</dd>

<dt>PanteR</dt><dd>Email: <a href=""mailto:panter.dsd@gmail.com"">panter.dsd@gmail.com</a><ul><li>Various patches.</li></ul>Years: 2009, 2010</dd>

<dt>Pevzi</dt><dd>Email: <a href=""mailto:pevzi23@gmail.com"">pevzi23@gmail.com</a><ul><li>Graphical artwork.</li></ul>Years: 2009, 2010</dd>

<dt>Phx</dt><dd><ul><li>Arabic translations.</li></ul>Years: 2009, 2010</dd>

<dt>sejros</dt><dd>Email: <a href=""mailto:home@sejros.mp"">home@sejros.mp</a><ul><li>Esperanto translations</li></ul>Years: 2009</dd>

<dt>Sergey Kuzmin aka pendruk</dt><dd>Email: <a href=""mailto:pendruk@gmail.com"">pendruk@gmail.com</a><ul><li>Azoth theming.</li><li>Lackman packages.</li></ul>Years: 2012, 2013</dd>

<dt>V0id</dt><dd>Email: <a href=""mailto:getbusy@mail.ru"">getbusy@mail.ru</a><ul><li>Aggregator fixes and improvements.</li><li>Various patches.</li><li>Ukrainian translations.</li></ul>Years: 2008, 2009, 2010</dd>
</dl>","These people made LeechCraft possible:

<style type=""text/css"">
.authors dt { font-weight: bold; }
</style>

<h2>Authors</h2>

<dl class=""authors"">
<dt>Georg Rudoy aka 0xd34df00d</dt><dd>Email: <a href=""mailto:0xd34df00d@gmail.com"">0xd34df00d@gmail.com</a><ul><li>Lead developer and original author.</li></ul>Years: 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013</dd>
<dt>Oleg Linkin aka magog</dt><dd>Email: <a href=""mailto:MaledictusDeMagog@gmail.com"">MaledictusDeMagog@gmail.com</a><ul><li>Blogique module.</li><li>Azoth Acetamide: IRC support for Azoth.</li><li>Google Drive support in NetStoreManager module.</li><li>Poshuku OnlineBookmarks.</li><li>Firefox importer in New Life.</li><li>Chrome-style tabs.</li><li>Various patches.</li></ul>Years: 2010, 2011, 2012, 2013</dd>
</dl>

<h2>Contributors</h2>

<dl class=""authors"">
<dt>Akon32</dt><dd>Email: <a href=""mailto:akon32@rambler.ru"">akon32@rambler.ru</a><ul><li>SecMan SecureStorage.</li><li>Various patches.</li></ul>Years: 2011</dd>

<dt>Aleksey Frolov aka Aleks Lifey aka atommix</dt><dd>Email: <a href=""mailto:aleks.lifey@gmail.com"">aleks.lifey@gmail.com</a><ul><li>Initial PKGBUILDs for Arch Linux.</li></ul>Years: 2009</dd>

<dt>Aleksey Golovin aka rioky</dt><dd>Email: <a href=""mailto:nekolayer@yandex.ru"">nekolayer@yandex.ru</a><ul><li>openSUSE packages maintainer.</li></ul>Years: 2012</dd>

<dt>Alexander Batischev aka Minoru</dt><dd>Email: <a href=""mailto:eual.jp@gmail.com"">eual.jp@gmail.com</a><ul><li>Ukrainian translations.</li></ul>Years: 2011</dd>

<dt>Alia Eolova aka alieola</dt><dd>Email: <a href=""mailto:aeors-team@yandex.ru"">aeors-team@yandex.ru</a><ul><li>Spanish translations.</li></ul>Years: 2011, 2012</dd>

<dt>Azer Abdullaev aka Like-all</dt><dd>Email: <a href=""mailto:lik3a11@gmail.com"">lik3a11@gmail.com</a><ul><li>Shaitan plugin</li><li>Artwork.</li></ul>Years: 2011, 2012, 2013</dd>

<dt>Boris Pek aka Tehnick</dt><dd>Email: <a href=""mailto:tehnick-8@mail.ru"">tehnick-8@mail.ru</a><ul><li>Debian/Ubuntu maintainership.</li><li>Small fixes.</li></ul>Years: 2011, 2012, 2013</dd>

<dt>Dmitriy Perlow aka DA(P).DarkneSS</dt><dd>Email: <a href=""mailto:dap@open.by"">dap@open.by</a><ul><li>openSUSE maintainership.</li><li>Lackman packages.</li><li>Azoth user guide.</li></ul>Years: 2012, 2013</dd>

<dt>Dimitriy Ryazantcev aka DJm00n</dt><dd>Email: <a href=""mailto:dimitriy.ryazantcev@gmail.com"">dimitriy.ryazantcev@gmail.com</a><ul><li>Windows maintainership.</li><li>Windows fixes.</li></ul>Years: 2011, 2012, 2013</dd>

<dt>Elena Belova aka Zereal</dt><dd>Email: <a href=""mailto:zereal25@gmail.com"">zereal25@gmail.com</a><ul><li>French translations.</li><li>Italian translations.</li><li>Public relations.</li></ul>Years: 2011</dd>

<dt>Eugene Mamin aka DZhon</dt><dd>Email: <a href=""mailto:TheDZhon@gmail.com"">TheDZhon@gmail.com</a><ul><li>Microsoft Windows backend for Liznoo plugin.</li><li>Microsoft Windows builds.</li></ul>Years: 2011, 2012</dd>

<dt>ForNeVeR</dt><dd><ul><li>Maintainer for the Microsoft Windows.</li></ul>Years: 2009, 2010, 2011</dd>

<dt>Ignotus</dt><dd><ul><li>Improvements in Psto.net plugin for Azoth.</li><li>Laure plugin.</li><li>Last.FM Scrobbler plugin.</li><li>openSUSE package maintainer</li><li>Fedora package maintainer</li></ul>Years: 2011, 2012</dd>

<dt>lk4d4</dt><dd>Email: <a href=""mailto:lk4d4@yander.ru"">lk4d4@yander.ru</a><ul><li>Initial ebuilds for Gentoo Linux.</li></ul>Years: 2009</dd>

<dt>Maxim Kirenenko aka part1zan_ aka 0x73571ab</dt><dd>Email: <a href=""mailto:part1zancheg@gmail.com"">part1zancheg@gmail.com</a><ul><li>Extensive and thorough testing.</li></ul>Years: 2010, 2011</dd>

<dt>Mellon</dt><dd>Email: <a href=""mailto:qmellon@gmail.com"">qmellon@gmail.com</a><ul><li>Extensive and thorough testing.</li></ul>Years: 2012, 2013</dd>

<dt>Miha</dt><dd>Email: <a href=""mailto:miha@52.ru"">miha@52.ru</a><ul><li>OpenSUSE package maintainer.</li></ul>Years: 2009</dd>

<dt>nobodyzzz</dt><dd>Email: <a href=""mailto:nobodyzzz666@gmail.com"">nobodyzzz666@gmail.com</a><ul><li>Juick plugin.</li><li>FatApe plugin, the GreaseMonkey support layer for Poshuku.</li><li>Various patches.</li></ul>Years: 2011</dd>

<dt>PanteR</dt><dd>Email: <a href=""mailto:panter.dsd@gmail.com"">panter.dsd@gmail.com</a><ul><li>Various patches.</li></ul>Years: 2009, 2010</dd>

<dt>Pevzi</dt><dd>Email: <a href=""mailto:pevzi23@gmail.com"">pevzi23@gmail.com</a><ul><li>Graphical artwork.</li></ul>Years: 2009, 2010</dd>

<dt>Phx</dt><dd><ul><li>Arabic translations.</li></ul>Years: 2009, 2010</dd>

<dt>sejros</dt><dd>Email: <a href=""mailto:home@sejros.mp"">home@sejros.mp</a><ul><li>Esperanto translations</li></ul>Years: 2009</dd>

<dt>Sergey Kuzmin aka pendruk</dt><dd>Email: <a href=""mailto:pendruk@gmail.com"">pendruk@gmail.com</a><ul><li>Azoth theming.</li><li>Lackman packages.</li></ul>Years: 2012, 2013</dd>

<dt>V0id</dt><dd>Email: <a href=""mailto:getbusy@mail.ru"">getbusy@mail.ru</a><ul><li>Aggregator fixes and improvements.</li><li>Various patches.</li><li>Ukrainian translations.</li></ul>Years: 2008, 2009, 2010</dd>
</dl>"
148,story,LeechCraft in official OpenSUSE repos!,1307651034,leechcraft-in-official-opensuse-repos,"We are just extremely proud to announce that LeechCraft is accepted into official OpenSUSE repositories, which makes OpenSUSE the second distro having LC in main repos after Agilia Linux. Many thanks to <em>Ignotus</em>, who deals with all this RPM-packaging stuff.","We are just extremely proud to announce that LeechCraft is accepted into official OpenSUSE repositories, which makes OpenSUSE the second distro having LC in main repos after Agilia Linux. Many thanks to <em>Ignotus</em>, who deals with all this RPM-packaging stuff."
153,page,LackMan,1379195758,plugins-lackman,"LackMan is the LeechCraft Package Manager. It enables easy installation of script plugins, iconsets, additional data and other similar packages. It also supports dependencies between packages as well as versioning and automatic updates of the packages. LackMan works completely in userspace and is crossplatform by its nature.

[img_assist|nid=514|title=LackMan interface|desc=|link=popup|width=440]

<h3>Features</h3>

<ul>
<li>Allows installation of script plugins, icons, translations and various other data.</li>
<li>Supports versioning and automatic updates of packages.</li>
<li>Supports dependencies between packages.</li>
<li>Works entirely in userspace, operating in user's home directory.</li>
<li>Is a crossplatform package manager.</li>
</ul>","LackMan is the LeechCraft Package Manager. It enables easy installation of script plugins, iconsets, additional data and other similar packages. It also supports dependencies between packages as well as versioning and automatic updates of the packages. LackMan works completely in userspace and is crossplatform by its nature.

[img_assist|nid=514|title=LackMan interface|desc=|link=popup|width=440]

<h3>Features</h3>

<ul>
<li>Allows installation of script plugins, icons, translations and various other data.</li>
<li>Supports versioning and automatic updates of packages.</li>
<li>Supports dependencies between packages.</li>
<li>Works entirely in userspace, operating in user's home directory.</li>
<li>Is a crossplatform package manager.</li>
</ul>"
154,page,GMail Notifier,1308234242,plugins-gmailnotifier,"GMail Notifier provides notifications about new mail in your GMail inbox. It has configurable frequency of the updates and the number of last unread messages shown.

[img_assist|nid=156|title=Sample notification with the Kinotify plugin|desc=|link=popup|width=600]","GMail Notifier provides notifications about new mail in your GMail inbox. It has configurable frequency of the updates and the number of last unread messages shown.

[img_assist|nid=156|title=Sample notification with the Kinotify plugin|desc=|link=popup|width=600]"
155,page,Kinotify,1308234538,plugins-kinotify,"[img_assist|nid=156|title=GMail Notifier notification|desc=|link=popup|align=right|width=220]

[img_assist|nid=157|title=Azoth notification|desc=|link=popup|align=right|width=220]

Kinotify provides fancy kinetic notifications LeechCraft-wide. It supports notifications with HTML markup, notification actions (for example, ""Open chat"" action in a notification about incoming IM message) and is fully themable.

<h3>Features</h3>

<ul>
<li>Supports HTML markup.</li>
<li>Supports notification actions.</li>
<li>Themable.</li>
<li>Platform-independent.</li>
</ul>","[img_assist|nid=156|title=GMail Notifier notification|desc=|link=popup|align=right|width=220]

[img_assist|nid=157|title=Azoth notification|desc=|link=popup|align=right|width=220]

Kinotify provides fancy kinetic notifications LeechCraft-wide. It supports notifications with HTML markup, notification actions (for example, ""Open chat"" action in a notification about incoming IM message) and is fully themable.

<h3>Features</h3>

<ul>
<li>Supports HTML markup.</li>
<li>Supports notification actions.</li>
<li>Themable.</li>
<li>Platform-independent.</li>
</ul>"
156,image,GMail Notifier,1308182953,,[154: GMail Notifier] notification with the [155: Kinotify] plugin.,[154: GMail Notifier] notification with the [155: Kinotify] plugin.
157,image,MUC highlight notification,1308183397,,Notification about incoming message in the [143: Azoth] IM client as rendered by the [155: Kinotify] plugin.,Notification about incoming message in the [143: Azoth] IM client as rendered by the [155: Kinotify] plugin.
158,page,Popishu,1394092000,plugins-popishu,"[img_assist|nid=159|title=HTML source view|desc=|link=popup|align=right|width=220]

[img_assist|nid=160|title=TeX document|desc=|link=popup|align=right|width=220]

Popishu is a simple QScintilla2-based text editor. It supports basic syntax highlighting for some common file types, folding, automatic identation, and such. It also could be used as enhanced source view plugin for the [26: Poshuku] browser module, for example.

<h3>Features</h3>

<ul>
<li>Basic syntax highlighting.</li>
<li>Line folding.</li>
<li>Basic automatic identation.</li>
<li>Support for multiple documents at once.</li>
<li>Support for restoring closed tabs.</li>
</ul>","[img_assist|nid=159|title=HTML source view|desc=|link=popup|align=right|width=220]

[img_assist|nid=160|title=TeX document|desc=|link=popup|align=right|width=220]

Popishu is a simple QScintilla2-based text editor. It supports basic syntax highlighting for some common file types, folding, automatic identation, and such. It also could be used as enhanced source view plugin for the [26: Poshuku] browser module, for example.

<h3>Features</h3>

<ul>
<li>Basic syntax highlighting.</li>
<li>Line folding.</li>
<li>Basic automatic identation.</li>
<li>Support for multiple documents at once.</li>
<li>Support for restoring closed tabs.</li>
</ul>"
159,image,Page source view in Popishu,1321475227,,Source view of a HTML page from [26: Poshuku] browser in the [158: Popishu] text editor.,Source view of a HTML page from [26: Poshuku] browser in the [158: Popishu] text editor.
160,image,A TeX document in Popishu,1321474741,,"A TeX document edited in the [158: Popishu] text editor, illustrating basic syntax highlighting, code folding and such.","A TeX document edited in the [158: Popishu] text editor, illustrating basic syntax highlighting, code folding and such."
161,page,Azoth p100q,1308233132,plugins-azoth-p100q,"Azoth p100q enhances experience with the <a href=""http://psto.net"">psto.net</a> microblogging service. It allows to show users' avatars, highlights tags and psto numbers, and adds the ability, for instance, to quickly subscribe/unsubscribe/recommend a psto, or view messages by tags.

[img_assist|nid=162|title=Sample chat session|desc=|link=popup|width=440]","Azoth p100q enhances experience with the <a href=""http://psto.net"">psto.net</a> microblogging service. It allows to show users' avatars, highlights tags and psto numbers, and adds the ability, for instance, to quickly subscribe/unsubscribe/recommend a psto, or view messages by tags.

[img_assist|nid=162|title=Sample chat session|desc=|link=popup|width=440]"
162,image,Azoth p100q,1347816504,,Sample <em>psto.net</em> chat session with the [161: Azoth p100q] plugin enabled.,Sample <em>psto.net</em> chat session with the [161: Azoth p100q] plugin enabled.
163,page,Azoth ChatHistory,1404495360,plugins-azoth-chathistory,"[img_assist|nid=609|title=MUC chat|desc=|link=popup|align=right|width=220]

Azoth ChatHistory, as the name implies, stores the history of chat sessions. It supports storing history from normal one-to-one chats as well as from multiuser conferences and private chats in conferences. It also allows to search the logs by SQL's LIKE expressions.

SQLite is used for storage.

<h3>Features</h3>

<ul>
<li>Stores history from normal chats, multiuser conferences and private chats.</li>
<li>Supports searching logs.</li>
<li>SQLite-based.</li>
</ul>","[img_assist|nid=609|title=MUC chat|desc=|link=popup|align=right|width=220]

Azoth ChatHistory, as the name implies, stores the history of chat sessions. It supports storing history from normal one-to-one chats as well as from multiuser conferences and private chats in conferences. It also allows to search the logs by SQL's LIKE expressions.

SQLite is used for storage.

<h3>Features</h3>

<ul>
<li>Stores history from normal chats, multiuser conferences and private chats.</li>
<li>Supports searching logs.</li>
<li>SQLite-based.</li>
</ul>"
164,image,Azoth ChatHistory,1321474776,,A history of a normal chat as displayed in [163: Azoth ChatHistory].,A history of a normal chat as displayed in [163: Azoth ChatHistory].
165,image,Azoth ChatHistory: MUC,1321474790,,Chat session history of a multiuser conference as displayed in [163: Azoth ChatHistory].,Chat session history of a multiuser conference as displayed in [163: Azoth ChatHistory].
166,story,Development digest #5,1308226738,devel-digest-5,"This week in LeechCraft:

[img_assist|nid=167|title=General view|desc=|link=popup|align=right|width=220]

[img_assist|nid=168|title=Concrete page|desc=|link=popup|align=right|width=220]

<ul>
<li>LeechCraft settings moved from a dialog to a tab (and to be honest, the idea of the tab is borrowed from KDE's <em>systemsettings</em>). See the screenshot on the right.</li>
<li>Service discovery requests and VCard requests are now queued in [144: Azoth Xoox] (previously they were requested all at once), and that should fix some issues with slow and buggy servers like GTalk.</li>
<li>Fixed some bugs in [161: Azoth p100q] with handling and display of messages from <em>psto.net</em> <em>(thanks Ignotus)</em>.</li>
<li>Inline image display is now optional in [161: Azoth p100q] <em>(thanks Ignotus)</em>.</li>
<li>[143: Azoth] now supports scrolling the chat window from the keyboard via Shift+PgUp and Shift+PgDown shortcuts.</li>
<li>[143: Azoth] now allows to configure what hotkey is used for sending messages: just Enter, Ctrl+Enter or Shift+Enter.</li>
<li>[163: Azoth ChatHistory] now correctly handles HTML tags in messages.</li>
<li>[163: Azoth ChatHistory] now also shows the direction of the messages, which is handy for copypasting.</li>
<li>[144: Azoth Xoox] doesn't request capabilities of clients with old entity caps XEP like Psi+ (since it's senseless).</li>
<li>Fixed too paranoid download detection in [26: Poshuku], so, for example, it's safe to go to <a href=""http://habrahabr.ru"">Habrahabr.ru</a> now without the risk of being flooded with download requests about <em>mb_timezone</em>.</li>
<li>Fixes in [27: Poshuku CleanWeb] for correctly hiding blocked elements in Qt 4.7.</li>
<li>Statuses with line breaks are displayed correctly in the contact list now.</li>
<li>And rather technical one: services from the Core are provided as if Core was plugin for itself: that eases and unificates a lot of things. For example, Core just provides another instance object for itself, and this instance object returns Core's XmlSettingsManager, settings tab, and such.</li>
</ul>

<h2>Advanced Notifications</h2>

And there is another change, even more technical, so we've decided to move it out of the list. We've begun the work on the Advanced Notifications framework, an upgrade to existing notifications framework, that would allow to implement persistent notifications, notifications grouping and reducing, and a lot of other tasty things. Let's overview them briefly.

<h3>Persistent notifications</h3>

Up until now, a notification was only shown by system means (via <code>libnotify</code>) or by our nice [155: Kinotify] plugin, but after the notification had disappeared, user had no way of knowing that something had occured.

Persistent notifications fix that. They allow, for example, to implement a plugin that would collect events like incoming unread messages, conference highlights or incoming file transfer requests and display a persistent notification (for example, as an icon in the system tray) for them until the user reacts to the event or manually dismisses the notification.

So, yes, we will finally have a system tray icon for new incoming messages in Azoth.

<h3>Notifications grouping</h3>

Advanced Notifications carry informating about their category, type, Semantic Event ID (SEID), and such. This way, it is possible to group all notifications from a single category into one tray icon or menu, for example. This way, notifications from our IM client and from a hypothetical Twitter client could be all placed into one menu of one icon. Of course, with a proper plugin, user is able to tweak the settings of grouping.

Notification category is the most general grouping criteria. For example, it could be IM, File download, News, and such. Type is used for more precise categorization withing a category. For example, for an IM-category notification it could be IncomingMessage, IncomingMUCMessage, FileTransferRequest, AttentionRequest or AuthorizationRequest. Event ID is used for extremely fine-grained categorization (and some other tasks). For example, event ID would be the same for two messages coming from the same IM contact, but incoming message notification and file transfer request notification have different event IDs event if they originate from the same contact.

<h3>Notifications reducing</h3>

Up until now a plugin that displays notifications had no way of knowing if two notifications actually notify about the same thing, and if an IM client sends out a hundred notifications about new messages from a single contact, you would have to click trough all those notifications, despite they are semantically equivalent.

Now, thanks to event IDs, a proper notification plugin can detect that there is no need in displaying next 99 notifications after first one about new incoming messages has been shown.

<h3>Actions</h3>

Of course, notifications carry actions with them. So, you could open a chat or grant authorization right from the persistent notifications' menu.

<h3>Customizability</h3>

Advanced Notifications carry a lot of context information, like source contact, contact group, message body and such for an IM message notification. This allows to configure how an Advanced Notifications plugin would notify about different events.

For example, it would be possible to configure the plugin so that visual notifications are displayed for every message in your favorite conference, and sound is played only for incoming messages from contacts in ""Personal"" group, and attention requests are ignored for all contacts except the one with JID yourgf@gmail.com, and all notifications from contacts in group ""Bots"" are ignored at all, but only if the message doesn't contain the word ""LeechCraft"".

Of course, different plugins which are the sources of notifications can expose different context information, since an RSS reader, for example, has completely different set of parameters than an IM client, and, in fact, all those parameters aren't known to the notificator in compile-time. For that, notification source plugins must also implement an interface that allows them to provide semantics of those parameters, so an Advanced Notifications plugin is able to provide a sensible GUI for configuring the rules.

<h3>Try it out!</h3>

If you want to be on the bleeding edge and see how Advanced Notifications framework is progressing, you can build the Advanced Notifications plugin from our git by passing <code type=""bash"">-DENABLE_ADVANCEDNOTIFICATIONS=True</code> flag to <code type=""bash"">cmake</code>, since this plugin is disabled by default. Please note that it depends heavily on the API and implementation of LeechCraft, so it's better to build LeechCraft itself from source as well.

Currently only Azoth supports some basic Advanced Notifications, and only tray notifications are working.","This week in LeechCraft:

[img_assist|nid=167|title=General view|desc=|link=popup|align=right|width=220]

[img_assist|nid=168|title=Concrete page|desc=|link=popup|align=right|width=220]

<ul>
<li>LeechCraft settings moved from a dialog to a tab (and to be honest, the idea of the tab is borrowed from KDE's <em>systemsettings</em>). See the screenshot on the right.</li>
<li>Service discovery requests and VCard requests are now queued in [144: Azoth Xoox] (previously they were requested all at once), and that should fix some issues with slow and buggy servers like GTalk.</li>
<li>Fixed some bugs in [161: Azoth p100q] with handling and display of messages from <em>psto.net</em> <em>(thanks Ignotus)</em>.</li>
<li>Inline image display is now optional in [161: Azoth p100q] <em>(thanks Ignotus)</em>.</li>
<li>[143: Azoth] now supports scrolling the chat window from the keyboard via Shift+PgUp and Shift+PgDown shortcuts.</li>
<li>[143: Azoth] now allows to configure what hotkey is used for sending messages: just Enter, Ctrl+Enter or Shift+Enter.</li>
<li>[163: Azoth ChatHistory] now correctly handles HTML tags in messages.</li>
<li>[163: Azoth ChatHistory] now also shows the direction of the messages, which is handy for copypasting.</li>
<li>[144: Azoth Xoox] doesn't request capabilities of clients with old entity caps XEP like Psi+ (since it's senseless).</li>
<li>Fixed too paranoid download detection in [26: Poshuku], so, for example, it's safe to go to <a href=""http://habrahabr.ru"">Habrahabr.ru</a> now without the risk of being flooded with download requests about <em>mb_timezone</em>.</li>
<li>Fixes in [27: Poshuku CleanWeb] for correctly hiding blocked elements in Qt 4.7.</li>
<li>Statuses with line breaks are displayed correctly in the contact list now.</li>
<li>And rather technical one: services from the Core are provided as if Core was plugin for itself: that eases and unificates a lot of things. For example, Core just provides another instance object for itself, and this instance object returns Core's XmlSettingsManager, settings tab, and such.</li>
</ul>

<h2>Advanced Notifications</h2>

And there is another change, even more technical, so we've decided to move it out of the list. We've begun the work on the Advanced Notifications framework, an upgrade to existing notifications framework, that would allow to implement persistent notifications, notifications grouping and reducing, and a lot of other tasty things. Let's overview them briefly.

<h3>Persistent notifications</h3>

Up until now, a notification was only shown by system means (via <code>libnotify</code>) or by our nice [155: Kinotify] plugin, but after the notification had disappeared, user had no way of knowing that something had occured.

Persistent notifications fix that. They allow, for example, to implement a plugin that would collect events like incoming unread messages, conference highlights or incoming file transfer requests and display a persistent notification (for example, as an icon in the system tray) for them until the user reacts to the event or manually dismisses the notification.

So, yes, we will finally have a system tray icon for new incoming messages in Azoth.

<h3>Notifications grouping</h3>

Advanced Notifications carry informating about their category, type, Semantic Event ID (SEID), and such. This way, it is possible to group all notifications from a single category into one tray icon or menu, for example. This way, notifications from our IM client and from a hypothetical Twitter client could be all placed into one menu of one icon. Of course, with a proper plugin, user is able to tweak the settings of grouping.

Notification category is the most general grouping criteria. For example, it could be IM, File download, News, and such. Type is used for more precise categorization withing a category. For example, for an IM-category notification it could be IncomingMessage, IncomingMUCMessage, FileTransferRequest, AttentionRequest or AuthorizationRequest. Event ID is used for extremely fine-grained categorization (and some other tasks). For example, event ID would be the same for two messages coming from the same IM contact, but incoming message notification and file transfer request notification have different event IDs event if they originate from the same contact.

<h3>Notifications reducing</h3>

Up until now a plugin that displays notifications had no way of knowing if two notifications actually notify about the same thing, and if an IM client sends out a hundred notifications about new messages from a single contact, you would have to click trough all those notifications, despite they are semantically equivalent.

Now, thanks to event IDs, a proper notification plugin can detect that there is no need in displaying next 99 notifications after first one about new incoming messages has been shown.

<h3>Actions</h3>

Of course, notifications carry actions with them. So, you could open a chat or grant authorization right from the persistent notifications' menu.

<h3>Customizability</h3>

Advanced Notifications carry a lot of context information, like source contact, contact group, message body and such for an IM message notification. This allows to configure how an Advanced Notifications plugin would notify about different events.

For example, it would be possible to configure the plugin so that visual notifications are displayed for every message in your favorite conference, and sound is played only for incoming messages from contacts in ""Personal"" group, and attention requests are ignored for all contacts except the one with JID yourgf@gmail.com, and all notifications from contacts in group ""Bots"" are ignored at all, but only if the message doesn't contain the word ""LeechCraft"".

Of course, different plugins which are the sources of notifications can expose different context information, since an RSS reader, for example, has completely different set of parameters than an IM client, and, in fact, all those parameters aren't known to the notificator in compile-time. For that, notification source plugins must also implement an interface that allows them to provide semantics of those parameters, so an Advanced Notifications plugin is able to provide a sensible GUI for configuring the rules.

<h3>Try it out!</h3>

If you want to be on the bleeding edge and see how Advanced Notifications framework is progressing, you can build the Advanced Notifications plugin from our git by passing <code type=""bash"">-DENABLE_ADVANCEDNOTIFICATIONS=True</code> flag to <code type=""bash"">cmake</code>, since this plugin is disabled by default. Please note that it depends heavily on the API and implementation of LeechCraft, so it's better to build LeechCraft itself from source as well.

Currently only Azoth supports some basic Advanced Notifications, and only tray notifications are working."
167,image,"LeechCraft settings, general view",1321474165,,"The global settings dashboard in LeechCraft. Only those plugins that have settings are shown, and plugins for other plugins are grouped into categories (the last two groupboxes, for example).","The global settings dashboard in LeechCraft. Only those plugins that have settings are shown, and plugins for other plugins are grouped into categories (the last two groupboxes, for example)."
168,image,"LeechCraft settings, single page",1321474148,,A concrete settings page after being choosed in the [167: general view].,A concrete settings page after being choosed in the [167: general view].
177,story,Development digest #6,1309042057,devel-digest-6,"Last 10 days we mostly focused on Azoth and, in particular, on implementing various handy and fancy XEPs in the XMPP implementation. Plugins for embedding media elements into Azoth chats, antispam and ignore plugin have also been added. So, the features list follows:

<ul>
<li>Support IM protocols in [143: Azoth] supporting user mood, user activity and user tune, with the ability to change them as well.</li>
<li>PubSub/PEP support in [144: Azoth Xoox], in particular:
<ul>
<li><a href=""http://xmpp.org/extensions/xep-0163.html"">XEP-0163: PEP</a></li>
<li><a href=""http://xmpp.org/extensions/xep-0107.html"">XEP-0107: User Mood</a></li>
<li><a href=""http://xmpp.org/extensions/xep-0108.html"">XEP-0108: User Activity</a></li>
<li><a href=""http://xmpp.org/extensions/xep-0118.html"">XEP-0118: User Tune</a></li>
</ul>
</li>
<li>Added Azoth Xtazy, plugin for publishing current user tune. Supports MPRIS-compatible players and file data source.</li>
<li>Support for in-band registration (<a href=""http://xmpp.org/extensions/xep-0077.html"">XEP-0077</a>) in [144: Azoth Xoox].</li>
<li>Privacy lists support in [144: Azoth Xoox] (<a href=""http://xmpp.org/extensions/xep-0016.html"">XEP-0016</a>).</li>
<li>Introduced a new plugin for embedding media objects like YouTube videos into chat windows <em>(thanks Nobodyzzz)</em>.</li>
<li>Added Azoth Autopaste plugin for automatically sending long messages to pastebins and sending the link to the paste instead of the text itself.</li>
<li>Azoth Depester, plugin for ignoring specific participants in multiuser chatrooms.</li>
<li>Azoth Herbicide, a basic antispam plugin.</li>
<li>Reworked handling of contacts that have just requested authorization or that aren't present in our contact list at all. In particular, messages from unauthorized contacts or from contacts that haven't been added are handled now.</li>
<li>Support for legacy Entity Time XEP (<a href=""http://xmpp.org/extensions/xep-0090.html"">XEP-0090</a>) in [144: Azoth Xoox] with a small easter egg.</li>
<li>[143: Azoth]: implemented protocol console, in particular, XML console for the [144: XMPP protocol plugin].</li>
<li>[144: Azoth Xoox] now supports legacy forms when registering on gateways and on XMPP servers.</li>
<li>Fixed regexp for detecting links in Azoth chats, so that, for example, magnet or git links are also detected now <em>(thanks Akon32)</em>.</li>
<li>[161: Azoth p100q] plugin now allows to unsubscribe from psto directly from comments or posts <em>(thanks Ignotus)</em>.</li>
<li>Improved insertion of nicks in message line edit in Azoth <em>(thanks Akon32)</em>.</li>
<li>Fixed some segfaults and UI bugs in Azoth: it doesn't segfault now on empty contact addition.</li>
</ul>","Last 10 days we mostly focused on Azoth and, in particular, on implementing various handy and fancy XEPs in the XMPP implementation. Plugins for embedding media elements into Azoth chats, antispam and ignore plugin have also been added. So, the features list follows:

<ul>
<li>Support IM protocols in [143: Azoth] supporting user mood, user activity and user tune, with the ability to change them as well.</li>
<li>PubSub/PEP support in [144: Azoth Xoox], in particular:
<ul>
<li><a href=""http://xmpp.org/extensions/xep-0163.html"">XEP-0163: PEP</a></li>
<li><a href=""http://xmpp.org/extensions/xep-0107.html"">XEP-0107: User Mood</a></li>
<li><a href=""http://xmpp.org/extensions/xep-0108.html"">XEP-0108: User Activity</a></li>
<li><a href=""http://xmpp.org/extensions/xep-0118.html"">XEP-0118: User Tune</a></li>
</ul>
</li>
<li>Added Azoth Xtazy, plugin for publishing current user tune. Supports MPRIS-compatible players and file data source.</li>
<li>Support for in-band registration (<a href=""http://xmpp.org/extensions/xep-0077.html"">XEP-0077</a>) in [144: Azoth Xoox].</li>
<li>Privacy lists support in [144: Azoth Xoox] (<a href=""http://xmpp.org/extensions/xep-0016.html"">XEP-0016</a>).</li>
<li>Introduced a new plugin for embedding media objects like YouTube videos into chat windows <em>(thanks Nobodyzzz)</em>.</li>
<li>Added Azoth Autopaste plugin for automatically sending long messages to pastebins and sending the link to the paste instead of the text itself.</li>
<li>Azoth Depester, plugin for ignoring specific participants in multiuser chatrooms.</li>
<li>Azoth Herbicide, a basic antispam plugin.</li>
<li>Reworked handling of contacts that have just requested authorization or that aren't present in our contact list at all. In particular, messages from unauthorized contacts or from contacts that haven't been added are handled now.</li>
<li>Support for legacy Entity Time XEP (<a href=""http://xmpp.org/extensions/xep-0090.html"">XEP-0090</a>) in [144: Azoth Xoox] with a small easter egg.</li>
<li>[143: Azoth]: implemented protocol console, in particular, XML console for the [144: XMPP protocol plugin].</li>
<li>[144: Azoth Xoox] now supports legacy forms when registering on gateways and on XMPP servers.</li>
<li>Fixed regexp for detecting links in Azoth chats, so that, for example, magnet or git links are also detected now <em>(thanks Akon32)</em>.</li>
<li>[161: Azoth p100q] plugin now allows to unsubscribe from psto directly from comments or posts <em>(thanks Ignotus)</em>.</li>
<li>Improved insertion of nicks in message line edit in Azoth <em>(thanks Akon32)</em>.</li>
<li>Fixed some segfaults and UI bugs in Azoth: it doesn't segfault now on empty contact addition.</li>
</ul>"
179,book,Building from source (Win32),1315946543,development-building-from-source-win32,"This document describes building LeechCraft with pretty much all the plugins for Win32. This is still highly experimental, so the result is not guaranteed.

<h2>Intro</h2>

This build guide assumes Windows 7 with Microsoft Visual Studio 2010 SP1. We will use Qt 4.7.3, Boost 1.46.1, Libtorrent 0.15.6, CMake 2.8.4, qxmpp-dev snapshot and fresh enough OpenSSL.

We will use <code type=""winbatch"">E:\LeechCraft</code> path for LeechCraft source and we will store third-party libraries in <code type=""winbatch"">E:\libs</code> throughout the guide. Adjust the paths accordingly.

<h2>Installing Qt</h2>

Seems like it is safe to use Qt binaries shipped by Nokia for MSVS 2008 with the 2010 version. The binaries could be found at <a href=""http://qt.nokia.com/downloads/downloads#qt-lib"">Qt download page</a>, and here's the direct link that works at the time of writing the guide: http://qt.nokia.com/downloads/windows-cpp-vs2008.

So, download the installer and install Qt into <code type=""winbatch"">E:\Libs\Qt\4.7.3</code> (note the version at the end, it may be different for you).

After you've installed Qt, open <code type=""winbatch"">E:\Libs\Qt\4.7.3\bin\qtvars.bat</code> and add the following line there, adjusting the paths necesserily:

<code type=""winbatch"">
call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86
</code>

This way, opening Qt command prompt would also set up MSVS compiler properly.

<em>Note:</em> while I tried to follow this guide myself, the precompiled binaries of Qt weren't working with MSVS 2010, so I had to compile them manually.

<em>Note:</em> if you choose to compile Qt yourself, make sure you do it <em>after</em> installing SSL, and that Qt can find your OpenSSL installation.

<h2>Building Boost</h2>

Download the freshiest version of Boost, for example, from https://sourceforge.net/projects/boost/files/boost/1.46.1/ for 1.46.1. Unpack it into <code type=""winbatch"">E:\Libs\boost_1_46_1</code>. Open MSVS command line prompt and issue the following sequence of commands:

<code type=""winbatch"">
E:
cd \Libs\boost_1_46_1
bootstrap.bat
.\bjam link=shared
</code>

This would build shared-only version of Boost libraries, both release and debug. After this, issue <code type=""winbatch"">copy bjam.exe C:\Windows\System32</code> to make bjam available later — it will be used for Libtorrent.

If you, for some reason, want static version of Boost binaries, just omit the <code type=""winbatch"">link=shared</code> part from the last command. If you want only release or debug versions, append the corresponding parameter to <code type=""winbatch"">bjam</code>, for example:

<code type=""winbatch"">
.\bjam release
</code>

for building both static and shared release-only libraries.

Building Boost takes a while, from several minutes on a pretty modern Core i7 system to hours on older systems. My Athlon 64 X2 4000+ managed to build in 24 minutes, for example. So, we may move on to installing other dependencies while Boost is being built.

<h2>Installing OpenSSL</h2>

Thankfully, OpenSSL comes in precompiled form for Win32, so it's unnecessary to build it (though you can, of course, but for that you'd need Perl). Binaries could be downloaded from <a href=""http://www.slproweb.com/products/Win32OpenSSL.html"">here</a>, and at the time of writing the OpenSSL 1.0.0d version was actual, so we download the <a href=""http://www.slproweb.com/download/Win32OpenSSL-1_0_0d.exe"">corresponding installer</a>. Avoid light versions of installer, since they don't contain development files that are required to build software that uses OpenSSL. The needed installer is typically around 8 MB in size, or maybe even more.

Once again, we install OpenSSL into <code type=""winbatch"">E:\Libs</code>, so that the installer would create <code type=""winbatch"">E:\Libs\OpenSSL-Win32</code>.

The installer may ask whether to install the libraries into System32 folder or into installation folder. Choose the second.

<h2>Installing CMake</h2>

That's pretty simple, just download CMake binary installer from the <a href=""http://cmake.org/cmake/resources/software.html"">official site</a>. Install it into standard program files folder (since it's not a binary) and choose to register it in PATH for you.

<h2>Installing NSIS</h2>

Though optional, this step is also recommended. Download and install NSIS from their <a href=""http://nsis.sourceforge.net/Download"">Download page</a>.

<h2>Installing git</h2>

You will need git to checkout fresh sources of LeechCraft, qxmpp and Qross. Download the freshiest installer of msysgit whose name begins with ""Git-"" from the <a href=""http://code.google.com/p/msysgit/downloads/list"">msysgit page</a>. At the time of writing, a preview version of git 1.7.4 <a href=""http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.4-preview20110204.exe&can=2&q="">was actual</a>.

Run the installer. It's recommended to add git to the system path.

<h2>Building speex</h2>

Speex is needed for Jingle support in LeechCraft Azoth.

Download sources from <a href=""http://www.speex.org/downloads/"">Speex site</a>. At the time of writing, <a href=""http://downloads.xiph.org/releases/speex/speex-1.2rc1.tar.gz"">1.2rc1</a> version was actual. Unpack the sources to <code type=""winbatch"">E:\Libs\speex</code>.

Load the VS2003 (later ones would cause you problems) solution from <code type=""winbatch"">E:\Libs\speex\win32\VS2008\libspeex.sln</code>. MSVS2010 may ask to convert it, so accept and convert.

Having successfully converted the project, select Release build type and build the <em>libspeex</em> project.

<h2>Building QXmpp</h2>

Open the Qt command prompt and issue the following:

<code type=""winbatch"">
E:
cd \Libs
git clone git://github.com/0xd34df00d/qxmpp-dev.git
cd qxmpp-dev
mkdir build
cd build
qmake ../
set INCLUDE=E:\Libs\speex\include;%INCLUDE%
nmake release
cd ..
mkdir qxmpp
copy src\*.h qxmpp
</code>

This will build the release version of QXmpp. If you want debug version as well, substitute <code type=""winbatch"">nmake release</code> with <code type=""winbatch"">nmake</code>.

<h2>Building QJson</h2>

Get <a href=""http://sourceforge.net/projects/qjson/files/qjson/"">QJson sources</a> (<a href=""http://sourceforge.net/projects/qjson/files/qjson/0.7.1/qjson-0.7.1.tar.bz2/download"">0.7.1</a> is actual at the time of writing). Unpack it into <code type=""winbatch"">E:\Libs\qjson</code>, make sure MSVS isn't running and issue:

<code type=""winbatch"">
E:
cd \Libs\qjson
mkdir build
cd build
cmake ../ -G ""Visual Studio 10""
</code>

Then, open <code type=""winbatch"">E:\Libs\qjson\build\qjson.sln</code> and build the MinSizeRel configuration.

Create directory <code type=""winbatch"">E:\Libs\qjson\qjson</code> and copy all <code type=""winbatch"">*.h</code> and <code type=""winbatch"">*.hh</code> files from <code type=""winbatch"">src</code> directory there.

<h2>Building libtorrent</h2>

By the time you get here, Boost should have already been compiled, so now libtorrent, which depends on Boost, can be built.

First, <a href=""http://code.google.com/p/libtorrent/downloads/list"">get the source</a>. At the time of writing, <a href=""http://code.google.com/p/libtorrent/downloads/detail?name=libtorrent-rasterbar-0.15.6.tar.gz&can=2&q="">0.15.6</a> was the latest version.

Then, extract the archive into <code type=""winbatch"">E:\Libs\libtorrent</code>. Open MSVS command prompt and issue:

<code type=""winbatch"">
E:
cd \Libs\libtorrent
set BOOST_ROOT=E:\Libs\boost_1_46_1
set INCLUDE=E:\Libs\OpenSSL-Win32\include;%INCLUDE%
set LIB=E:\Libs\OpenSSL-Win32\lib;%LIB%
bjam boost=source boost-link=shared link=shared openssl=pe geoip=off release
</code>

This will build release version of libtorrent with support for OpenSSL and without GeoIP (LC doesn't use it anyway), with dynamic linking to Boost.

<h2>Building Qross</h2>

Qross library is required for LeechCraft scripting plugin, Qrosp. Basically, only the JS backend is required to be built, and we won't consider building Python support now.

So, open the Qt command line prompt and issue:

<code type=""winbatch"">
E:
cd \Libs
git clone git://github.com/0xd34df00d/Qross.git
cd Qross
mkdir build
cd build
cmake ../src/qross -G ""Visual Studio 10""
</code>

Open <code type=""winbatch"">E:\Libs\Qross\build\Project.sln</code> with Visual Studio, select the MinSizeRel configuration and build the solution.

<h2>Building LeechCraft</h2>

Open the Qt command line prompt and issue:

<code type=""winbatch"">
E:
git clone git://github.com/0xd34df00d/leechcraft.git
</code>

Run <code type=""winbatch"">E:\leechcraft\tools\win32\build32.bat</code> script. Open <code type=""winbatch"">E:\leechcraft\tools\win32\build32\leechcraft.sln</code>, select RelWithDebInfo configuration and build the solution.

Then, after it builds, use the <code type=""winbatch"">E:\leechcraft\tools\win32\collect32.bat</code> to collect all LeechCraft-related libraries and executables into single directory, ready to be packed.","This document describes building LeechCraft with pretty much all the plugins for Win32. This is still highly experimental, so the result is not guaranteed.

<h2>Intro</h2>

This build guide assumes Windows 7 with Microsoft Visual Studio 2010 SP1. We will use Qt 4.7.3, Boost 1.46.1, Libtorrent 0.15.6, CMake 2.8.4, qxmpp-dev snapshot and fresh enough OpenSSL.

We will use <code type=""winbatch"">E:\LeechCraft</code> path for LeechCraft source and we will store third-party libraries in <code type=""winbatch"">E:\libs</code> throughout the guide. Adjust the paths accordingly.

<h2>Installing Qt</h2>

Seems like it is safe to use Qt binaries shipped by Nokia for MSVS 2008 with the 2010 version. The binaries could be found at <a href=""http://qt.nokia.com/downloads/downloads#qt-lib"">Qt download page</a>, and here's the direct link that works at the time of writing the guide: http://qt.nokia.com/downloads/windows-cpp-vs2008.

So, download the installer and install Qt into <code type=""winbatch"">E:\Libs\Qt\4.7.3</code> (note the version at the end, it may be different for you).

After you've installed Qt, open <code type=""winbatch"">E:\Libs\Qt\4.7.3\bin\qtvars.bat</code> and add the following line there, adjusting the paths necesserily:

<code type=""winbatch"">
call ""C:\Program Files\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"" x86
</code>

This way, opening Qt command prompt would also set up MSVS compiler properly.

<em>Note:</em> while I tried to follow this guide myself, the precompiled binaries of Qt weren't working with MSVS 2010, so I had to compile them manually.

<em>Note:</em> if you choose to compile Qt yourself, make sure you do it <em>after</em> installing SSL, and that Qt can find your OpenSSL installation.

<h2>Building Boost</h2>

Download the freshiest version of Boost, for example, from https://sourceforge.net/projects/boost/files/boost/1.46.1/ for 1.46.1. Unpack it into <code type=""winbatch"">E:\Libs\boost_1_46_1</code>. Open MSVS command line prompt and issue the following sequence of commands:

<code type=""winbatch"">
E:
cd \Libs\boost_1_46_1
bootstrap.bat
.\bjam link=shared
</code>

This would build shared-only version of Boost libraries, both release and debug. After this, issue <code type=""winbatch"">copy bjam.exe C:\Windows\System32</code> to make bjam available later — it will be used for Libtorrent.

If you, for some reason, want static version of Boost binaries, just omit the <code type=""winbatch"">link=shared</code> part from the last command. If you want only release or debug versions, append the corresponding parameter to <code type=""winbatch"">bjam</code>, for example:

<code type=""winbatch"">
.\bjam release
</code>

for building both static and shared release-only libraries.

Building Boost takes a while, from several minutes on a pretty modern Core i7 system to hours on older systems. My Athlon 64 X2 4000+ managed to build in 24 minutes, for example. So, we may move on to installing other dependencies while Boost is being built.

<h2>Installing OpenSSL</h2>

Thankfully, OpenSSL comes in precompiled form for Win32, so it's unnecessary to build it (though you can, of course, but for that you'd need Perl). Binaries could be downloaded from <a href=""http://www.slproweb.com/products/Win32OpenSSL.html"">here</a>, and at the time of writing the OpenSSL 1.0.0d version was actual, so we download the <a href=""http://www.slproweb.com/download/Win32OpenSSL-1_0_0d.exe"">corresponding installer</a>. Avoid light versions of installer, since they don't contain development files that are required to build software that uses OpenSSL. The needed installer is typically around 8 MB in size, or maybe even more.

Once again, we install OpenSSL into <code type=""winbatch"">E:\Libs</code>, so that the installer would create <code type=""winbatch"">E:\Libs\OpenSSL-Win32</code>.

The installer may ask whether to install the libraries into System32 folder or into installation folder. Choose the second.

<h2>Installing CMake</h2>

That's pretty simple, just download CMake binary installer from the <a href=""http://cmake.org/cmake/resources/software.html"">official site</a>. Install it into standard program files folder (since it's not a binary) and choose to register it in PATH for you.

<h2>Installing NSIS</h2>

Though optional, this step is also recommended. Download and install NSIS from their <a href=""http://nsis.sourceforge.net/Download"">Download page</a>.

<h2>Installing git</h2>

You will need git to checkout fresh sources of LeechCraft, qxmpp and Qross. Download the freshiest installer of msysgit whose name begins with ""Git-"" from the <a href=""http://code.google.com/p/msysgit/downloads/list"">msysgit page</a>. At the time of writing, a preview version of git 1.7.4 <a href=""http://code.google.com/p/msysgit/downloads/detail?name=Git-1.7.4-preview20110204.exe&can=2&q="">was actual</a>.

Run the installer. It's recommended to add git to the system path.

<h2>Building speex</h2>

Speex is needed for Jingle support in LeechCraft Azoth.

Download sources from <a href=""http://www.speex.org/downloads/"">Speex site</a>. At the time of writing, <a href=""http://downloads.xiph.org/releases/speex/speex-1.2rc1.tar.gz"">1.2rc1</a> version was actual. Unpack the sources to <code type=""winbatch"">E:\Libs\speex</code>.

Load the VS2003 (later ones would cause you problems) solution from <code type=""winbatch"">E:\Libs\speex\win32\VS2008\libspeex.sln</code>. MSVS2010 may ask to convert it, so accept and convert.

Having successfully converted the project, select Release build type and build the <em>libspeex</em> project.

<h2>Building QXmpp</h2>

Open the Qt command prompt and issue the following:

<code type=""winbatch"">
E:
cd \Libs
git clone git://github.com/0xd34df00d/qxmpp-dev.git
cd qxmpp-dev
mkdir build
cd build
qmake ../
set INCLUDE=E:\Libs\speex\include;%INCLUDE%
nmake release
cd ..
mkdir qxmpp
copy src\*.h qxmpp
</code>

This will build the release version of QXmpp. If you want debug version as well, substitute <code type=""winbatch"">nmake release</code> with <code type=""winbatch"">nmake</code>.

<h2>Building QJson</h2>

Get <a href=""http://sourceforge.net/projects/qjson/files/qjson/"">QJson sources</a> (<a href=""http://sourceforge.net/projects/qjson/files/qjson/0.7.1/qjson-0.7.1.tar.bz2/download"">0.7.1</a> is actual at the time of writing). Unpack it into <code type=""winbatch"">E:\Libs\qjson</code>, make sure MSVS isn't running and issue:

<code type=""winbatch"">
E:
cd \Libs\qjson
mkdir build
cd build
cmake ../ -G ""Visual Studio 10""
</code>

Then, open <code type=""winbatch"">E:\Libs\qjson\build\qjson.sln</code> and build the MinSizeRel configuration.

Create directory <code type=""winbatch"">E:\Libs\qjson\qjson</code> and copy all <code type=""winbatch"">*.h</code> and <code type=""winbatch"">*.hh</code> files from <code type=""winbatch"">src</code> directory there.

<h2>Building libtorrent</h2>

By the time you get here, Boost should have already been compiled, so now libtorrent, which depends on Boost, can be built.

First, <a href=""http://code.google.com/p/libtorrent/downloads/list"">get the source</a>. At the time of writing, <a href=""http://code.google.com/p/libtorrent/downloads/detail?name=libtorrent-rasterbar-0.15.6.tar.gz&can=2&q="">0.15.6</a> was the latest version.

Then, extract the archive into <code type=""winbatch"">E:\Libs\libtorrent</code>. Open MSVS command prompt and issue:

<code type=""winbatch"">
E:
cd \Libs\libtorrent
set BOOST_ROOT=E:\Libs\boost_1_46_1
set INCLUDE=E:\Libs\OpenSSL-Win32\include;%INCLUDE%
set LIB=E:\Libs\OpenSSL-Win32\lib;%LIB%
bjam boost=source boost-link=shared link=shared openssl=pe geoip=off release
</code>

This will build release version of libtorrent with support for OpenSSL and without GeoIP (LC doesn't use it anyway), with dynamic linking to Boost.

<h2>Building Qross</h2>

Qross library is required for LeechCraft scripting plugin, Qrosp. Basically, only the JS backend is required to be built, and we won't consider building Python support now.

So, open the Qt command line prompt and issue:

<code type=""winbatch"">
E:
cd \Libs
git clone git://github.com/0xd34df00d/Qross.git
cd Qross
mkdir build
cd build
cmake ../src/qross -G ""Visual Studio 10""
</code>

Open <code type=""winbatch"">E:\Libs\Qross\build\Project.sln</code> with Visual Studio, select the MinSizeRel configuration and build the solution.

<h2>Building LeechCraft</h2>

Open the Qt command line prompt and issue:

<code type=""winbatch"">
E:
git clone git://github.com/0xd34df00d/leechcraft.git
</code>

Run <code type=""winbatch"">E:\leechcraft\tools\win32\build32.bat</code> script. Open <code type=""winbatch"">E:\leechcraft\tools\win32\build32\leechcraft.sln</code>, select RelWithDebInfo configuration and build the solution.

Then, after it builds, use the <code type=""winbatch"">E:\leechcraft\tools\win32\collect32.bat</code> to collect all LeechCraft-related libraries and executables into single directory, ready to be packed."
180,story,Development digest #7,1309780549,devel-digest-7,"This week's changelog is rather small, but we have two major new features: somewhat working Jingle and support for ad-hoc commands in Azoth.

So, moving on to the changes list:

<ul>
<li>Implemented support for Jingle in [144: Azoth Xoox] (so LeechCraft requires Speex and QtMultimedia now).</li>
<li>Overall support for media calls in [143: Azoth], with selectable input/output audiodevices, call manager and such.</li>
<li>Impemented support for ad-hoc commands (<a href=""http://xmpp.org/extensions/xep-0050.html"">XEP-0050</a>) in Azoth Xoox.</li>
<li>Added Azoth Rosenthal plugin, which implements Hunspell-based spellchecking in Azoth.</li>
<li>Added support for showing images directly in chat window into Azoth EmbedMedia <em>(thanks Nobodyzzz)</em>.</li>
<li>Added Poshuku Keywords plugin for URL shortcuts <em>(thanks Nobodyzzz)</em>.</li>
<li>Support for animated icons in Azoth (for example, for ""connecting"" icon or ""incoming file"").</li>
<li>Fixed a couple of funny bugs in Azoth Herbicide.</li>
<li>Finally respect background color from system palette in [7: Aggregator].</li>
<li>Saner error messages in Azoth, with reason string instead of reason code.</li>
</ul>","This week's changelog is rather small, but we have two major new features: somewhat working Jingle and support for ad-hoc commands in Azoth.

So, moving on to the changes list:

<ul>
<li>Implemented support for Jingle in [144: Azoth Xoox] (so LeechCraft requires Speex and QtMultimedia now).</li>
<li>Overall support for media calls in [143: Azoth], with selectable input/output audiodevices, call manager and such.</li>
<li>Impemented support for ad-hoc commands (<a href=""http://xmpp.org/extensions/xep-0050.html"">XEP-0050</a>) in Azoth Xoox.</li>
<li>Added Azoth Rosenthal plugin, which implements Hunspell-based spellchecking in Azoth.</li>
<li>Added support for showing images directly in chat window into Azoth EmbedMedia <em>(thanks Nobodyzzz)</em>.</li>
<li>Added Poshuku Keywords plugin for URL shortcuts <em>(thanks Nobodyzzz)</em>.</li>
<li>Support for animated icons in Azoth (for example, for ""connecting"" icon or ""incoming file"").</li>
<li>Fixed a couple of funny bugs in Azoth Herbicide.</li>
<li>Finally respect background color from system palette in [7: Aggregator].</li>
<li>Saner error messages in Azoth, with reason string instead of reason code.</li>
</ul>"
182,image,Ad-Hoc Commands,1309778841,,"Choosing an ad-hoc command (<a href=""http://xmpp.org/extensions/xep-0050.html"">XEP-0050</a>) to execute.","Choosing an ad-hoc command (<a href=""http://xmpp.org/extensions/xep-0050.html"">XEP-0050</a>) to execute."
183,image,Ad-Hoc Commands,1309778998,,Selecting parameters of an Ad-Hoc Command.,Selecting parameters of an Ad-Hoc Command.
184,image,XML console,1321475906,,XML console for a Jabber account in [143: Azoth].,XML console for a Jabber account in [143: Azoth].
185,image,PEP in Azoth,1321476966,,"A tooltip for a client that publishes some information about his mood, current tune and activity.","A tooltip for a client that publishes some information about his mood, current tune and activity."
186,story,LeechCraft 0.4.80 is released,1328777146,leechcraft-0.4.80-is-released,"LeechCraft milestone 0.4.80 ""Cow Killer"" is just released!

This milestone mainly focuses on the [143: Azoth] IM client and the XMPP protocol implementation [144: Azoth Xoox].

Among the most important changes are:

<ul>
<li>Added support for media calls in Azoth.</li>
<li>Added experimental Jingle implementation in Azoth Xoox.</li>
<li>Introduced antispam module and module for ignoring multiuser conferences' participants.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0163.html"">PEP</a> and some corresponding XEPs in Azoth Xoox: <a href=""http://xmpp.org/extensions/xep-0108.html"">User activity</a>, <a href=""http://xmpp.org/extensions/xep-0107.html"">User mood</a>, <a href=""http://xmpp.org/extensions/xep-0118.html"">User tune</a>.</li>
<li>Added a plugin for publishing currently playing tune. Now only MPRIS-compatible players are supported.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0077.html"">In-Band Registration</a> in Azoth Xoox, so it's possible now to register Jabber accounts right from the client.</li>
<li><a href=""http://xmpp.org/extensions/xep-0016.html"">Privacy Lists</a> are now supported in Azoth Xoox.</li>
<li>Added support for <a href=""http://xmpp.org/extensions/xep-0050.html"">Ad-Hoc Commands</a> in Azoth Xoox.</li>
<li>Introduced Azoth Rosenthal, a module providing spellchecker for Azoth chat windows. Myspell/Hunspell dictionaries are used.</li>
<li>Introduced Azoth EmbedMedia for showing media objects like flash video or images directly in chat windows.</li>
<li>Added Azoth Autopaste for automatically pasting long texts to pastebins and replacing them with the corresponding links.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0184.html"">Message Delivery Receipts</a> and <a href=""http://xmpp.org/extensions/xep-0224.html"">Attention</a> in Azoth and Azoth Xoox.</li>
<li>Introduced a new module, Poshuku Keywords, for URL shortcuts.</li>
<li>Added XML console in Azoth.</li>
<li>LeechCraft settings are now configured via a tab instead of a dialog.</li>
<li>Lots of small improvements and bugfixes.</li>
</ul>

We've also begun working on the new notifications infrastructure, and that has been described in details in the [166: corresponding digest].

Those interested can view all the major changes in the corresponding digests ([146: #4], [166: #5], [177: #6], [180: #7]), while even more curious could just do <code type=""bash"">git log 0.4.75..0.4.80</code>.

Packages are already available for Ubuntu Lucid, Maverick and Natty (and, thus, Debian testing/unstable). Gentoo ebuilds are also available. Packages for Fedora and openSUSE would be built a bit later.

By the way, since the last milestone about a month ago, LeechCraft was included into official repositories of openSUSE and RFR.

And now some screenshots:

[img_assist|nid=185|title=PEP in Azoth|desc=|link=popup|width=440]


[img_assist|nid=182|title=Ad-Hoc commands|desc=|link=popup|width=440]


[img_assist|nid=183|title=Ad-Hoc commands|desc=|link=popup|width=440]


[img_assist|nid=184|title=XML console|desc=|link=popup|width=440]


[img_assist|nid=167|title=Settings, general view|desc=|link=popup|width=440]


[img_assist|nid=168|title=Specific settings|desc=|link=popup|width=440]","LeechCraft milestone 0.4.80 ""Cow Killer"" is just released!

This milestone mainly focuses on the [143: Azoth] IM client and the XMPP protocol implementation [144: Azoth Xoox].

Among the most important changes are:

<ul>
<li>Added support for media calls in Azoth.</li>
<li>Added experimental Jingle implementation in Azoth Xoox.</li>
<li>Introduced antispam module and module for ignoring multiuser conferences' participants.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0163.html"">PEP</a> and some corresponding XEPs in Azoth Xoox: <a href=""http://xmpp.org/extensions/xep-0108.html"">User activity</a>, <a href=""http://xmpp.org/extensions/xep-0107.html"">User mood</a>, <a href=""http://xmpp.org/extensions/xep-0118.html"">User tune</a>.</li>
<li>Added a plugin for publishing currently playing tune. Now only MPRIS-compatible players are supported.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0077.html"">In-Band Registration</a> in Azoth Xoox, so it's possible now to register Jabber accounts right from the client.</li>
<li><a href=""http://xmpp.org/extensions/xep-0016.html"">Privacy Lists</a> are now supported in Azoth Xoox.</li>
<li>Added support for <a href=""http://xmpp.org/extensions/xep-0050.html"">Ad-Hoc Commands</a> in Azoth Xoox.</li>
<li>Introduced Azoth Rosenthal, a module providing spellchecker for Azoth chat windows. Myspell/Hunspell dictionaries are used.</li>
<li>Introduced Azoth EmbedMedia for showing media objects like flash video or images directly in chat windows.</li>
<li>Added Azoth Autopaste for automatically pasting long texts to pastebins and replacing them with the corresponding links.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0184.html"">Message Delivery Receipts</a> and <a href=""http://xmpp.org/extensions/xep-0224.html"">Attention</a> in Azoth and Azoth Xoox.</li>
<li>Introduced a new module, Poshuku Keywords, for URL shortcuts.</li>
<li>Added XML console in Azoth.</li>
<li>LeechCraft settings are now configured via a tab instead of a dialog.</li>
<li>Lots of small improvements and bugfixes.</li>
</ul>

We've also begun working on the new notifications infrastructure, and that has been described in details in the [166: corresponding digest].

Those interested can view all the major changes in the corresponding digests ([146: #4], [166: #5], [177: #6], [180: #7]), while even more curious could just do <code type=""bash"">git log 0.4.75..0.4.80</code>.

Packages are already available for Ubuntu Lucid, Maverick and Natty (and, thus, Debian testing/unstable). Gentoo ebuilds are also available. Packages for Fedora and openSUSE would be built a bit later.

By the way, since the last milestone about a month ago, LeechCraft was included into official repositories of openSUSE and RFR.

And now some screenshots:

[img_assist|nid=185|title=PEP in Azoth|desc=|link=popup|width=440]


[img_assist|nid=182|title=Ad-Hoc commands|desc=|link=popup|width=440]


[img_assist|nid=183|title=Ad-Hoc commands|desc=|link=popup|width=440]


[img_assist|nid=184|title=XML console|desc=|link=popup|width=440]


[img_assist|nid=167|title=Settings, general view|desc=|link=popup|width=440]


[img_assist|nid=168|title=Specific settings|desc=|link=popup|width=440]"
191,page,Azoth Modnok,1310429023,plugins-azoth-modnok,"Azoth Modnok allows to render and display LaTeX formulae directly in chat windows.

If a protocol supports rich text messages, Modnok may also replace formulae in outgoing messages with the corresponding images, so that your chatmates would see the nice rendered formulae instead of raw LaTeX code.

[img_assist|nid=192|title=LaTeX formula in a MUC|desc=|link=popup|width=440]

Unfortunately, Modnok works only on Unix-like systems with LaTeX installed, so support for Windows will hardly arrive anytime soon.","Azoth Modnok allows to render and display LaTeX formulae directly in chat windows.

If a protocol supports rich text messages, Modnok may also replace formulae in outgoing messages with the corresponding images, so that your chatmates would see the nice rendered formulae instead of raw LaTeX code.

[img_assist|nid=192|title=LaTeX formula in a MUC|desc=|link=popup|width=440]

Unfortunately, Modnok works only on Unix-like systems with LaTeX installed, so support for Windows will hardly arrive anytime soon."
192,image,LaTeX formula in Azoth,1310428980,,"An example of a formulae rendered in Azoth with the [191: Modnok] plugin.

","An example of a formulae rendered in Azoth with the [191: Modnok] plugin.

"
194,image,Adium style in Azoth,1347818092,,Multiuser conference rendered an Adium chat style.,Multiuser conference rendered an Adium chat style.
195,image,"""Anna"" Adium style in Azoth",1347818156,,"Multiuser conference rendered with ""Anna"" chat style.","Multiuser conference rendered with ""Anna"" chat style."
196,page,Azoth AdiumStyles,1347818018,plugins-azoth-adiumstyles,"Azoth AdiumStyles provides support for Adium chat window styles. Both normal chats and multiuser conferences are supported.

[img_assist|nid=249|title=Adium style|desc=|link=popup|width=440]

[img_assist|nid=194|title=Adium style|desc=|link=popup|width=440]

[img_assist|nid=195|title=Adium style|desc=|link=popup|width=440]

Please note that this styling engine may be considerably slower than Azoth StandardStyles.","Azoth AdiumStyles provides support for Adium chat window styles. Both normal chats and multiuser conferences are supported.

[img_assist|nid=249|title=Adium style|desc=|link=popup|width=440]

[img_assist|nid=194|title=Adium style|desc=|link=popup|width=440]

[img_assist|nid=195|title=Adium style|desc=|link=popup|width=440]

Please note that this styling engine may be considerably slower than Azoth StandardStyles."
198,page,Aggregator BodyFetch,1310435806,plugins-aggregator-bodyfetch,"Aggregator BodyFetch plugin allows to automatically fetch full bodies of news items and replace the original teasers from RSS feeds with them, so that it appears like the full news stories were originally there.

Fetching is done according to little scripts called recipes. For this to work, a script provider like Qrosp should be installed. Please refer to the guide to [200: writing recipes] if you are interested in writing your own ones.","Aggregator BodyFetch plugin allows to automatically fetch full bodies of news items and replace the original teasers from RSS feeds with them, so that it appears like the full news stories were originally there.

Fetching is done according to little scripts called recipes. For this to work, a script provider like Qrosp should be installed. Please refer to the guide to [200: writing recipes] if you are interested in writing your own ones."
200,book,Writing recipes for BodyFetch,1310436841,development-aggregator-writing-recipes-for-bodyfetch,"<h2>Introduction</h2>

This guide introduces to writing recipes: small scripts for fetching full news bodies in [198: Aggregator BodyFetch].

Recipes are usually written in JavaScript or Python, and they contain all the required information and, possibly, algorithms for BodyFetch to get the full news stories.

Since only Qrosp plugin provides scripting support for now, and it currently supports only JavaScript and Python, only these languages are actually supported for now. And since Python support in the Qross library (which is used by Qrosp) is optional, it is recommended to write recipes in JavaScript. Because of that, we will use JavaScript during our examples.

Please note that the API is in its early stages now, and it would surely be extended and upgraded. Don't hesitate writing us your suggestions and ideas.

<h2>File locations</h2>

Custom user recipes are searched in the following directories:

<ul>
<li><code type=""bash"">~/.leechcraft/data/scripts/aggregator/recipes/qtscript/</code> for recipes in JavaScript.</li>
<li><code type=""bash"">~/.leechcraft/data/scripts/aggregator/recipes/python/</code> for recipes in Python.</li>
</ul>

All recipes can have any name, but it's recommended to use the site's domain name to simplify distinguishing them from each other.

JavaScript recipes may have <code type=""bash"">.js</code>, <code type=""bash"">.qs</code> or <code type=""bash"">.es</code> extension, while Python ones may only end with <code type=""bash"">.py</code>.

<h2>Basic API</h2>

Basic API is suitable for most cases.

The simplest recipe should have only two functions, <code type=""javascript"">CanHandle(link)</code> and <code type=""javascript"">KeepFirstTag()</code>.

<h3>CanHandle(link)</h3>

This function is called by BodyFetch to determine whether the recipe can handle news items from the given channel, which is identified by its link parameter. This function should return true if the recipe is written for this channel, otherwise it should return false.

An example function for Habrahabr.ru website would look like:

<code type=""javascript"">
function CanHandle(link)
{
        return link.indexOf(""http://habrahabr.ru/rss/"") == 0;
}
</code>

<h3>KeepFirstTag()</h3>

This function should return the list of CSS2 selectors that are used to find the elements to be considered as full news body. For each selector only first found element is considered (hence Keep<em>First</em>Tag), and if there are several selectors in the returned list, the result is constructed from the elements found according to them in the same order as selectors appear in the list. This may be useful for constructing the news body out of several parts of the page.

Selectors' outer XML is used as the result.

An example function for Habrahabr.ru would look like:

<code type=""javascript"">
function KeepFirstTag()
{
        return [ 'div[class=""content""]' ];
}
</code>","<h2>Introduction</h2>

This guide introduces to writing recipes: small scripts for fetching full news bodies in [198: Aggregator BodyFetch].

Recipes are usually written in JavaScript or Python, and they contain all the required information and, possibly, algorithms for BodyFetch to get the full news stories.

Since only Qrosp plugin provides scripting support for now, and it currently supports only JavaScript and Python, only these languages are actually supported for now. And since Python support in the Qross library (which is used by Qrosp) is optional, it is recommended to write recipes in JavaScript. Because of that, we will use JavaScript during our examples.

Please note that the API is in its early stages now, and it would surely be extended and upgraded. Don't hesitate writing us your suggestions and ideas.

<h2>File locations</h2>

Custom user recipes are searched in the following directories:

<ul>
<li><code type=""bash"">~/.leechcraft/data/scripts/aggregator/recipes/qtscript/</code> for recipes in JavaScript.</li>
<li><code type=""bash"">~/.leechcraft/data/scripts/aggregator/recipes/python/</code> for recipes in Python.</li>
</ul>

All recipes can have any name, but it's recommended to use the site's domain name to simplify distinguishing them from each other.

JavaScript recipes may have <code type=""bash"">.js</code>, <code type=""bash"">.qs</code> or <code type=""bash"">.es</code> extension, while Python ones may only end with <code type=""bash"">.py</code>.

<h2>Basic API</h2>

Basic API is suitable for most cases.

The simplest recipe should have only two functions, <code type=""javascript"">CanHandle(link)</code> and <code type=""javascript"">KeepFirstTag()</code>.

<h3>CanHandle(link)</h3>

This function is called by BodyFetch to determine whether the recipe can handle news items from the given channel, which is identified by its link parameter. This function should return true if the recipe is written for this channel, otherwise it should return false.

An example function for Habrahabr.ru website would look like:

<code type=""javascript"">
function CanHandle(link)
{
        return link.indexOf(""http://habrahabr.ru/rss/"") == 0;
}
</code>

<h3>KeepFirstTag()</h3>

This function should return the list of CSS2 selectors that are used to find the elements to be considered as full news body. For each selector only first found element is considered (hence Keep<em>First</em>Tag), and if there are several selectors in the returned list, the result is constructed from the elements found according to them in the same order as selectors appear in the list. This may be useful for constructing the news body out of several parts of the page.

Selectors' outer XML is used as the result.

An example function for Habrahabr.ru would look like:

<code type=""javascript"">
function KeepFirstTag()
{
        return [ 'div[class=""content""]' ];
}
</code>"
201,story,Development digest #8,1310553640,devel-digest-8,"This week we also mostly focused on the Azoth IM in LeechCraft, but, unlike the previous week, we mostly focused on features not directly related to XMPP rather than implementation of lots of XEPs. Some other plugins, like [7: Aggregator], weren't forgotten as well.

[img_assist|nid=192|title=LaTeX formula with Modnok|desc=|link=popup|align=right|width=220]

[img_assist|nid=194|title=An Adium style|desc=|link=popup|align=right|width=220]

[img_assist|nid=195|title=Another Adium style|desc=|link=popup|align=right|width=220]

So, the list of changes since previous devel digest follows:

<ul>
<li>A new plugin, SecMan SecureStorage, has been merged into <em>master</em> branch. This plugin provides an AES256-secured storage area for passwords and personal data <em>(thanks Akon32)</em>.</li>
<li>Added [191: Azoth Modnok] plugin for inline in-chat LaTeX rendering and display.</li>
<li>Added [196: Azoth AdiumStyles] plugin for, well, support for Adium styles. It is still experimental and quite basic, but, nevertheless, already usable.</li>
<li>Added Azoth Autoidler plugin for automatic change of status due to inactivity period.</li>
<li>Added [198: Aggregator BodyFetch] plugin for automatic fetching of full news bodies.</li>
<li>Implemented rich text formatting support in [143: Azoth] with the ability to format outgoing messages as well.</li>
<li>Added support for <a href=""http://xmpp.org/extensions/xep-0071.html"">XHTML-IM</a> to [144: Azoth Xoox].</li>
<li>Added support for publishing geolocation information to Azoth.</li>
<li>Azoth Xoox now also supports <a href=""http://xmpp.org/extensions/xep-0080.html"">Geolocation</a>.</li>
<li>Azoth now exposes options to add MUC participants to the contact list if their ID is known.</li>
<li>Improved rendering of history in Azoth ChatHistory, with saner nicks, for example.</li>
<li>Azoth now allows to set pre-nick and post-nick strings to be used when displaying nicks in chats.</li>
<li>fb2 export dialog in [7: Aggregator] now allows to set custom book name and genres.</li>
<li>Fixed generation of exported fb2 documents in Aggregator.</li>
<li>Updated Hunspell implementation in Azoth Rosenthal which hopefully would fix segfaults with some dictionaries.</li>
<li>Fixed segfault in LeechCraft Core when disabling Azoth but leaving plugins for it enabled.</li>
<li>Lots of bugfixes in Azoth ChatHistory, p100q, and such.</li>
</ul>

We've also renamed the <code>libplugininterface</code> support library and corresponding header files to <code>liblcutil</code> to better reflect the purpose of that library.

And, well, we've finally introduced the ""Prioritized handlers"" concept, but it isn't much used yet, so we'll write about it when it'd be used more.

<em>This digest was written with 0.4.80-248-gd746dae as HEAD.</em>","This week we also mostly focused on the Azoth IM in LeechCraft, but, unlike the previous week, we mostly focused on features not directly related to XMPP rather than implementation of lots of XEPs. Some other plugins, like [7: Aggregator], weren't forgotten as well.

[img_assist|nid=192|title=LaTeX formula with Modnok|desc=|link=popup|align=right|width=220]

[img_assist|nid=194|title=An Adium style|desc=|link=popup|align=right|width=220]

[img_assist|nid=195|title=Another Adium style|desc=|link=popup|align=right|width=220]

So, the list of changes since previous devel digest follows:

<ul>
<li>A new plugin, SecMan SecureStorage, has been merged into <em>master</em> branch. This plugin provides an AES256-secured storage area for passwords and personal data <em>(thanks Akon32)</em>.</li>
<li>Added [191: Azoth Modnok] plugin for inline in-chat LaTeX rendering and display.</li>
<li>Added [196: Azoth AdiumStyles] plugin for, well, support for Adium styles. It is still experimental and quite basic, but, nevertheless, already usable.</li>
<li>Added Azoth Autoidler plugin for automatic change of status due to inactivity period.</li>
<li>Added [198: Aggregator BodyFetch] plugin for automatic fetching of full news bodies.</li>
<li>Implemented rich text formatting support in [143: Azoth] with the ability to format outgoing messages as well.</li>
<li>Added support for <a href=""http://xmpp.org/extensions/xep-0071.html"">XHTML-IM</a> to [144: Azoth Xoox].</li>
<li>Added support for publishing geolocation information to Azoth.</li>
<li>Azoth Xoox now also supports <a href=""http://xmpp.org/extensions/xep-0080.html"">Geolocation</a>.</li>
<li>Azoth now exposes options to add MUC participants to the contact list if their ID is known.</li>
<li>Improved rendering of history in Azoth ChatHistory, with saner nicks, for example.</li>
<li>Azoth now allows to set pre-nick and post-nick strings to be used when displaying nicks in chats.</li>
<li>fb2 export dialog in [7: Aggregator] now allows to set custom book name and genres.</li>
<li>Fixed generation of exported fb2 documents in Aggregator.</li>
<li>Updated Hunspell implementation in Azoth Rosenthal which hopefully would fix segfaults with some dictionaries.</li>
<li>Fixed segfault in LeechCraft Core when disabling Azoth but leaving plugins for it enabled.</li>
<li>Lots of bugfixes in Azoth ChatHistory, p100q, and such.</li>
</ul>

We've also renamed the <code>libplugininterface</code> support library and corresponding header files to <code>liblcutil</code> to better reflect the purpose of that library.

And, well, we've finally introduced the ""Prioritized handlers"" concept, but it isn't much used yet, so we'll write about it when it'd be used more.

<em>This digest was written with 0.4.80-248-gd746dae as HEAD.</em>"
203,story,Development digest #9,1311272205,devel-digest-9,"On last week a huge and long-awaited change has been incorporated into LeechCraft main source tree: Chrome-style tabbar. Well, actually it's no so Chromish, as the title bar is still present and not replaced by tabs. The new tabbar is placed above the tab toolbar, which is more intuitive, and it also contains the menu button and quick launch area, so there is no need for a separate toolbar for that anymore, and that frees space a lot. The new tabbar system also supports pinning tabs, but currently the pinning state isn't saved between launches.

[img_assist|nid=204|title=New tabs|desc=|link=popup|width=440]

Unfortunately, Tab++ still doesn't work with the new tabs, but hopefully that would be fixed soon.

Thanks to some fixes in [144: Azoth Xoox], XMPP protocol now should be much more robust, and PEP-based features should work with ejabberd-based servers as well.

There are lots of other changes as well, among them:

[img_assist|nid=205|title=TabsList|desc=|link=popup|align=right|width=220]

<ul>
<li>Added Azoth LastSeen for client-side recording of contacts' last online and availability time.</li>
<li>Added new module, TabsList, that allows one to show the list of currently opened tabs and quickly select one of them.</li>
<li>Glance feature moved from the Core to a separate plugin <em>(thanks Maledictus)</em>.</li>
<li>Added full support for CAPTCHA-protected rooms in [144: Azoth Xoox]: no links should be clicked now to enter CAPTCHA.</li>
<li>[143: Azoth] now loads last few messages (amount is configurable) from the history when opening new chat.</li>
<li>Begun work on nice QML-based popup for tray notifications in the AdvancedNotifications module.</li>
<li>Begun work on metacontacts support.</li>
<li>Laid foundation for PGP support in [143: Azoth] and [144: Azoth Xoox] <em>(thanks Alex Ermolov)</em>.</li>
<li>Added actions for viewing VCard and history to chat tab toolbar.</li>
<li>Added smiles chooser to message formatter bar in chat tabs.</li>
<li>Added buttons for recommending and adding to bookmarks for posts and comments in [161: Azoth p100q].</li>
<li>Number of MUC participants is shown now in MUC chat tabs.</li>
<li>A huge fix for entity caps in [144: Azoth Xoox]: now they are calculated correctly.</li>
<li>Fixed spaces after some commands in [161: Azoth p100q].</li>
<li>Fixed status changes and status handling in [143: Azoth].</li>
<li>ShellOpen now offers to open things by notification instead of a modal dialog. Less annoying.</li>
<li>Fixes and kludges in FB2 export feature in [7: Aggregator].</li>
<li>Fixed quite a big memory leak in tabs tooltip handling.</li>
<li>Fixed leaking toolbars in Azoth.</li>
<li>Lots of bugfixes in [145: Azoth Acetamide].</li>
<li>Azoth HiLi doesn't check big message bodies for highlights now.</li>
</ul>

<em>This digest was against 0.4.80-539-gb671ae4 as HEAD.</em>","On last week a huge and long-awaited change has been incorporated into LeechCraft main source tree: Chrome-style tabbar. Well, actually it's no so Chromish, as the title bar is still present and not replaced by tabs. The new tabbar is placed above the tab toolbar, which is more intuitive, and it also contains the menu button and quick launch area, so there is no need for a separate toolbar for that anymore, and that frees space a lot. The new tabbar system also supports pinning tabs, but currently the pinning state isn't saved between launches.

[img_assist|nid=204|title=New tabs|desc=|link=popup|width=440]

Unfortunately, Tab++ still doesn't work with the new tabs, but hopefully that would be fixed soon.

Thanks to some fixes in [144: Azoth Xoox], XMPP protocol now should be much more robust, and PEP-based features should work with ejabberd-based servers as well.

There are lots of other changes as well, among them:

[img_assist|nid=205|title=TabsList|desc=|link=popup|align=right|width=220]

<ul>
<li>Added Azoth LastSeen for client-side recording of contacts' last online and availability time.</li>
<li>Added new module, TabsList, that allows one to show the list of currently opened tabs and quickly select one of them.</li>
<li>Glance feature moved from the Core to a separate plugin <em>(thanks Maledictus)</em>.</li>
<li>Added full support for CAPTCHA-protected rooms in [144: Azoth Xoox]: no links should be clicked now to enter CAPTCHA.</li>
<li>[143: Azoth] now loads last few messages (amount is configurable) from the history when opening new chat.</li>
<li>Begun work on nice QML-based popup for tray notifications in the AdvancedNotifications module.</li>
<li>Begun work on metacontacts support.</li>
<li>Laid foundation for PGP support in [143: Azoth] and [144: Azoth Xoox] <em>(thanks Alex Ermolov)</em>.</li>
<li>Added actions for viewing VCard and history to chat tab toolbar.</li>
<li>Added smiles chooser to message formatter bar in chat tabs.</li>
<li>Added buttons for recommending and adding to bookmarks for posts and comments in [161: Azoth p100q].</li>
<li>Number of MUC participants is shown now in MUC chat tabs.</li>
<li>A huge fix for entity caps in [144: Azoth Xoox]: now they are calculated correctly.</li>
<li>Fixed spaces after some commands in [161: Azoth p100q].</li>
<li>Fixed status changes and status handling in [143: Azoth].</li>
<li>ShellOpen now offers to open things by notification instead of a modal dialog. Less annoying.</li>
<li>Fixes and kludges in FB2 export feature in [7: Aggregator].</li>
<li>Fixed quite a big memory leak in tabs tooltip handling.</li>
<li>Fixed leaking toolbars in Azoth.</li>
<li>Lots of bugfixes in [145: Azoth Acetamide].</li>
<li>Azoth HiLi doesn't check big message bodies for highlights now.</li>
</ul>

<em>This digest was against 0.4.80-539-gb671ae4 as HEAD.</em>"
204,image,Chrome-style tabs,1311270485,,"Chrome-style tabs in LeechCraft, with three tabs pinned (on the left).","Chrome-style tabs in LeechCraft, with three tabs pinned (on the left)."
205,image,TabsList,1311270828,,TabsList plugin in action.,TabsList plugin in action.
207,story,LeechCraft 0.4.85 is released,1328777157,leechcraft-0.4.85-is-released,"LeechCraft milestone 0.4.85 ""Co-tick"" is just released!

This milestone is quite raw since it incorporates lots of changes and new features, but we couldn't help being in hurry to deliver all the new tasties, so some subtle bugs may manifest themselves suddenly, but don't hesitate reporting them to us!

The hottest news is that tabs have finally moved to the top of the window, so that the plugins toolbar is now under them, which is a bit more intuitive. Tabbar has been merged with main menu and quick launch area, so about 30 pixels of vertical space has been freed as well, and the interface now looks cleaner and more mature.

Here's the screenshot of the new interface:

[img_assist|nid=204|title=New tabs|desc=|link=popup|width=440]

Eagle-eyed one could notice three little title-less tabs in the left. Yes, the new tabs interface also supports pinning tabs, but the pinning state currently isn't saved between LeechCraft launches.

Unfortunately, Tab++ still doesn't work with the new tabs, but hopefully that would be fixed soon.

We've fixed two bugs in XMPP implementation, so XMPP protocol should be much more robust now, and things like PEP should really work everywhere, especially on ejabberd servers. Another important fix is for tooltips: we don't leak them anymore, so memory consumption growth should be much slower now.

We've added a bunch of new plugins, most of them for [143: Azoth]. Here's the list:

<ul>
<li>[198: Aggregator BodyFetch] plugin for automatic fetching of full news bodies instead of short teasers. Segfaults sometimes, but is already usable.</li>
<li>[196: Azoth AdiumStyles] for, well, support for Adium styles. It is still experimental and quite basic, but, nevertheless, already usable.</li>
<li>Azoth Autoidler for automatic change of status due to inactivity period.</li>
<li>Azoth LastSeen for client-side recording of contacts' last online and availability time. It doesn't depend on the concrete protocol implementation.</li>
<li>[191: Azoth Modnok] for inline in-chat LaTeX rendering and display. It doesn't depend on the underlying protocol, and if the protocol supports rich text formatting in outgoing messages, it is able to replace the formulas with corresponding images in outgoing messages as well, so your buddies would see nice rendered formulas instead of raw LaTeX code, even if their client doesn't have a LaTeX formatter.</li>
<li>Glance feature moved from the Core to a separate plugin.</li>
<li>SecMan SecureStorage has been merged into <em>master</em> branch. This plugin provides an AES256-secured storage area for passwords and personal data.</li>
<li>TabsList for showing the list of currently opened tabs and quickly selecting one of them.</li>
</ul>

Among changes in already existing plugins:

<ul>
<li>Added full support for CAPTCHA-protected rooms in [144: Azoth Xoox]: no links should be clicked now to enter CAPTCHA.</li>
<li>Implemented rich text formatting support in [143: Azoth] with the ability to format outgoing messages as well.</li>
<li>Added support for <a href=""http://xmpp.org/extensions/xep-0071.html"">XHTML-IM</a> to [144: Azoth Xoox].</li>
<li>Added support for publishing geolocation information to Azoth.</li>
<li>Azoth Xoox now also supports <a href=""http://xmpp.org/extensions/xep-0080.html"">Geolocation</a>.</li>
<li>Azoth now exposes options to add MUC participants to the contact list if their ID is known. Quite a small and easy change, but quite handy.</li>
<li>Improved rendering of history in Azoth ChatHistory, with saner nicks, for example.</li>
<li>fb2 export dialog in [7: Aggregator] now allows to set custom book name and genres.</li>
<li>[143: Azoth] now loads last few messages (amount is configurable) from the history when opening new chat.</li>
<li>Enriched chat tabs with actions like the ones for viewing VCard and history in chat tab toolbar and emoticons chooser in message formatter bar.</li>
<li>Added buttons for recommending and adding to bookmarks for posts and comments in [161: Azoth p100q].</li>
<li>ShellOpen now offers to open things by notification instead of a modal dialog. Less annoying.</li>
</ul>

Lots of bugs have been fixed, among them:

<ul>
<li>A huge fix for entity caps in [144: Azoth Xoox]: now they are calculated correctly.</li>
<li>Fixed spaces after some commands in [161: Azoth p100q].</li>
<li>Fixed status changes and status handling in [143: Azoth].</li>
<li>Fixes and kludges in fb2 export feature in [7: Aggregator].</li>
<li>Fixed quite a big memory leak in tabs tooltip handling.</li>
<li>Fixed leaking toolbars in Azoth.</li>
<li>Lots of bugfixes in [145: Azoth Acetamide].</li>
<li>Azoth HiLi doesn't check big message bodies for highlights now, otherwise Qt's regexp engine hang.</li>
</ul>

We've also begun working on features for next milestones, for example:

<ul>
<li>Nice QML-based popup for tray notifications in the Advanced Notifications module.</li>
<li>Metacontacts support.</li>
<li>Foundation for PGP support in [143: Azoth] and [144: Azoth Xoox].</li>
</ul>

More changes are covered in details in the corresponding development digests: [201: #8] and [203: #9].

And now some screenshots:

[img_assist|nid=205|title=TabsList module|desc=|link=popup|width=440]

[img_assist|nid=192|title=LaTeX formula with Modnok|desc=|link=popup|width=440]

[img_assist|nid=194|title=An Adium style|desc=|link=popup|width=440]

[img_assist|nid=195|title=Another Adium style|desc=|link=popup|width=440]

Packages for Ubuntu are in Launchpad queue to be compiled, Gentoo ebuilds are already available in the rion overlay, openSUSE, Fedora and Windows builds are coming.

There are still lots of interesting and tasty things to do, but this milestone gives a basic impression of what LeechCraft 0.5 would look like.
Please, leave your ideas, reports, questions and any other feedback.","LeechCraft milestone 0.4.85 ""Co-tick"" is just released!

This milestone is quite raw since it incorporates lots of changes and new features, but we couldn't help being in hurry to deliver all the new tasties, so some subtle bugs may manifest themselves suddenly, but don't hesitate reporting them to us!

The hottest news is that tabs have finally moved to the top of the window, so that the plugins toolbar is now under them, which is a bit more intuitive. Tabbar has been merged with main menu and quick launch area, so about 30 pixels of vertical space has been freed as well, and the interface now looks cleaner and more mature.

Here's the screenshot of the new interface:

[img_assist|nid=204|title=New tabs|desc=|link=popup|width=440]

Eagle-eyed one could notice three little title-less tabs in the left. Yes, the new tabs interface also supports pinning tabs, but the pinning state currently isn't saved between LeechCraft launches.

Unfortunately, Tab++ still doesn't work with the new tabs, but hopefully that would be fixed soon.

We've fixed two bugs in XMPP implementation, so XMPP protocol should be much more robust now, and things like PEP should really work everywhere, especially on ejabberd servers. Another important fix is for tooltips: we don't leak them anymore, so memory consumption growth should be much slower now.

We've added a bunch of new plugins, most of them for [143: Azoth]. Here's the list:

<ul>
<li>[198: Aggregator BodyFetch] plugin for automatic fetching of full news bodies instead of short teasers. Segfaults sometimes, but is already usable.</li>
<li>[196: Azoth AdiumStyles] for, well, support for Adium styles. It is still experimental and quite basic, but, nevertheless, already usable.</li>
<li>Azoth Autoidler for automatic change of status due to inactivity period.</li>
<li>Azoth LastSeen for client-side recording of contacts' last online and availability time. It doesn't depend on the concrete protocol implementation.</li>
<li>[191: Azoth Modnok] for inline in-chat LaTeX rendering and display. It doesn't depend on the underlying protocol, and if the protocol supports rich text formatting in outgoing messages, it is able to replace the formulas with corresponding images in outgoing messages as well, so your buddies would see nice rendered formulas instead of raw LaTeX code, even if their client doesn't have a LaTeX formatter.</li>
<li>Glance feature moved from the Core to a separate plugin.</li>
<li>SecMan SecureStorage has been merged into <em>master</em> branch. This plugin provides an AES256-secured storage area for passwords and personal data.</li>
<li>TabsList for showing the list of currently opened tabs and quickly selecting one of them.</li>
</ul>

Among changes in already existing plugins:

<ul>
<li>Added full support for CAPTCHA-protected rooms in [144: Azoth Xoox]: no links should be clicked now to enter CAPTCHA.</li>
<li>Implemented rich text formatting support in [143: Azoth] with the ability to format outgoing messages as well.</li>
<li>Added support for <a href=""http://xmpp.org/extensions/xep-0071.html"">XHTML-IM</a> to [144: Azoth Xoox].</li>
<li>Added support for publishing geolocation information to Azoth.</li>
<li>Azoth Xoox now also supports <a href=""http://xmpp.org/extensions/xep-0080.html"">Geolocation</a>.</li>
<li>Azoth now exposes options to add MUC participants to the contact list if their ID is known. Quite a small and easy change, but quite handy.</li>
<li>Improved rendering of history in Azoth ChatHistory, with saner nicks, for example.</li>
<li>fb2 export dialog in [7: Aggregator] now allows to set custom book name and genres.</li>
<li>[143: Azoth] now loads last few messages (amount is configurable) from the history when opening new chat.</li>
<li>Enriched chat tabs with actions like the ones for viewing VCard and history in chat tab toolbar and emoticons chooser in message formatter bar.</li>
<li>Added buttons for recommending and adding to bookmarks for posts and comments in [161: Azoth p100q].</li>
<li>ShellOpen now offers to open things by notification instead of a modal dialog. Less annoying.</li>
</ul>

Lots of bugs have been fixed, among them:

<ul>
<li>A huge fix for entity caps in [144: Azoth Xoox]: now they are calculated correctly.</li>
<li>Fixed spaces after some commands in [161: Azoth p100q].</li>
<li>Fixed status changes and status handling in [143: Azoth].</li>
<li>Fixes and kludges in fb2 export feature in [7: Aggregator].</li>
<li>Fixed quite a big memory leak in tabs tooltip handling.</li>
<li>Fixed leaking toolbars in Azoth.</li>
<li>Lots of bugfixes in [145: Azoth Acetamide].</li>
<li>Azoth HiLi doesn't check big message bodies for highlights now, otherwise Qt's regexp engine hang.</li>
</ul>

We've also begun working on features for next milestones, for example:

<ul>
<li>Nice QML-based popup for tray notifications in the Advanced Notifications module.</li>
<li>Metacontacts support.</li>
<li>Foundation for PGP support in [143: Azoth] and [144: Azoth Xoox].</li>
</ul>

More changes are covered in details in the corresponding development digests: [201: #8] and [203: #9].

And now some screenshots:

[img_assist|nid=205|title=TabsList module|desc=|link=popup|width=440]

[img_assist|nid=192|title=LaTeX formula with Modnok|desc=|link=popup|width=440]

[img_assist|nid=194|title=An Adium style|desc=|link=popup|width=440]

[img_assist|nid=195|title=Another Adium style|desc=|link=popup|width=440]

Packages for Ubuntu are in Launchpad queue to be compiled, Gentoo ebuilds are already available in the rion overlay, openSUSE, Fedora and Windows builds are coming.

There are still lots of interesting and tasty things to do, but this milestone gives a basic impression of what LeechCraft 0.5 would look like.
Please, leave your ideas, reports, questions and any other feedback."
209,book,Advanced Notifications,1364892401,development-advanced-notifications,"This page documents the Advanced Notifications framework protocols, conventions and such.

<h2>Basic usage</h2>

The easiest way to create an AN-enabled notification entity is to use the <code>Util::MakeAN()</code>, documented on the <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html"">Util namespace page</a>. It is as simple as the following (simplifed example from the BitTorrent plugin):
<code>
QString name; // torrent name
auto entity = Util::MakeAN (""BitTorrent"",			// standard notification header
        tr (""Torrent finished: %1"").arg (name),			// standard notification text
        PInfo_,							// notification priority
        ""org.LeechCraft.BitTorrent"",				// the ID of the plugin that sent this notification
        AN::CatDownloads,					// the category of this notification
        AN::TypeDownloadFinished,				// the type of this notification
        ""org.LC.Plugins.BitTorrent.DLFinished/"" + name,		// the ID of this event
        QStringList (name));					// the visual path of this event

// further actions like on a normal notification entity
auto nah = new Util::NotificationActionHandler (entity);
nah->AddFunction (tr (""Show folder""),
    [savePathStr] () { QDesktopServices::openUrl (QFileInfo (savePathStr).absolutePath ()); });
</code>
This code creates an Advanced Notifications-enabled entity of <em>Downloads</em> category and <em>Download finished</em> type. Other available categories and types are listed in the <a href=""http://doc.leechcraft.org/core/constants_8h.html"">interfaces/an/constants.h</a> header file.

<h3>Event IDs, count and deltas</h3>

Several similar events can occur sequentially, like several incoming messages from a single IM contact. This case should be distinguished from several messages from several different contacts, so that all notifications about messages from each contact can be ""compacted"" into one notification. Event IDs serve exactly this aim: if two different entities have the same event ID, they are compacted into one notification.

What compaction exactly means depends on the notification method. For example, there will be only one entry in the tray about messages from a single contact, and if 100 messages are recieved from a single contact, only one popup notification will appear.

Despite the event IDs, one needs to keep track of how much events are generated with a single event ID, and here event count and deltas come into play:
<ul>
<li><em>DeltaCount</em> field specifies a change to the total count of the events with the given event ID. It can be both positive and negative. It is a parameter to <code>MakeAN()</code> with default value of 1. If <em>DeltaCount</em>, the <em>Count</em> field is used instead.</li>
<li><em>Count</em> field specifies the total count of the events with the given event ID. It can be positive or 0. The latter case means that there is no need to show the notification for the given event ID anymore, for example, because the user has read all the messages from the given contact.</li>
</ul>

There is a helper utility function <code>Util::MakeANCancel()</code> used to make a ""cancelling"" advanced notifications entity. It is documented <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html"">here</a>.

<h2>Details</h2>

Basically, an AN-enabled entity is also a valid standard notification entity, so it may be created by using <code>Util::MakeNotification()</code> function (see <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html"">this page</a> for documentation). Then, several additional fields should be added to the <code>Entity::Additional_</code> map for the entity to be a valid notification entry.

It's worth noting, however, that an AN entity may have the <code>""x-leechcraft/notification+advanced""</code> MIME instead of plain <code>""x-leechcraft/notification""</code>. It is useful for cases when you don't want the notification entity to be handled unless a corresponding AN plugin is installed and configured. For example, an IM client would emit notifications about standard messages with a standard notification MIME, and notifications about new messages in multi-user chatrooms with this advanced MIME. This way, notifications about standard messages would be shown even if an AN plugin hasn't been installed, but MUC messages notifications would be shown only if the user has configured the corresponding rules. This is useful since most users wouldn't want to know about every other messages in any MUC they are present.

<h2>AN fields</h2>

All the fields' values have <code>QString</code> type if not explicitly mentioned otherwise.

Below is the list of ""standard"" notification fields (plugins may define their own ones).

<h3>org.LC.AdvNotifications.SenderID</h3>

The ID of the plugin the sent this notification. It MUST match the value returned from <code>IInfo::GetPluginID()</code>.

<h3>org.LC.AdvNotifications.EventID</h3>

The string uniquely identifying the semantics of this event. For example, notifications about two different incoming messages from the same contact would have the same Event ID, while a notification about incoming messages from different contacts would have different Event IDs.

<h3>org.LC.AdvNotifications.EventCategory</h3>

The category (or domain) of this event.

The available event categories are listed in the <code>util/an/constants.h</code> header, documented <a href=""http://doc.leechcraft.org/core/constants_8h.html"">here</a>.

<h3>org.LC.AdvNotifications.EventType</h3>

The type of the event that generated this notification. For the sake of convenience, the types description is divided by event type domains, which also correspond to the event category field.

The available event types are listed in the <code>util/an/constants.h</code> header, documented <a href=""http://doc.leechcraft.org/core/constants_8h.html"">here</a>.

<h3>org.LC.AdvNotifications.VisualPath</h3>

This field contains the list of strings (<code>QStringList</code>) that is used to represent the path to the visual representation of the event. For example, if the AN handler represents the events as a system of actions in a menu tree, then the visual path defines the names of the menu items.

<h3>org.LC.AdvNotifications.Count</h3>

This field contains an integer representing the count of the events with the <code>""org.LC.AdvNotifications.EventID""</code> equal to the ID of this notification.

For example, an IM client would set this field to the count of unread messages from a given contact when notifying about new incoming message from that contact. When the user reads all messages from the contact, the IM client would emit a notification with the corresponding event ID and this field set to 0.

When emitting a ""reset"" event (with the counter equal to 0), it's recommended to use the special category (<code>org.LC.AdvNotifications.EventCategory</code>): the cancellation category <code>""org.LC.AdvNotifications.Cancel""</code>.

<h3>org.LC.AdvNotifications.DeltaCount</h3>

An alternative way to set the number of events with the <code>""org.LC.AdvNotifications.EventID""</code> equal to the ID of this notification.

This field contains an integer representing the number which should be added to the current count of events with this ID. Of course, the value may be negative. If this value is present and is not 0, it is used, and the <code>""org.LC.AdvNotifications.Count""</code> field is ignored.

<h3>org.LC.AdvNotifications.ExtendedText</h3>

A possibly HTML-formatted string containing a brief description of the event, suitable for displaying on a menu action, for example. For instance, an IM client would set something like ""3 new messages"" here.

This field is unique per event ID: the displayed text is overwritten by the latest received notification in correct AN handlers.

<h3>org.LC.AdvNotifications.FullText</h3>

A possibly HTML-formatted string containing a long description of the event. For example, <code type=""html"">3 new messages from <em>BuddyName</em></code>.

This field is unique in the same sense as the <code>""org.LC.AdvNotifications.ExtendedText""</code> field.

<h2>Notes regarding human-readable text fields</h2>

By design each field should contain the text that's relevant to all the notifications with the same event ID. Text can be chosen to be further specialized by the user via the notifications configuration mechanism, if the notifications sender provides the required contextual information about its specific fields. For example, [143: Azoth] could also add a field named <code>org.LC.Plugins.Azoth.Msg</code> containing the message text, and the user would then be able to configure a well-written AN handler in such a way that the AN handler would show these texts as well.","This page documents the Advanced Notifications framework protocols, conventions and such.

<h2>Basic usage</h2>

The easiest way to create an AN-enabled notification entity is to use the <code>Util::MakeAN()</code>, documented on the <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html"">Util namespace page</a>. It is as simple as the following (simplifed example from the BitTorrent plugin):
<code>
QString name; // torrent name
auto entity = Util::MakeAN (""BitTorrent"",			// standard notification header
        tr (""Torrent finished: %1"").arg (name),			// standard notification text
        PInfo_,							// notification priority
        ""org.LeechCraft.BitTorrent"",				// the ID of the plugin that sent this notification
        AN::CatDownloads,					// the category of this notification
        AN::TypeDownloadFinished,				// the type of this notification
        ""org.LC.Plugins.BitTorrent.DLFinished/"" + name,		// the ID of this event
        QStringList (name));					// the visual path of this event

// further actions like on a normal notification entity
auto nah = new Util::NotificationActionHandler (entity);
nah->AddFunction (tr (""Show folder""),
    [savePathStr] () { QDesktopServices::openUrl (QFileInfo (savePathStr).absolutePath ()); });
</code>
This code creates an Advanced Notifications-enabled entity of <em>Downloads</em> category and <em>Download finished</em> type. Other available categories and types are listed in the <a href=""http://doc.leechcraft.org/core/constants_8h.html"">interfaces/an/constants.h</a> header file.

<h3>Event IDs, count and deltas</h3>

Several similar events can occur sequentially, like several incoming messages from a single IM contact. This case should be distinguished from several messages from several different contacts, so that all notifications about messages from each contact can be ""compacted"" into one notification. Event IDs serve exactly this aim: if two different entities have the same event ID, they are compacted into one notification.

What compaction exactly means depends on the notification method. For example, there will be only one entry in the tray about messages from a single contact, and if 100 messages are recieved from a single contact, only one popup notification will appear.

Despite the event IDs, one needs to keep track of how much events are generated with a single event ID, and here event count and deltas come into play:
<ul>
<li><em>DeltaCount</em> field specifies a change to the total count of the events with the given event ID. It can be both positive and negative. It is a parameter to <code>MakeAN()</code> with default value of 1. If <em>DeltaCount</em>, the <em>Count</em> field is used instead.</li>
<li><em>Count</em> field specifies the total count of the events with the given event ID. It can be positive or 0. The latter case means that there is no need to show the notification for the given event ID anymore, for example, because the user has read all the messages from the given contact.</li>
</ul>

There is a helper utility function <code>Util::MakeANCancel()</code> used to make a ""cancelling"" advanced notifications entity. It is documented <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html"">here</a>.

<h2>Details</h2>

Basically, an AN-enabled entity is also a valid standard notification entity, so it may be created by using <code>Util::MakeNotification()</code> function (see <a href=""http://doc.leechcraft.org/core/namespace_leech_craft_1_1_util.html"">this page</a> for documentation). Then, several additional fields should be added to the <code>Entity::Additional_</code> map for the entity to be a valid notification entry.

It's worth noting, however, that an AN entity may have the <code>""x-leechcraft/notification+advanced""</code> MIME instead of plain <code>""x-leechcraft/notification""</code>. It is useful for cases when you don't want the notification entity to be handled unless a corresponding AN plugin is installed and configured. For example, an IM client would emit notifications about standard messages with a standard notification MIME, and notifications about new messages in multi-user chatrooms with this advanced MIME. This way, notifications about standard messages would be shown even if an AN plugin hasn't been installed, but MUC messages notifications would be shown only if the user has configured the corresponding rules. This is useful since most users wouldn't want to know about every other messages in any MUC they are present.

<h2>AN fields</h2>

All the fields' values have <code>QString</code> type if not explicitly mentioned otherwise.

Below is the list of ""standard"" notification fields (plugins may define their own ones).

<h3>org.LC.AdvNotifications.SenderID</h3>

The ID of the plugin the sent this notification. It MUST match the value returned from <code>IInfo::GetPluginID()</code>.

<h3>org.LC.AdvNotifications.EventID</h3>

The string uniquely identifying the semantics of this event. For example, notifications about two different incoming messages from the same contact would have the same Event ID, while a notification about incoming messages from different contacts would have different Event IDs.

<h3>org.LC.AdvNotifications.EventCategory</h3>

The category (or domain) of this event.

The available event categories are listed in the <code>util/an/constants.h</code> header, documented <a href=""http://doc.leechcraft.org/core/constants_8h.html"">here</a>.

<h3>org.LC.AdvNotifications.EventType</h3>

The type of the event that generated this notification. For the sake of convenience, the types description is divided by event type domains, which also correspond to the event category field.

The available event types are listed in the <code>util/an/constants.h</code> header, documented <a href=""http://doc.leechcraft.org/core/constants_8h.html"">here</a>.

<h3>org.LC.AdvNotifications.VisualPath</h3>

This field contains the list of strings (<code>QStringList</code>) that is used to represent the path to the visual representation of the event. For example, if the AN handler represents the events as a system of actions in a menu tree, then the visual path defines the names of the menu items.

<h3>org.LC.AdvNotifications.Count</h3>

This field contains an integer representing the count of the events with the <code>""org.LC.AdvNotifications.EventID""</code> equal to the ID of this notification.

For example, an IM client would set this field to the count of unread messages from a given contact when notifying about new incoming message from that contact. When the user reads all messages from the contact, the IM client would emit a notification with the corresponding event ID and this field set to 0.

When emitting a ""reset"" event (with the counter equal to 0), it's recommended to use the special category (<code>org.LC.AdvNotifications.EventCategory</code>): the cancellation category <code>""org.LC.AdvNotifications.Cancel""</code>.

<h3>org.LC.AdvNotifications.DeltaCount</h3>

An alternative way to set the number of events with the <code>""org.LC.AdvNotifications.EventID""</code> equal to the ID of this notification.

This field contains an integer representing the number which should be added to the current count of events with this ID. Of course, the value may be negative. If this value is present and is not 0, it is used, and the <code>""org.LC.AdvNotifications.Count""</code> field is ignored.

<h3>org.LC.AdvNotifications.ExtendedText</h3>

A possibly HTML-formatted string containing a brief description of the event, suitable for displaying on a menu action, for example. For instance, an IM client would set something like ""3 new messages"" here.

This field is unique per event ID: the displayed text is overwritten by the latest received notification in correct AN handlers.

<h3>org.LC.AdvNotifications.FullText</h3>

A possibly HTML-formatted string containing a long description of the event. For example, <code type=""html"">3 new messages from <em>BuddyName</em></code>.

This field is unique in the same sense as the <code>""org.LC.AdvNotifications.ExtendedText""</code> field.

<h2>Notes regarding human-readable text fields</h2>

By design each field should contain the text that's relevant to all the notifications with the same event ID. Text can be chosen to be further specialized by the user via the notifications configuration mechanism, if the notifications sender provides the required contextual information about its specific fields. For example, [143: Azoth] could also add a field named <code>org.LC.Plugins.Azoth.Msg</code> containing the message text, and the user would then be able to configure a well-written AN handler in such a way that the AN handler would show these texts as well."
210,page,AdvancedNotifications,1388389569,plugins-advancednotifications,"AdvancedNotifications plugin provides support for the Advanced Notifications framework: a highly configurable, flexible and powerful notifications system.

This plugin allows one to define a set of rules for handling different events and notifying user about them. AdvancedNotifications currently supports several notification methods: via system tray, via standard visual notifications, via sound notifications and by invoking an external command. It comes with a set of predefined rules suitable for typical user needs.

AdvancedNotifications also supports creating rules directly from other plugins, so that [143: Azoth] can offer creating a notification about a user changing status in two clicks, for example.

<h2>Rules</h2>

AdvancedNotifications works by matching each event notification against a list of rules defined by the user (of course, there is a pretty sane default setup). The rules are matched from top to bottom. These rules contain a set of conditions that must be fulfilled for the rule to be triggered.

[img_assist|nid=212|title=List of rules|desc=|link=popup|width=440]

Different plugins may define additional fields that could be used as conditions in the rules. For example, [143: Azoth] defines such fields as sender name, sender ID, sender groups, message body, etc.

[img_assist|nid=213|title=Field matchers|desc=|link=popup|width=440]

So, for example, a rule could be written to ignore all the messages from a given contact, unless they contain some keyword, or a different notifications sound may be used for incoming messages from, say, ""Personal"" group.

<h2>Visual method</h2>

This notifier uses another visual notifications plugins already present in LeechCraft, like [14: DBusManager]'s libnotify support or [155: Kinotify].

AdvancedNotifications plugin introduces quite a handy feature though: identical notifications are compressed into one, so that, for example, when you come online and get a lot of messages from the same contact, you'd see only one notification about these messages.

<h2>System tray method</h2>

System tray notifier is designed to be used for events that user must be informed about.

It displays different icons for different categories (IM is currently supported, News is coming) and provides a fancy tooltip with the list of events and corresponding actions (if any). Old-style menu is also supported by right-clicking the corresponding category icon. It also allows to enable event counter for different categories, which draw the amount of events over the icon.

[img_assist|nid=211|title=System tray notifier|desc=|link=popup|width=440]

<h2>Sound method</h2>

Notification rules may also define the sound to play when an event occurs.

As with visual method, AdvancedNotifications doesn't play these sounds by itself, instead, another plugin is used (currently LMP only).

There are some predefined rules with corresponding sounds, for example, on incoming message, multiuser chat highlight, and such.","AdvancedNotifications plugin provides support for the Advanced Notifications framework: a highly configurable, flexible and powerful notifications system.

This plugin allows one to define a set of rules for handling different events and notifying user about them. AdvancedNotifications currently supports several notification methods: via system tray, via standard visual notifications, via sound notifications and by invoking an external command. It comes with a set of predefined rules suitable for typical user needs.

AdvancedNotifications also supports creating rules directly from other plugins, so that [143: Azoth] can offer creating a notification about a user changing status in two clicks, for example.

<h2>Rules</h2>

AdvancedNotifications works by matching each event notification against a list of rules defined by the user (of course, there is a pretty sane default setup). The rules are matched from top to bottom. These rules contain a set of conditions that must be fulfilled for the rule to be triggered.

[img_assist|nid=212|title=List of rules|desc=|link=popup|width=440]

Different plugins may define additional fields that could be used as conditions in the rules. For example, [143: Azoth] defines such fields as sender name, sender ID, sender groups, message body, etc.

[img_assist|nid=213|title=Field matchers|desc=|link=popup|width=440]

So, for example, a rule could be written to ignore all the messages from a given contact, unless they contain some keyword, or a different notifications sound may be used for incoming messages from, say, ""Personal"" group.

<h2>Visual method</h2>

This notifier uses another visual notifications plugins already present in LeechCraft, like [14: DBusManager]'s libnotify support or [155: Kinotify].

AdvancedNotifications plugin introduces quite a handy feature though: identical notifications are compressed into one, so that, for example, when you come online and get a lot of messages from the same contact, you'd see only one notification about these messages.

<h2>System tray method</h2>

System tray notifier is designed to be used for events that user must be informed about.

It displays different icons for different categories (IM is currently supported, News is coming) and provides a fancy tooltip with the list of events and corresponding actions (if any). Old-style menu is also supported by right-clicking the corresponding category icon. It also allows to enable event counter for different categories, which draw the amount of events over the icon.

[img_assist|nid=211|title=System tray notifier|desc=|link=popup|width=440]

<h2>Sound method</h2>

Notification rules may also define the sound to play when an event occurs.

As with visual method, AdvancedNotifications doesn't play these sounds by itself, instead, another plugin is used (currently LMP only).

There are some predefined rules with corresponding sounds, for example, on incoming message, multiuser chat highlight, and such."
211,image,System tray notifier,1312628637,,System tray notifier in the [210: Advanced Notifications] plugin.,System tray notifier in the [210: Advanced Notifications] plugin.
212,image,Rules list,1321475264,,List of matching rules in the [210: AdvancedNotifications] plugin.,List of matching rules in the [210: AdvancedNotifications] plugin.
213,image,Additional field matchers,1321474217,,Additional field matchers for a rule in the [210: AdvancedNotifications] plugin.,Additional field matchers for a rule in the [210: AdvancedNotifications] plugin.
214,page,Azoth Metacontacts,1312631341,plugins-azoth-metacontacts,"Azoth Metacontacts provides support for metacontacts in LeechCraft.

It adds a dummy protocol and dummy account named Metacontacts where all the metacontacts go. Concrete contacts are represented as resources of these dummy contact list entries.

Azoth Metacontacts is protocol- and account-agnostic.","Azoth Metacontacts provides support for metacontacts in LeechCraft.

It adds a dummy protocol and dummy account named Metacontacts where all the metacontacts go. Concrete contacts are represented as resources of these dummy contact list entries.

Azoth Metacontacts is protocol- and account-agnostic."
217,story,Development digest #10,1312633304,devel-digest-10,"We haven't published any digests for some two weeks, and that's because we've been working very closely on the Advanced Notifications framework, and we made pretty usable already for the end-user. The corresponding plugin, AdvancedNotifications, is described in details on [210: its page].

We also have some other news for you:

<ul>
<li>Added support for metacontacts via the [214: Azoth Metacontacts] plugin.</li>
<li>Support for <a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a> (OpenPGP) has been introduced into [144: Azoth Xoox].</li>
<li>[143: Azoth] now supports protocols with PGP support and allows to assign private PGP keys to accounts and public keys to contacts.</li>
<li>Azoth Acetamide now supports the <code>/msg</code> command.</li>
<li>Bookmarks and autojoin in Acetamide.</li>
<li>Nicer contact list in Azoth.</li>
<li>Suggest rejoining a channel after being kicked.</li>
<li>Search by title in TabsList module.</li>
<li>Show tab numbers in TabsList.</li>
<li>Support data forms in messages in Azoth Xoox.</li>
<li>Allow to request voice in Azoth Xoox.</li>
<li>Allow to publish VCards for Azoth Xoox.</li>
<li>Self contact in Azoth Xoox.</li>
<li>Allow to disable by-status grouping in Azoth contact list.</li>
</ul>","We haven't published any digests for some two weeks, and that's because we've been working very closely on the Advanced Notifications framework, and we made pretty usable already for the end-user. The corresponding plugin, AdvancedNotifications, is described in details on [210: its page].

We also have some other news for you:

<ul>
<li>Added support for metacontacts via the [214: Azoth Metacontacts] plugin.</li>
<li>Support for <a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a> (OpenPGP) has been introduced into [144: Azoth Xoox].</li>
<li>[143: Azoth] now supports protocols with PGP support and allows to assign private PGP keys to accounts and public keys to contacts.</li>
<li>Azoth Acetamide now supports the <code>/msg</code> command.</li>
<li>Bookmarks and autojoin in Acetamide.</li>
<li>Nicer contact list in Azoth.</li>
<li>Suggest rejoining a channel after being kicked.</li>
<li>Search by title in TabsList module.</li>
<li>Show tab numbers in TabsList.</li>
<li>Support data forms in messages in Azoth Xoox.</li>
<li>Allow to request voice in Azoth Xoox.</li>
<li>Allow to publish VCards for Azoth Xoox.</li>
<li>Self contact in Azoth Xoox.</li>
<li>Allow to disable by-status grouping in Azoth contact list.</li>
</ul>"
219,story,LeechCraft in Gentoo repos!,1314634936,leechcraft-in-gentoo-repos,"A couple of days ago LeechCraft was added to the official Gentoo repositories! No need to add third-party overlays to install LeechCraft now: one could just do <code type=""bash"">emerge leechcraft-full</code> with official repositories. Of course, up-to-date instructions are available at our [5: download] page.

Of course, this limits what we can do with our ebuilds, but that's even good — thanks to the quality requirements, we've finally fixed few small but annoying things in LeechCraft and QXmpp. And, of course, we hope that it would help more users to try LeechCraft out.

Currently LeechCraft 0.4.85 is available in ~amd64 and ~x86. Live ebuilds are also available, but masked with <code>**</code>.","A couple of days ago LeechCraft was added to the official Gentoo repositories! No need to add third-party overlays to install LeechCraft now: one could just do <code type=""bash"">emerge leechcraft-full</code> with official repositories. Of course, up-to-date instructions are available at our [5: download] page.

Of course, this limits what we can do with our ebuilds, but that's even good — thanks to the quality requirements, we've finally fixed few small but annoying things in LeechCraft and QXmpp. And, of course, we hope that it would help more users to try LeechCraft out.

Currently LeechCraft 0.4.85 is available in ~amd64 and ~x86. Live ebuilds are also available, but masked with <code>**</code>."
221,story,Development digest #11,1314960422,devel-digest-11,"We haven't published development digests for almost a month, since we mostly did administrative issues, like getting into Gentoo repos, and such. Nevertheless, there is a bunch of changes:
<ul>
<li>[145: Acetamide] now supports configuring channels, including chanmods, banlist, except list and invite list.</li>
<li>Added support for <code type=""bash"">/say</code> command in [145: Acetamide].</li>
<li>Support the ""Important"" tags for items in [7: Aggregator].</li>
<li>Frames with ads are also hidden now in [27: Poshuku CleanWeb].</li>
<li>Added support for running external commands in [210: AdvancedNotifications].</li>
<li>Speed up [198: Aggregator BodyFetch] by orders of magnitude by caching scripts.</li>
<li>Disable unneeded things like JavaScript or images in [198: Aggregator BodyFetch] when parsing downloaded web pages.</li>
<li>Added <code type=""javascript"">KeepAllTags()</code> getter in [198: Aggregator BodyFetch] supported scripting API.</li>
<li>[27: Poshuku CleanWeb] now supports the <code type=""bash"">third-party</code> attribute in filter lists.</li>
<li>Optimized [27: Poshuku CleanWeb] a bit: plain strings are matched using plain string matching algorithms instead of wildcard matching.</li>
<li>Allow to load default rules set in [210: AdvancedNotifications].</li>
<li>Finally [210: AdvancedNotifications] is considered stable enough for the save procedure to be uncommented.</li>
<li>Draw own avatar and protocol icon in [143: Azoth]'s contact list.</li>
<li>Automatically fix channel names in [145: Acetamide] by prepending <code>#</code> if it's not present.</li>
<li>Support <code type=""bash"">/leave</code> command in [143: Azoth].</li>
<li>Added ""Quote"" action in [143: Azoth].</li>
<li>Show free space in [10: BitTorrent] when adding files.</li>
<li>Moved data processing back to main thread in [198: Aggregator BodyFetch], thus some thread-related bugs in QtWebKit don't occur anymore.</li>
<li>A whole class of bugs has been fixed, when an object mentioned in a notification was already deleted by the time the user activates the notificaton.</li>
<li>Handle self vcards correctly in [144: Azoth Xoox].</li>
<li>Correctly handle content resend errors in [26: Poshuku].</li>
<li>Some micro improvements in [143: Azoth]: dynamically detect rename ability, respect lack of MUC support in protocols, don't suggest registering with ""Metacontacts"" protocol.</li>
<li>Fixed support for notifying about each conference message from [143: Azoth] in [210: AdvancedNotifications].</li>
<li>Fixed handling of the Ctrl+C shortcut in [143: Azoth].</li>
<li>Fixed FlashOnClick in [27: Poshuku CleanWeb].</li>
<li>Fixed ordering of links in [161: Azoth p100q].</li>
<li>Fixed dependencies calculation in Core.</li>
<li>Optimized contact list delegate in [143: Azoth].</li>
<li>Lots of fixes in [145: Acetamide].</li>
<li>Show localized plugin descriptions in Core plugin manager.</li>
<li>Migrated to new signal/slot-style hooks in Core.</li>
<li>Initial support for Qt 4.8.</li>
</ul>

Plugins for site mirroring (Otzerkalu) and libvlc-based media player are also in progress, but they are currently not merged in the master branch. And maybe the first one, Otzerkalu, would be in the 0.5 release.

We've also begun considering implementing the VFS and dashboard in LeechCraft. But unfortunately since current support for VFS implementations in Qt is declared deprecated and nothing has been proposed instead, the VFS development is currently halted.

While it's all clear what VFS should be, things are a bit more complicated with the dashboard. The best analogue of it among the already-existing and stable projects is possibly KDE's Plasma workspace. What we are currently thinking about is a plugin that allows to open tabs populated with different widgets written in either QML or plain-old-good C++ (or, of course, Python and other scripting languages supported by LC). There will be a whole news item dedicated to dashboard things soon.","We haven't published development digests for almost a month, since we mostly did administrative issues, like getting into Gentoo repos, and such. Nevertheless, there is a bunch of changes:
<ul>
<li>[145: Acetamide] now supports configuring channels, including chanmods, banlist, except list and invite list.</li>
<li>Added support for <code type=""bash"">/say</code> command in [145: Acetamide].</li>
<li>Support the ""Important"" tags for items in [7: Aggregator].</li>
<li>Frames with ads are also hidden now in [27: Poshuku CleanWeb].</li>
<li>Added support for running external commands in [210: AdvancedNotifications].</li>
<li>Speed up [198: Aggregator BodyFetch] by orders of magnitude by caching scripts.</li>
<li>Disable unneeded things like JavaScript or images in [198: Aggregator BodyFetch] when parsing downloaded web pages.</li>
<li>Added <code type=""javascript"">KeepAllTags()</code> getter in [198: Aggregator BodyFetch] supported scripting API.</li>
<li>[27: Poshuku CleanWeb] now supports the <code type=""bash"">third-party</code> attribute in filter lists.</li>
<li>Optimized [27: Poshuku CleanWeb] a bit: plain strings are matched using plain string matching algorithms instead of wildcard matching.</li>
<li>Allow to load default rules set in [210: AdvancedNotifications].</li>
<li>Finally [210: AdvancedNotifications] is considered stable enough for the save procedure to be uncommented.</li>
<li>Draw own avatar and protocol icon in [143: Azoth]'s contact list.</li>
<li>Automatically fix channel names in [145: Acetamide] by prepending <code>#</code> if it's not present.</li>
<li>Support <code type=""bash"">/leave</code> command in [143: Azoth].</li>
<li>Added ""Quote"" action in [143: Azoth].</li>
<li>Show free space in [10: BitTorrent] when adding files.</li>
<li>Moved data processing back to main thread in [198: Aggregator BodyFetch], thus some thread-related bugs in QtWebKit don't occur anymore.</li>
<li>A whole class of bugs has been fixed, when an object mentioned in a notification was already deleted by the time the user activates the notificaton.</li>
<li>Handle self vcards correctly in [144: Azoth Xoox].</li>
<li>Correctly handle content resend errors in [26: Poshuku].</li>
<li>Some micro improvements in [143: Azoth]: dynamically detect rename ability, respect lack of MUC support in protocols, don't suggest registering with ""Metacontacts"" protocol.</li>
<li>Fixed support for notifying about each conference message from [143: Azoth] in [210: AdvancedNotifications].</li>
<li>Fixed handling of the Ctrl+C shortcut in [143: Azoth].</li>
<li>Fixed FlashOnClick in [27: Poshuku CleanWeb].</li>
<li>Fixed ordering of links in [161: Azoth p100q].</li>
<li>Fixed dependencies calculation in Core.</li>
<li>Optimized contact list delegate in [143: Azoth].</li>
<li>Lots of fixes in [145: Acetamide].</li>
<li>Show localized plugin descriptions in Core plugin manager.</li>
<li>Migrated to new signal/slot-style hooks in Core.</li>
<li>Initial support for Qt 4.8.</li>
</ul>

Plugins for site mirroring (Otzerkalu) and libvlc-based media player are also in progress, but they are currently not merged in the master branch. And maybe the first one, Otzerkalu, would be in the 0.5 release.

We've also begun considering implementing the VFS and dashboard in LeechCraft. But unfortunately since current support for VFS implementations in Qt is declared deprecated and nothing has been proposed instead, the VFS development is currently halted.

While it's all clear what VFS should be, things are a bit more complicated with the dashboard. The best analogue of it among the already-existing and stable projects is possibly KDE's Plasma workspace. What we are currently thinking about is a plugin that allows to open tabs populated with different widgets written in either QML or plain-old-good C++ (or, of course, Python and other scripting languages supported by LC). There will be a whole news item dedicated to dashboard things soon."
223,story,Development digest #12,1315905468,devel-digest-12,"Last week (more or less) in LeechCraft:

<ul>
<li>Added autoidentify feature to [145: Azoth Acetamide].</li>
<li>[143: Azoth] now supports for protocols that allow exchanging contacts.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0144.html"">XEP-0144:</a> Roster Item Exchange to [144: Azoth Xoox].</li>
<li>Allow one to set different themes for normal chats and multiuser conferences.</li>
<li>Added quite nice <a href=""http://www.adiumxtras.com/index.php?a=xtras&xtra_id=2463"">GoneDark</a> theme to [196: Azoth AdiumStyles]'s default themes set.</li>
<li>Fixed styling in [143: Azoth] and [196: Azoth AdiumStyles]: now more Adium themes are interpreted correctly.</li>
<li>New accounts in [143: Azoth] can now be created from the Azoth menu.</li>
<li>Fixed several bugs in Azoth Acetamide and Azoth.</li>
<li>Win32 build fixes for BitTorrent.</li>
</ul>","Last week (more or less) in LeechCraft:

<ul>
<li>Added autoidentify feature to [145: Azoth Acetamide].</li>
<li>[143: Azoth] now supports for protocols that allow exchanging contacts.</li>
<li>Implemented <a href=""http://xmpp.org/extensions/xep-0144.html"">XEP-0144:</a> Roster Item Exchange to [144: Azoth Xoox].</li>
<li>Allow one to set different themes for normal chats and multiuser conferences.</li>
<li>Added quite nice <a href=""http://www.adiumxtras.com/index.php?a=xtras&xtra_id=2463"">GoneDark</a> theme to [196: Azoth AdiumStyles]'s default themes set.</li>
<li>Fixed styling in [143: Azoth] and [196: Azoth AdiumStyles]: now more Adium themes are interpreted correctly.</li>
<li>New accounts in [143: Azoth] can now be created from the Azoth menu.</li>
<li>Fixed several bugs in Azoth Acetamide and Azoth.</li>
<li>Win32 build fixes for BitTorrent.</li>
</ul>"
225,story,LeechCraft 0.4.90 is released,1328777167,leechcraft-0.4.90-is-released,"LeechCraft milestone 0.4.90 ""Stay the Course"" is released!

As we move towards the 0.5.0 release, our releases get more tested and with less new features. Sorry us, that will change back again after the 0.5.0 release :)

So, some new hot features for this release:

<ul>
<li>Nicer tray notifier in [210: AdvancedNotifications].</li>
<li>Support for [214: metacontacts] in the [143: Azoth] IM.</li>
<li>Support for new XEPs to [144: Azoth Xoox]: <a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a> (OpenPGP) and <a href=""http://xmpp.org/extensions/xep-0144.html"">XEP-0144</a> Roster Item Exchange.</li>
<li>[143: Azoth] core now understands encrypted chat sessions (like with OpenPGP), sharing contacts, and such, to make the new things from the previous item usable.</li>
<li>[145: Azoth Acetamide] now supports autojoin, bookmarks and autoidentify.</li>
<li><code type=""bash"">/say</code> and <code type=""bash"">/msg</code> commands in [145: Acetamide].</li>
<li>Support for configuring channels in [145: Azoth Acetamide].</li>
<li>[144: Azoth Xoox] can now be used to update own vCards as well.</li>
<li>Support marking items as ""Important"" in [7: Aggregator].</li>
<li>Lots of optimizations and fixes in [27: Poshuku CleanWeb]: particularly, Flash can be blocked again.</li>
<li>Optimized and fixed quite a few things in [198: Aggregator BodyFetch].</li>
<li>Fixed chat window styling in [143: Azoth]: more Adium styles are now handled correctly.</li>
</ul>

Of course, this is a brief list of changes. As always, you can read more detailed overviews of the new features in the corresponding digests: [217: #10], [221: #11] and [223: #12].

Packages for Ubuntu Lucid, Maverick, Natty and Oneiric would hopefully be available in a few hours, as well as ebuilds in the official Gentoo portage. Windows build is also coming.

Stay tuned!","LeechCraft milestone 0.4.90 ""Stay the Course"" is released!

As we move towards the 0.5.0 release, our releases get more tested and with less new features. Sorry us, that will change back again after the 0.5.0 release :)

So, some new hot features for this release:

<ul>
<li>Nicer tray notifier in [210: AdvancedNotifications].</li>
<li>Support for [214: metacontacts] in the [143: Azoth] IM.</li>
<li>Support for new XEPs to [144: Azoth Xoox]: <a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a> (OpenPGP) and <a href=""http://xmpp.org/extensions/xep-0144.html"">XEP-0144</a> Roster Item Exchange.</li>
<li>[143: Azoth] core now understands encrypted chat sessions (like with OpenPGP), sharing contacts, and such, to make the new things from the previous item usable.</li>
<li>[145: Azoth Acetamide] now supports autojoin, bookmarks and autoidentify.</li>
<li><code type=""bash"">/say</code> and <code type=""bash"">/msg</code> commands in [145: Acetamide].</li>
<li>Support for configuring channels in [145: Azoth Acetamide].</li>
<li>[144: Azoth Xoox] can now be used to update own vCards as well.</li>
<li>Support marking items as ""Important"" in [7: Aggregator].</li>
<li>Lots of optimizations and fixes in [27: Poshuku CleanWeb]: particularly, Flash can be blocked again.</li>
<li>Optimized and fixed quite a few things in [198: Aggregator BodyFetch].</li>
<li>Fixed chat window styling in [143: Azoth]: more Adium styles are now handled correctly.</li>
</ul>

Of course, this is a brief list of changes. As always, you can read more detailed overviews of the new features in the corresponding digests: [217: #10], [221: #11] and [223: #12].

Packages for Ubuntu Lucid, Maverick, Natty and Oneiric would hopefully be available in a few hours, as well as ebuilds in the official Gentoo portage. Windows build is also coming.

Stay tuned!"
227,story,Development digest #13,1317723033,devel-digest-13,"We are getting closer to the feature freeze, thus the list of new features shrinks for each new digest. Nevertheless, since the 0.4.90 milestone there are quite a few new features:

<ul>
<li>Support for <a href=""http://xmpp.org/extensions/xep-0055.html"">XEP-0055: Jabber Search</a> in [144: Azoth Xoox].</li>
<li>Support for portocols that allow searching in [143: Azoth].</li>
<li>Experimental support for <a href=""http://xmpp.org/extensions/xep-0084.html"">XEP-0084: User Avatar</a> in [144: Azoth Xoox] (including publishing the avatar).</li>
<li>User's avatar in the chat tab in [143: Azoth].</li>
<li>Stubs for sync support in [7: Aggregator].</li>
<li>Fixed torrents not being added correctly sometimes in [10: BitTorrent].</li>
<li>Kludges for incorrect registration forms in [144: Azoth Xoox] from various servers, mostly ejabberd.</li>
<li>Change status to XA instead of DND in Azoth Autoidler.</li>
<li>Various fixes in [144: Azoth Xoox].</li>
<li>Allow to disable avatars in [161: Azoth p100q].</li>
<li>Hints for different buttons in [161: Azoth p100q].</li>
</ul>","We are getting closer to the feature freeze, thus the list of new features shrinks for each new digest. Nevertheless, since the 0.4.90 milestone there are quite a few new features:

<ul>
<li>Support for <a href=""http://xmpp.org/extensions/xep-0055.html"">XEP-0055: Jabber Search</a> in [144: Azoth Xoox].</li>
<li>Support for portocols that allow searching in [143: Azoth].</li>
<li>Experimental support for <a href=""http://xmpp.org/extensions/xep-0084.html"">XEP-0084: User Avatar</a> in [144: Azoth Xoox] (including publishing the avatar).</li>
<li>User's avatar in the chat tab in [143: Azoth].</li>
<li>Stubs for sync support in [7: Aggregator].</li>
<li>Fixed torrents not being added correctly sometimes in [10: BitTorrent].</li>
<li>Kludges for incorrect registration forms in [144: Azoth Xoox] from various servers, mostly ejabberd.</li>
<li>Change status to XA instead of DND in Azoth Autoidler.</li>
<li>Various fixes in [144: Azoth Xoox].</li>
<li>Allow to disable avatars in [161: Azoth p100q].</li>
<li>Hints for different buttons in [161: Azoth p100q].</li>
</ul>"
229,story,Development digest #14,1318631295,devel-digest-14,"Last couple of weeks was dedicated to Poshuku OnlineBookmarks. Thanks <em>Oleg Linkin aka magog</em> for all his work on that plugin.
DZhon also did a lot to make LeechCraft more buildable and manageable on Windows. He contributed some Windows-related fixes to LeechCraft as well. Lots of thanks as well :)

<ul>
<li>Reworked Poshuku OnlineBookmarks: it's almost rewritten from scratch. Particularly, it now supports its own plugins, and exact bookmark services are implemented as plugins. Currently supported services are Read It Later and Del.icio.us.</li>
<li>Implemented Azoth OTRoid for supporting <a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">Off-The-Record</a> messaging system in [143: Azoth].</li>
<li>Initial work on Choroid, our nice image viewer.</li>
<li>[7: Aggregator] now queues updates of feeds instead of updating them all at once: no more lags on update!</li>
<li>Allow one to set password in account configuration dialog in [143: Azoth], closes <a href=""http://dev.leechcraft.org/issues/403"">#403</a>.</li>
<li>Last Activity is now set properly in [144: Azoth Xoox].</li>
<li>[144: Azoth Xoox] now respects lack of support for XEP-0085 in other clients.</li>
<li>[143: Azoth] now sends directed chat state participation events.</li>
<li>Lots of small fixes in [143: Azoth] and [144: Azoth Xoox].</li>
<li>Fixed a rare though possible segfault on exit in [163: Azoth Chathistory].</li>
<li>Lots of Win32-related improvements.</li>
</ul>","Last couple of weeks was dedicated to Poshuku OnlineBookmarks. Thanks <em>Oleg Linkin aka magog</em> for all his work on that plugin.
DZhon also did a lot to make LeechCraft more buildable and manageable on Windows. He contributed some Windows-related fixes to LeechCraft as well. Lots of thanks as well :)

<ul>
<li>Reworked Poshuku OnlineBookmarks: it's almost rewritten from scratch. Particularly, it now supports its own plugins, and exact bookmark services are implemented as plugins. Currently supported services are Read It Later and Del.icio.us.</li>
<li>Implemented Azoth OTRoid for supporting <a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">Off-The-Record</a> messaging system in [143: Azoth].</li>
<li>Initial work on Choroid, our nice image viewer.</li>
<li>[7: Aggregator] now queues updates of feeds instead of updating them all at once: no more lags on update!</li>
<li>Allow one to set password in account configuration dialog in [143: Azoth], closes <a href=""http://dev.leechcraft.org/issues/403"">#403</a>.</li>
<li>Last Activity is now set properly in [144: Azoth Xoox].</li>
<li>[144: Azoth Xoox] now respects lack of support for XEP-0085 in other clients.</li>
<li>[143: Azoth] now sends directed chat state participation events.</li>
<li>Lots of small fixes in [143: Azoth] and [144: Azoth Xoox].</li>
<li>Fixed a rare though possible segfault on exit in [163: Azoth Chathistory].</li>
<li>Lots of Win32-related improvements.</li>
</ul>"
232,book,LackMan,1319552673,development-lackman,"This subsection documents some LackMan-related things, like repo format, packaging guidelines, and such.","This subsection documents some LackMan-related things, like repo format, packaging guidelines, and such."
233,book,Archives,1319983394,development-lackman-archives,"This page describes creating archives for LackMan packages and also considers some common directory structures for different plugins.

<h2>Install destination</h2>

Basically, LackMan package is just a <code type=""bash"">tar.gz</code> archive (besides the package description) that would be unpacked to some destination, preserving the directory structure of the archive.

Different types of packages are installed to different places:

<ul>
<li><code type=""bash"">$LC_DATA_DIR/plugins/scriptable/$pluginlanguage/</code> for scriptable plugins.</li>
<li><code type=""bash"">$LC_DATA_DIR/icons/</code> for iconsets.</li>
<li><code type=""bash"">$LC_DATA_DIR/translations/</code> for translations.</li>
<li><code type=""bash"">$LC_DATA_DIR/data/</code> for theme packages and general data packages.</li>
</ul>

<code type=""bash"">$LC_DATA_DIR</code> is the directory in user's home directory where LeechCraft's data relies. Currently it is <code type=""bash"">~/.leechcraft</code>.

As one may see, destination directory of a scriptable plugins depends on its language. The language name is used as the directory name, and it can be, for example, one of these:

<ul>
<li><code type=""bash"">python</code></li>
<li><code type=""bash"">qtscript</code></li>
<li><code type=""bash"">ruby</code></li>
</ul>

For example, a plugin written in Python would go into <code type=""bash"">$LC_DATA_DIR/plugins/scriptable/python/</code>, while JavaScript/QtScript plugin would go to <code type=""bash"">$LC_DATA_DIR/plugins/scriptable/qtscript/</code>.

<h2>Naming the archive</h2>

The archive should be named as the package with all whitespaces removed and converted to the lower case, plus the version number of the package.

So, for example, archive for the package <em>Really Cool Smiles</em> of version <em>1.2.1-beta1</em> would be named <em>reallycoolsmiles-1.2.1-beta1.tar.gz</em>.

<h2>Examples</h2>

<h3>Adium style for Azoth</h3>

[196: Azoth AdiumStyles] searches for custom Adium styles from <code type=""bash"">$LC_DATA_DIR/data/azoth/styles/adium/</code>. Each style should reside in its own directory, but each package could have several styles included.

So, suppose we want to make a package named <em>Modern Bubbling</em> of the version <em>1.0</em> with two styles: <a href=""http://www.adiumxtras.com/index.php?a=xtras&xtra_id=3629"" target=""_blank"">Modern Bubbling</a> and Modern Bubbling (Compact). Due to Adium themes internals, the package archive should be created in such a way that, when unpacked, the <code type=""bash"">main.css</code> file have the following path:

<code type=""bash"">
$LC_DATA_DIR/data/azoth/styles/adium/Modern\ Bubbling.AdiumMessageStyle/Contents/Resources/main.css
</code>

Here we take the <code type=""bash"">main.css</code> file because it's pretty standard for Adium themes and exists in almost all of them.

So, we create a directory where we'd place our archive contents and <code type=""bash"">cd</code> into it. In this example, we assume the following directory: <code type=""bash"">~/Programming/lcupackages/modernbubbling/arch/</code>. That is:

<code type=""bash"">
mkdir -p ~/Programming/lcupackages/modernbubbling/arch/
cd ~/Programming/lcupackages/modernbubbling/arch/
</code>

We place there what we want to go to the archive remembering that it would be extracted just to <code type=""bash"">$LC_DATA_DIR/data/</code>. So, our <code type=""bash"">main.css</code> file would be in:

<code type='bash"">
~/Programming/lcupackages/modernbubbling/arch/azoth/styles/adium/Modern Bubbling.AdiumMessageStyle/Contents/Resources/main.css
</code>

Then we just create the archive with the following command:

<code type=""bash"">
tar cvzf modernbubbling-1.0.tar.gz azoth/
</code>

That is, our archive is ready!

<h3>Status icons pack for Azoth</h3>

[143: Azoth] searches for custom status icon packs in <code type=""bash"">$LC_DATA_DIR/data/azoth/iconsets/contactlist/</code>. Each subdirectory there is a separate icon pack and should contain files like <code type=""bash"">online.png</code> or <code type=""bash"">dnd.png</code>.

So, suppose we want to make a package named <em>Humane Statuses</em> of the version <em>2.1</em>. We create a directory where we'd place our archive contents and <code type=""bash"">cd</code> into it. In this example, we assume the following directory: <code type=""bash"">~/Programming/lcupackages/humanestatuses/arch/</code>. That is:

<code type=""bash"">
mkdir -p ~/Programming/lcupackages/humanestatuses/arch/
cd ~/Programming/lcupackages/humanestatuses/arch/
</code>

We place there what we want to go to the archive remembering that it would be extracted just to <code type=""bash"">$LC_DATA_DIR/data/</code>. So, for example, our <code type=""bash"">online.svg</code> file would be in:

<code type='bash"">
~/Programming/lcupackages/modernbubbling/arch/azoth/iconsets/contactlist/Humane\ Statuses/online.svg
</code>

Then we just create the archive with the following command:

<code type='bash"">
tar cvzf humanestatuses-2.1.tar.gz azoth/
</code>

That is, our archive is ready!","This page describes creating archives for LackMan packages and also considers some common directory structures for different plugins.

<h2>Install destination</h2>

Basically, LackMan package is just a <code type=""bash"">tar.gz</code> archive (besides the package description) that would be unpacked to some destination, preserving the directory structure of the archive.

Different types of packages are installed to different places:

<ul>
<li><code type=""bash"">$LC_DATA_DIR/plugins/scriptable/$pluginlanguage/</code> for scriptable plugins.</li>
<li><code type=""bash"">$LC_DATA_DIR/icons/</code> for iconsets.</li>
<li><code type=""bash"">$LC_DATA_DIR/translations/</code> for translations.</li>
<li><code type=""bash"">$LC_DATA_DIR/data/</code> for theme packages and general data packages.</li>
</ul>

<code type=""bash"">$LC_DATA_DIR</code> is the directory in user's home directory where LeechCraft's data relies. Currently it is <code type=""bash"">~/.leechcraft</code>.

As one may see, destination directory of a scriptable plugins depends on its language. The language name is used as the directory name, and it can be, for example, one of these:

<ul>
<li><code type=""bash"">python</code></li>
<li><code type=""bash"">qtscript</code></li>
<li><code type=""bash"">ruby</code></li>
</ul>

For example, a plugin written in Python would go into <code type=""bash"">$LC_DATA_DIR/plugins/scriptable/python/</code>, while JavaScript/QtScript plugin would go to <code type=""bash"">$LC_DATA_DIR/plugins/scriptable/qtscript/</code>.

<h2>Naming the archive</h2>

The archive should be named as the package with all whitespaces removed and converted to the lower case, plus the version number of the package.

So, for example, archive for the package <em>Really Cool Smiles</em> of version <em>1.2.1-beta1</em> would be named <em>reallycoolsmiles-1.2.1-beta1.tar.gz</em>.

<h2>Examples</h2>

<h3>Adium style for Azoth</h3>

[196: Azoth AdiumStyles] searches for custom Adium styles from <code type=""bash"">$LC_DATA_DIR/data/azoth/styles/adium/</code>. Each style should reside in its own directory, but each package could have several styles included.

So, suppose we want to make a package named <em>Modern Bubbling</em> of the version <em>1.0</em> with two styles: <a href=""http://www.adiumxtras.com/index.php?a=xtras&xtra_id=3629"" target=""_blank"">Modern Bubbling</a> and Modern Bubbling (Compact). Due to Adium themes internals, the package archive should be created in such a way that, when unpacked, the <code type=""bash"">main.css</code> file have the following path:

<code type=""bash"">
$LC_DATA_DIR/data/azoth/styles/adium/Modern\ Bubbling.AdiumMessageStyle/Contents/Resources/main.css
</code>

Here we take the <code type=""bash"">main.css</code> file because it's pretty standard for Adium themes and exists in almost all of them.

So, we create a directory where we'd place our archive contents and <code type=""bash"">cd</code> into it. In this example, we assume the following directory: <code type=""bash"">~/Programming/lcupackages/modernbubbling/arch/</code>. That is:

<code type=""bash"">
mkdir -p ~/Programming/lcupackages/modernbubbling/arch/
cd ~/Programming/lcupackages/modernbubbling/arch/
</code>

We place there what we want to go to the archive remembering that it would be extracted just to <code type=""bash"">$LC_DATA_DIR/data/</code>. So, our <code type=""bash"">main.css</code> file would be in:

<code type='bash"">
~/Programming/lcupackages/modernbubbling/arch/azoth/styles/adium/Modern Bubbling.AdiumMessageStyle/Contents/Resources/main.css
</code>

Then we just create the archive with the following command:

<code type=""bash"">
tar cvzf modernbubbling-1.0.tar.gz azoth/
</code>

That is, our archive is ready!

<h3>Status icons pack for Azoth</h3>

[143: Azoth] searches for custom status icon packs in <code type=""bash"">$LC_DATA_DIR/data/azoth/iconsets/contactlist/</code>. Each subdirectory there is a separate icon pack and should contain files like <code type=""bash"">online.png</code> or <code type=""bash"">dnd.png</code>.

So, suppose we want to make a package named <em>Humane Statuses</em> of the version <em>2.1</em>. We create a directory where we'd place our archive contents and <code type=""bash"">cd</code> into it. In this example, we assume the following directory: <code type=""bash"">~/Programming/lcupackages/humanestatuses/arch/</code>. That is:

<code type=""bash"">
mkdir -p ~/Programming/lcupackages/humanestatuses/arch/
cd ~/Programming/lcupackages/humanestatuses/arch/
</code>

We place there what we want to go to the archive remembering that it would be extracted just to <code type=""bash"">$LC_DATA_DIR/data/</code>. So, for example, our <code type=""bash"">online.svg</code> file would be in:

<code type='bash"">
~/Programming/lcupackages/modernbubbling/arch/azoth/iconsets/contactlist/Humane\ Statuses/online.svg
</code>

Then we just create the archive with the following command:

<code type='bash"">
tar cvzf humanestatuses-2.1.tar.gz azoth/
</code>

That is, our archive is ready!"
234,image,LC Package Generator,1319563784,,"<a href=""https://github.com/0xd34df00d/lcpackgen/"">LC Package Generator</a> as it is just after start.","<a href=""https://github.com/0xd34df00d/lcpackgen/"">LC Package Generator</a> as it is just after start."
235,book,Packaging,1319567971,development-lackman-packaging,"This page describes the process of packaging for LackMan.

<h2>Basics</h2>

Generally, LackMan package consists from a description of the package and a set of archives. Each archive corresponds to a separate package version, while package description describes the most recent version.

The package description file is named like the package itself, converted to lowercase and whitespaces removed. So for a package called <em>Cool New Icons</em> the corresponding file would be <code type=""bash"">coolnewicons.xml</code>.

<h2>Description example</h2>

The XML file for the <em>Modern Bubbling</em> package, which we will create in the next section, looks like this:

<code type=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<package type=""theme"">
 <name>Modern Bubbling</name>
 <description>An Adium chat style theme from the Adiumxtras site.</description>
 <tags>
  <tag>azoth</tag>
  <tag>theme</tag>
  <tag>chat styles</tag>
  <tag>adium</tag>
 </tags>
 <versions>
  <version size=""203060"">1.0</version>
 </versions>
 <images>
  <icon url=""""/>
  <screenshot url=""http://files.leechcraft.org/modern_bubbling.png""/>
 </images>
 <long>A nice theme with lots of variants.&lt;br />&lt;br />
This package contains two variants: plain Modern Bubbling and Compact version, which allows to group consecutive messages into a single message bubble.&lt;br />&lt;br />
This theme is available at &lt;a href=""http://www.adiumxtras.com/index.php?a=xtras&amp;xtra_id=3629"">http://www.adiumxtras.com/index.php?a=xtras&amp;xtra_id=3629&lt;/a></long>
 <maintainer>
  <name>Georg Rudoy</name>
  <email>0xd34df00d@gmail.com</email>
 </maintainer>
 <depends/>
</package>
</code>

<h2>Creating package description</h2>

Package description is, well, just an XML file describing that package. That XML format isn't documented yet, though I hope someday it would be.

The best method of creating the description file is to use our tiny <a href=""https://github.com/0xd34df00d/lcpackgen/"" target=""_blank"">lcpackgen</a> program. It's simple as hell and could be obtained via git: <a href=""git://github.com/0xd34df00d/lcpackgen.git"">git://github.com/0xd34df00d/lcpackgen.git</a>. It uses Qt and builds with <em>cmake</em> and could be built everywhere LeechCraft can run.

Here we will show by example how <em>lcpackgen</em> can be used. We'd make a description file for package <em>Modern Bubbling</em>, which is an Adium chat style for [143: Azoth].

So, we run <em>lcpackgen</em> and see something like this:

[img_assist|nid=234|title=|desc=|link=none|width=679|height=502]

We start filling different fields and noting where the label in bottom right corner becomes green, meaning that we have provided enough information. So, we fill in some fields in the <em>Basic</em> tab:

[img_assist|nid=236|title=|desc=|link=none|width=679|height=502]

Please note how we use HTML in the <em>Long description</em> field.

Then we set what versions are available:

[img_assist|nid=237|title=|desc=|link=none|width=679|height=502]

Our theme doesn't have any dependencies, so we leave that field blank. Also note that the label in the bottom right corner tells now that the description is valid. We can basically save the description, but since our theme is a really nice piece of artwork, we'd provide a screenshot:

[img_assist|nid=238|title=|desc=|link=none|width=679|height=502]

In these fields, we can list URLs of screenshots and thumbnails, one URL per line.

Finally, we save the description to a directory containing all the stuff (like archives) related to our package as <code type=""bash"">modernbubbling.xml</code>.

<h2>Archives</h2>

Creating proper archives for the packages is documented on the corresponding [233: Archives] page.

<h2>Getting it into the repo</h2>

After you've created the package description and the corresponding archive (or several archives), you can either create an issue on our <a href=""http://dev.leechcraft.org"">issue tracker</a> with your files attached, send them into the maillist (<a href=""mailto:leechcraft-users@lists.sourceforge.net"">leechcraft-users@lists.sourceforge.net</a>), or find us in our XMPP conference, <a href=""xmpp:leechcraft@conference.jabber.ru?join"">leechcraft@conference.jabber.ru</a>.

After that, if all goes well, your package would be in the LackMan repos:

[img_assist|nid=239|title=|desc=|link=popup|align=none|width=440|height=269]","This page describes the process of packaging for LackMan.

<h2>Basics</h2>

Generally, LackMan package consists from a description of the package and a set of archives. Each archive corresponds to a separate package version, while package description describes the most recent version.

The package description file is named like the package itself, converted to lowercase and whitespaces removed. So for a package called <em>Cool New Icons</em> the corresponding file would be <code type=""bash"">coolnewicons.xml</code>.

<h2>Description example</h2>

The XML file for the <em>Modern Bubbling</em> package, which we will create in the next section, looks like this:

<code type=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<package type=""theme"">
 <name>Modern Bubbling</name>
 <description>An Adium chat style theme from the Adiumxtras site.</description>
 <tags>
  <tag>azoth</tag>
  <tag>theme</tag>
  <tag>chat styles</tag>
  <tag>adium</tag>
 </tags>
 <versions>
  <version size=""203060"">1.0</version>
 </versions>
 <images>
  <icon url=""""/>
  <screenshot url=""http://files.leechcraft.org/modern_bubbling.png""/>
 </images>
 <long>A nice theme with lots of variants.&lt;br />&lt;br />
This package contains two variants: plain Modern Bubbling and Compact version, which allows to group consecutive messages into a single message bubble.&lt;br />&lt;br />
This theme is available at &lt;a href=""http://www.adiumxtras.com/index.php?a=xtras&amp;xtra_id=3629"">http://www.adiumxtras.com/index.php?a=xtras&amp;xtra_id=3629&lt;/a></long>
 <maintainer>
  <name>Georg Rudoy</name>
  <email>0xd34df00d@gmail.com</email>
 </maintainer>
 <depends/>
</package>
</code>

<h2>Creating package description</h2>

Package description is, well, just an XML file describing that package. That XML format isn't documented yet, though I hope someday it would be.

The best method of creating the description file is to use our tiny <a href=""https://github.com/0xd34df00d/lcpackgen/"" target=""_blank"">lcpackgen</a> program. It's simple as hell and could be obtained via git: <a href=""git://github.com/0xd34df00d/lcpackgen.git"">git://github.com/0xd34df00d/lcpackgen.git</a>. It uses Qt and builds with <em>cmake</em> and could be built everywhere LeechCraft can run.

Here we will show by example how <em>lcpackgen</em> can be used. We'd make a description file for package <em>Modern Bubbling</em>, which is an Adium chat style for [143: Azoth].

So, we run <em>lcpackgen</em> and see something like this:

[img_assist|nid=234|title=|desc=|link=none|width=679|height=502]

We start filling different fields and noting where the label in bottom right corner becomes green, meaning that we have provided enough information. So, we fill in some fields in the <em>Basic</em> tab:

[img_assist|nid=236|title=|desc=|link=none|width=679|height=502]

Please note how we use HTML in the <em>Long description</em> field.

Then we set what versions are available:

[img_assist|nid=237|title=|desc=|link=none|width=679|height=502]

Our theme doesn't have any dependencies, so we leave that field blank. Also note that the label in the bottom right corner tells now that the description is valid. We can basically save the description, but since our theme is a really nice piece of artwork, we'd provide a screenshot:

[img_assist|nid=238|title=|desc=|link=none|width=679|height=502]

In these fields, we can list URLs of screenshots and thumbnails, one URL per line.

Finally, we save the description to a directory containing all the stuff (like archives) related to our package as <code type=""bash"">modernbubbling.xml</code>.

<h2>Archives</h2>

Creating proper archives for the packages is documented on the corresponding [233: Archives] page.

<h2>Getting it into the repo</h2>

After you've created the package description and the corresponding archive (or several archives), you can either create an issue on our <a href=""http://dev.leechcraft.org"">issue tracker</a> with your files attached, send them into the maillist (<a href=""mailto:leechcraft-users@lists.sourceforge.net"">leechcraft-users@lists.sourceforge.net</a>), or find us in our XMPP conference, <a href=""xmpp:leechcraft@conference.jabber.ru?join"">leechcraft@conference.jabber.ru</a>.

After that, if all goes well, your package would be in the LackMan repos:

[img_assist|nid=239|title=|desc=|link=popup|align=none|width=440|height=269]"
236,image,LC Package Generator: basic info,1319568133,,Filling basic package info in LC Package Generator.,Filling basic package info in LC Package Generator.
237,image,LC Package Generator: versions,1319566059,,Setting versions of a package in LC Package Generator.,Setting versions of a package in LC Package Generator.
238,image,LC Package Generator: graphics,1319566098,,Setting graphics in LC Package Generator.,Setting graphics in LC Package Generator.
239,image,Modern Bubbling package in LeechCraft,1321475176,,"",""
240,story,Development digest #15,1320186077,devel-digest-15,"In the last couple of weeks we mostly fixed bugs, but a few new interesting features were also introduced. Firstly, a small plugin called KnowHow was added, which displays tips of the days on startup. Then, Ignotus made a lot of stuff in Potorchu, our libvlc-based media player, and it even was renamed to Laure. Finally, Poshuku migrated to another kind of web view, resultin in a slight performance increase.

But those are not all the changes! So here is the more or less full list:

<ul>
<li>Added KnowHow plugin for displaying tips of the days on startup.</li>
<li>Potorchu, our libvlc-based media player, was renamed to Laure and got so many improvements that it's hard to describe them all here.</li>
<li>[210: AdvancedNotifications] now supports enabling/disabling rules and single shot rules.</li>
<li>[158: Poshuku] now supports enabling WebGL for corresponding QtWebKit versions. And it really works!</li>
<li>[158: Poshuku] migrated to QGraphicsView-based web view, resulting in a bit increased performance, especially with effects-rich CSS3-(ab)using web sites.</li>
<li>[143: Azoth] and [144: Azoth Xoox] now support inviting to MUCs.</li>
<li>[143: Azoth] now supports dragging contacts between groups.</li>
<li>Files could be sent via IM by dropping them on corresponding contacts.</li>
<li>Metacontacts could be created by dropping contacts on other contacts in [143: Azoth].</li>
<li>[196: Azoth AdiumStyles] now supports variants for styles.</li>
<li>[143: Azoth] now allows one to disable the display of contact statuses.</li>
<li>Core now supports tooltips for settings items.</li>
<li>""Diagnostic info"" tab in Core.</li>
<li>More agressive caching of resources in core and Kinotify so that much less disk access is required now. Improves performance and battery life in notebooks a bit, preventing necessary HDD spinups.</li>
<li>Lots of small fixes for Otzerkalu.</li>
<li>Saner buddy avatar display in chat tab in [143: Azoth].</li>
<li>Lots of other small fixes in [143: Azoth].</li>
<li>Fixed themes that include much external resources from disk in [196: AdiumStyles].</li>
<li>Some fixes for Poshuku OnlineBookmarks.</li>
<li>[153: LackMan] now works with Windows.</li>
</ul>","In the last couple of weeks we mostly fixed bugs, but a few new interesting features were also introduced. Firstly, a small plugin called KnowHow was added, which displays tips of the days on startup. Then, Ignotus made a lot of stuff in Potorchu, our libvlc-based media player, and it even was renamed to Laure. Finally, Poshuku migrated to another kind of web view, resultin in a slight performance increase.

But those are not all the changes! So here is the more or less full list:

<ul>
<li>Added KnowHow plugin for displaying tips of the days on startup.</li>
<li>Potorchu, our libvlc-based media player, was renamed to Laure and got so many improvements that it's hard to describe them all here.</li>
<li>[210: AdvancedNotifications] now supports enabling/disabling rules and single shot rules.</li>
<li>[158: Poshuku] now supports enabling WebGL for corresponding QtWebKit versions. And it really works!</li>
<li>[158: Poshuku] migrated to QGraphicsView-based web view, resulting in a bit increased performance, especially with effects-rich CSS3-(ab)using web sites.</li>
<li>[143: Azoth] and [144: Azoth Xoox] now support inviting to MUCs.</li>
<li>[143: Azoth] now supports dragging contacts between groups.</li>
<li>Files could be sent via IM by dropping them on corresponding contacts.</li>
<li>Metacontacts could be created by dropping contacts on other contacts in [143: Azoth].</li>
<li>[196: Azoth AdiumStyles] now supports variants for styles.</li>
<li>[143: Azoth] now allows one to disable the display of contact statuses.</li>
<li>Core now supports tooltips for settings items.</li>
<li>""Diagnostic info"" tab in Core.</li>
<li>More agressive caching of resources in core and Kinotify so that much less disk access is required now. Improves performance and battery life in notebooks a bit, preventing necessary HDD spinups.</li>
<li>Lots of small fixes for Otzerkalu.</li>
<li>Saner buddy avatar display in chat tab in [143: Azoth].</li>
<li>Lots of other small fixes in [143: Azoth].</li>
<li>Fixed themes that include much external resources from disk in [196: AdiumStyles].</li>
<li>Some fixes for Poshuku OnlineBookmarks.</li>
<li>[153: LackMan] now works with Windows.</li>
</ul>"
242,story,Development digest #16,1320331346,devel-digest-16,"The last week or so Laure got the most attention, being constantly developed by Ignotus. Nevertheless, other plugins got their share of attention as well, and here is a list of some changes:

<ul>
<li>Added new plugin, Azoth Isterique, for removing excessive caps lock usage in incoming messages.</li>
<li>Action for changing bookmarks in [143: Azoth] right in contact list context menu.</li>
<li><a href=""http://dev.leechcraft.org/issues/475"">#475</a>: Allow one to join bookmarked conferences from contact list context menu.</li>
<li>Added an option to hide conference participants from the whole CL.</li>
<li>Small refactoring for bookmarks management in [143: Azoth].</li>
<li>Allow one to save pixmap without redownloading in [26: Poshuku].</li>
<li>Added <code>""WatchActionIconChange""</code> property to iconable actions.</li>
<li>More fixes for imports in [196: Azoth AdiumStyles]. Even more themes should work now.</li>
<li><a href=""http://dev.leechcraft.org/issues/487"">#487</a>: Uncheck dependent plugins when disabling root plugin.</li>
<li><a href=""http://dev.leechcraft.org/issues/467"">#467</a>: Don't remove conference participants that have left since they written our contact, but we haven't read their messages yet.</li>
<li>Fixed bookmarks manager in [143: Azoth].</li>
<li><a href=""http://dev.leechcraft.org/issues/465"">#465</a>: Fixed handling of tags with the '/' symbols in [161: Azoth p100q].</li>
<li><a href=""http://dev.leechcraft.org/issues/466"">#466</a>: Fixed cases when post IDs weren't detected in [161: Azoth p100q].</li>
<li><a href=""http://dev.leechcraft.org/issues/480"">#480</a>: Removed excessive line breaks in [161: Azoth p100q].</li>
<li>Lots of fixes for contact list rendering in [143: Azoth], like configurable inter-contacts spacing, and such.</li>
<li>Fixed a couple of segfaults in Aggregator on exit.</li>
</ul>","The last week or so Laure got the most attention, being constantly developed by Ignotus. Nevertheless, other plugins got their share of attention as well, and here is a list of some changes:

<ul>
<li>Added new plugin, Azoth Isterique, for removing excessive caps lock usage in incoming messages.</li>
<li>Action for changing bookmarks in [143: Azoth] right in contact list context menu.</li>
<li><a href=""http://dev.leechcraft.org/issues/475"">#475</a>: Allow one to join bookmarked conferences from contact list context menu.</li>
<li>Added an option to hide conference participants from the whole CL.</li>
<li>Small refactoring for bookmarks management in [143: Azoth].</li>
<li>Allow one to save pixmap without redownloading in [26: Poshuku].</li>
<li>Added <code>""WatchActionIconChange""</code> property to iconable actions.</li>
<li>More fixes for imports in [196: Azoth AdiumStyles]. Even more themes should work now.</li>
<li><a href=""http://dev.leechcraft.org/issues/487"">#487</a>: Uncheck dependent plugins when disabling root plugin.</li>
<li><a href=""http://dev.leechcraft.org/issues/467"">#467</a>: Don't remove conference participants that have left since they written our contact, but we haven't read their messages yet.</li>
<li>Fixed bookmarks manager in [143: Azoth].</li>
<li><a href=""http://dev.leechcraft.org/issues/465"">#465</a>: Fixed handling of tags with the '/' symbols in [161: Azoth p100q].</li>
<li><a href=""http://dev.leechcraft.org/issues/466"">#466</a>: Fixed cases when post IDs weren't detected in [161: Azoth p100q].</li>
<li><a href=""http://dev.leechcraft.org/issues/480"">#480</a>: Removed excessive line breaks in [161: Azoth p100q].</li>
<li>Lots of fixes for contact list rendering in [143: Azoth], like configurable inter-contacts spacing, and such.</li>
<li>Fixed a couple of segfaults in Aggregator on exit.</li>
</ul>"
244,story,Development digest #17,1320583899,devel-digest-17,"The last week and a half we introduced a dozen of new packages with emoticons, affiliation icons, mood icons, chat window styles and such to [153: LackMan]'s repositories. Moreover, Laure plugin again got some attention from Ignotus, and seems like it's already in quite a usable state for plain music playback. We've also introduced the <em>More this stuff</em> support across LeechCraft for displaying just those packages that are relevant to the context. For example, if user clicks on the <em>More this stuff</em> button in the chat window style setting, he will be presented with a list of available chat window styles. For that to work, our XML settings dialog markup language now supports the attribute that allows to have <em>More this stuff</em> buttons where needed, and [153: LackMan] now supports communicating with other plugins in order to show just those packages that are relevant to the chosen <em>More this stuff</em> category.

[img_assist|nid=246|title=Poshuku hover box|desc=|link=popup|align=right|width=220]

Among other changes:
<ul>
<li>Added the ""Group send"" feature to [143: Azoth].</li>
<li>[26: Poshuku]: display links on hover in a nice box on the viewport instead of status bar (see the screenshot on the right).</li>
<li>[153: LackMan] now gives a bit more space to the descriptions of the packages.</li>
<li>Added periodical updates feature to [153: LackMan].</li>
<li>[210: AdvancedNotifications] now supports toggling audio notifications via quick launch area and tray menu.</li>
<li>[7: Aggregator] now supports removing individual channels by user.</li>
<li>Allow one to disable displaying conference join/leave events in [143: Azoth].</li>
<li>[143: Azoth] now has buttons to install more different icons/themes in settings.</li>
<li>Fixed layouts a bit more in Settings tab.</li>
<li><a href=""http://dev.leechcraft.org/issues/489"">#489</a>: fixed displaying image in [161: Azoth p100q] from original post in each comment quote.</li>
<li><a href=""http://dev.leechcraft.org/issues/492"">#492</a>: hide Inspect action in [143: Azoth] context menu when developer extras are disabled.</li>
<li>Fixed viewport size issues in [26: Poshuku].</li>
<li>Fixed rare emoticons mishandling in [143: Azoth].</li>
</ul>","The last week and a half we introduced a dozen of new packages with emoticons, affiliation icons, mood icons, chat window styles and such to [153: LackMan]'s repositories. Moreover, Laure plugin again got some attention from Ignotus, and seems like it's already in quite a usable state for plain music playback. We've also introduced the <em>More this stuff</em> support across LeechCraft for displaying just those packages that are relevant to the context. For example, if user clicks on the <em>More this stuff</em> button in the chat window style setting, he will be presented with a list of available chat window styles. For that to work, our XML settings dialog markup language now supports the attribute that allows to have <em>More this stuff</em> buttons where needed, and [153: LackMan] now supports communicating with other plugins in order to show just those packages that are relevant to the chosen <em>More this stuff</em> category.

[img_assist|nid=246|title=Poshuku hover box|desc=|link=popup|align=right|width=220]

Among other changes:
<ul>
<li>Added the ""Group send"" feature to [143: Azoth].</li>
<li>[26: Poshuku]: display links on hover in a nice box on the viewport instead of status bar (see the screenshot on the right).</li>
<li>[153: LackMan] now gives a bit more space to the descriptions of the packages.</li>
<li>Added periodical updates feature to [153: LackMan].</li>
<li>[210: AdvancedNotifications] now supports toggling audio notifications via quick launch area and tray menu.</li>
<li>[7: Aggregator] now supports removing individual channels by user.</li>
<li>Allow one to disable displaying conference join/leave events in [143: Azoth].</li>
<li>[143: Azoth] now has buttons to install more different icons/themes in settings.</li>
<li>Fixed layouts a bit more in Settings tab.</li>
<li><a href=""http://dev.leechcraft.org/issues/489"">#489</a>: fixed displaying image in [161: Azoth p100q] from original post in each comment quote.</li>
<li><a href=""http://dev.leechcraft.org/issues/492"">#492</a>: hide Inspect action in [143: Azoth] context menu when developer extras are disabled.</li>
<li>Fixed viewport size issues in [26: Poshuku].</li>
<li>Fixed rare emoticons mishandling in [143: Azoth].</li>
</ul>"
246,image,Poshuku hover display,1320583786,,"Hover text (and links, particularly), as displayed in recent [26: Poshuku] versions.","Hover text (and links, particularly), as displayed in recent [26: Poshuku] versions."
247,story,Plugins depgraph,1321458112,plugins-depgraph,"For a long time I was asked to make a clear and readable list of dependencies between plugins in LeechCraft. Those dependencies are quite obscure, as some plugins depend on others directly, some depend only on some functionality of others, and there could be even cyclic dependencies!

Anyway, a few days ago I made a graph for that, and <a href=""http://files.leechcraft.org/plugins.png"" target=""_blank"">here it is</a>. I do not even post thumbnails here since it doesn't make sense for an image wider than 3000 pixels.

Thus, ovals indicate the usual LeechCraft plugins, rectangles represent some of the functionality provided by plugins, and external non-standard (not Qt and not Boost) dependencies are of rhomboid shape. Arrows from rectangles go to plugins that implement the given functionality, and they are always black. Orange arrows show plugin-subplugin relations. Red arrows show ""strict"" dependencies, and blue ones show ""recommended"" dependencies — that is, everything would work without the latter, but perhaps in a suboptimal way, or missing some functionality. Red/blue color codes are used for plugin-plugin dependencies, plugin-subplugin dependencies (think [143: Azoth], for example, which cannot work without at least one styling engine, which is also Azoth subplugin) and external library dependencies. ""Strict"" dependencies carry some kind of personal thoughts: for example, you can use [143: Azoth] or Snails without a password manager, but it would be quite a pain — you will be asked with a password to every other step, so the corresponding arrows are red.

Also, this graph doesn't contain all the plugins in LeechCraft: ones without dependencies (including subplugins depending only on their parent plugin) aren't shown.

That graph will be updated from time to time, so one could expect it to be more or less up-to-date.

If anyone wonders, graph's sources are <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/doc/plugins.dot"" target=""_blank"">here</a>.","For a long time I was asked to make a clear and readable list of dependencies between plugins in LeechCraft. Those dependencies are quite obscure, as some plugins depend on others directly, some depend only on some functionality of others, and there could be even cyclic dependencies!

Anyway, a few days ago I made a graph for that, and <a href=""http://files.leechcraft.org/plugins.png"" target=""_blank"">here it is</a>. I do not even post thumbnails here since it doesn't make sense for an image wider than 3000 pixels.

Thus, ovals indicate the usual LeechCraft plugins, rectangles represent some of the functionality provided by plugins, and external non-standard (not Qt and not Boost) dependencies are of rhomboid shape. Arrows from rectangles go to plugins that implement the given functionality, and they are always black. Orange arrows show plugin-subplugin relations. Red arrows show ""strict"" dependencies, and blue ones show ""recommended"" dependencies — that is, everything would work without the latter, but perhaps in a suboptimal way, or missing some functionality. Red/blue color codes are used for plugin-plugin dependencies, plugin-subplugin dependencies (think [143: Azoth], for example, which cannot work without at least one styling engine, which is also Azoth subplugin) and external library dependencies. ""Strict"" dependencies carry some kind of personal thoughts: for example, you can use [143: Azoth] or Snails without a password manager, but it would be quite a pain — you will be asked with a password to every other step, so the corresponding arrows are red.

Also, this graph doesn't contain all the plugins in LeechCraft: ones without dependencies (including subplugins depending only on their parent plugin) aren't shown.

That graph will be updated from time to time, so one could expect it to be more or less up-to-date.

If anyone wonders, graph's sources are <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/doc/plugins.dot"" target=""_blank"">here</a>."
249,image,Adium style in Azoth.,1347818042,,"Multiuser conference rendered with ""GoneDark"" Adium chat style.","Multiuser conference rendered with ""GoneDark"" Adium chat style."
250,image,Poshuku with Azoth Sidebar,1321476861,,[26: Poshuku] with [143: Azoth] sidebar.,[26: Poshuku] with [143: Azoth] sidebar.
251,book,User guide,1321539511,user-guide,"This guide gives a basic overview of LeechCraft functionality and introduces various ways to interact with it.

The guide is broken down by plugin, but it's assumed that all (or almost all) plugins are installed. Nevertheless, whenever possible all issues related to inter-plugin communication are mentioned.","This guide gives a basic overview of LeechCraft functionality and introduces various ways to interact with it.

The guide is broken down by plugin, but it's assumed that all (or almost all) plugins are installed. Nevertheless, whenever possible all issues related to inter-plugin communication are mentioned."
252,book,Poshuku,1321481146,user-guide-poshuku,"Poshuku is the default (and only) web browser in LeechCraft. Its features are listed on [26: its page].

This section of the user guide describes various aspects of Poshuku and shows some typical usage scenarios.

[img_assist|nid=59|title=|desc=|link=popup|width=440]

[img_assist|nid=250|title=|desc=|link=popup|width=440]","Poshuku is the default (and only) web browser in LeechCraft. Its features are listed on [26: its page].

This section of the user guide describes various aspects of Poshuku and shows some typical usage scenarios.

[img_assist|nid=59|title=|desc=|link=popup|width=440]

[img_assist|nid=250|title=|desc=|link=popup|width=440]"
253,book,Basic operation,1321486332,user-guide-poshuku-basic-operation,"<h2>Opening Poshuku</h2>

There are several ways to open Poshuku tab:
<ul>
<li>hit <em>Ctrl+T</em>;</li>
<li>click the Plus button in the tabbar;</li> 
<li>right-click the tabbar, enter the <em>New tab menu</em> and select <em>Poshuku</em>.</li>
</ul>

Of course, clicking a hyperlink would also result in Poshuku tab being opened.

<h2>Accessing functions</h2>

Only back, forward and reload/stop buttons are presented to the user, as well as the addressbar, of course. Most other functions are hidden in various context menus.

One of the context menus pops up when one right-clicks on somewhere on a web page. The menu contents depend on the object being clicked: different menus would pop ups for an image, a hyperlink, etc.

Another menu is hidden in LeechCraft menu. To access its functions, open the main LeechCraft menu and navigate to the <em>Poshuku</em> submenu. There are functions that may be otherwise unavailable, like full-length web page screenshotter. Poshuku plugins may also add different actions there. For example, Poshuku OnlineBookmarks plugin adds actions for synchronizing bookmarks to that menu.

<h3>History and bookmarks</h3>

To open History or Bookmarks, hit <em>Ctrl+H</em> or <em>Ctrl+B</em> respectively while staying on a Poshuku tab. After that, one can grab the splitter between history/bookmarks and the web page with the left mouse button and drag it to adjust the size. Dragging right to the edge of the screen effectively closes history/bookmarks tabs. Of course, dragging the splitter back from the edge of the screen opens the tabs back again.

<h2>Working with tabs</h2>

By default Poshuku is configured to open new tabs in background. To open a link in a new tab, hold <em>Ctrl</em> while clicking the link. To reverse the behavior (i.e., to open a link in foreground when by default they are opened in background), hold <em>Ctrl+Shift</em> while clicking on a link. To force opening in current tab, right-click the link and select <em>Open here</em>.

If you've accidentally closed a tab, don't worry even it happened 50 tabs ago! Poshuku keeps the list of recently closed tabs (in fact, an infinite list). You can access it by right-clicking anywhere on a page and going to the <em>Recently closed</em> submenu which is typically located at the very bottom.","<h2>Opening Poshuku</h2>

There are several ways to open Poshuku tab:
<ul>
<li>hit <em>Ctrl+T</em>;</li>
<li>click the Plus button in the tabbar;</li> 
<li>right-click the tabbar, enter the <em>New tab menu</em> and select <em>Poshuku</em>.</li>
</ul>

Of course, clicking a hyperlink would also result in Poshuku tab being opened.

<h2>Accessing functions</h2>

Only back, forward and reload/stop buttons are presented to the user, as well as the addressbar, of course. Most other functions are hidden in various context menus.

One of the context menus pops up when one right-clicks on somewhere on a web page. The menu contents depend on the object being clicked: different menus would pop ups for an image, a hyperlink, etc.

Another menu is hidden in LeechCraft menu. To access its functions, open the main LeechCraft menu and navigate to the <em>Poshuku</em> submenu. There are functions that may be otherwise unavailable, like full-length web page screenshotter. Poshuku plugins may also add different actions there. For example, Poshuku OnlineBookmarks plugin adds actions for synchronizing bookmarks to that menu.

<h3>History and bookmarks</h3>

To open History or Bookmarks, hit <em>Ctrl+H</em> or <em>Ctrl+B</em> respectively while staying on a Poshuku tab. After that, one can grab the splitter between history/bookmarks and the web page with the left mouse button and drag it to adjust the size. Dragging right to the edge of the screen effectively closes history/bookmarks tabs. Of course, dragging the splitter back from the edge of the screen opens the tabs back again.

<h2>Working with tabs</h2>

By default Poshuku is configured to open new tabs in background. To open a link in a new tab, hold <em>Ctrl</em> while clicking the link. To reverse the behavior (i.e., to open a link in foreground when by default they are opened in background), hold <em>Ctrl+Shift</em> while clicking on a link. To force opening in current tab, right-click the link and select <em>Open here</em>.

If you've accidentally closed a tab, don't worry even it happened 50 tabs ago! Poshuku keeps the list of recently closed tabs (in fact, an infinite list). You can access it by right-clicking anywhere on a page and going to the <em>Recently closed</em> submenu which is typically located at the very bottom."
254,book,Working with bookmarks,1321488165,user-guide-poshuku-working-with-bookmarks,"Poshuku allows to assign different tags to different bookmarks, thus helping you to organize them in a natural way, rather then restricting each bookmark to a single folder.

<h2>Adding bookmarks</h2>

There are several ways to add a bookmark:

<ul>
<li>hit <em>Ctrl+D</em> on the web page you want to add to bookmarks;</li>
<li>click the <em>Add to bookmarks</em> button in the address bar (see the image);</li>
<li>select the <em>Add to bookmarks</em> action in the web page context menu.</li>
</ul>

[img_assist|nid=255|title=Add to bookmarks button in the address bar|desc=|link=popup|width=600]

Whatever way to add you choose, you'd be greeted with the dialog that allows you to edit the title and tags of your bookmark before adding it:

[img_assist|nid=256|title=|desc=|link=popup|width=750]

Enter the ';'-separated list of tags or right-click the corresponding line edit and select the already existing tags. Tags may contain spaces.

After you've added the bookmark, the star will become filled. Generally, the star is filled whenever you visit an already-bookmarked page. Clicking the star removes the bookmark. Please note that Poshuku won't warn you regarding the bookmark removal.

<h2>Working with saved bookmarks</h2>

One of the ways to open the list of bookmarks is to hit <em>Ctrl+B</em>. The list of bookmarks will appear, grouped by tags. If a bookmark has several different tags, it would be in each group for each tag it has. To open a saved bookmark, just click on it. A new tab will open with the bookmarked page.

<h3>Editing</h3>

You can edit both name/tags of the bookmark and its URL. Either can be done by right-clicking the bookmark in the bookmarks list and choosing the corresponding action.

<h3>Removing</h3>

A bookmark can be removed by either right-clicking the bookmark and choosing the <em>Remove</em> action, or by selecting it and pressing the <em>Delete</em> key on the keyboard. A bookmark can also be removed by pressing on the star while being on the corresponding bookmarked page. Please note that Poshuku won't warn you regarding the bookmark removal.

<h3>Searching bookmarks</h3>

You can search and filter bookmarks either by string contained in the title or by tags.

To search by title, just enter the corresponding string in the search field in the <em>Bookmarks</em> tab. The search string can either be a plain substring, a mask or a regular expression. The mode is switched by the corresponding combobox near the search field. Filtering can also be toggled to be case sensitive or case insensitive.

To search by tags, either enter the ';'-separated list of tags manually and select the <em>Tags</em> search type, or just right-click the search field and select some of the tags.

You can open all of the bookmarks shown at once by clicking <em>Open in tabs</em> button at the bottom of the <em>Bookmarks</em> tab.","Poshuku allows to assign different tags to different bookmarks, thus helping you to organize them in a natural way, rather then restricting each bookmark to a single folder.

<h2>Adding bookmarks</h2>

There are several ways to add a bookmark:

<ul>
<li>hit <em>Ctrl+D</em> on the web page you want to add to bookmarks;</li>
<li>click the <em>Add to bookmarks</em> button in the address bar (see the image);</li>
<li>select the <em>Add to bookmarks</em> action in the web page context menu.</li>
</ul>

[img_assist|nid=255|title=Add to bookmarks button in the address bar|desc=|link=popup|width=600]

Whatever way to add you choose, you'd be greeted with the dialog that allows you to edit the title and tags of your bookmark before adding it:

[img_assist|nid=256|title=|desc=|link=popup|width=750]

Enter the ';'-separated list of tags or right-click the corresponding line edit and select the already existing tags. Tags may contain spaces.

After you've added the bookmark, the star will become filled. Generally, the star is filled whenever you visit an already-bookmarked page. Clicking the star removes the bookmark. Please note that Poshuku won't warn you regarding the bookmark removal.

<h2>Working with saved bookmarks</h2>

One of the ways to open the list of bookmarks is to hit <em>Ctrl+B</em>. The list of bookmarks will appear, grouped by tags. If a bookmark has several different tags, it would be in each group for each tag it has. To open a saved bookmark, just click on it. A new tab will open with the bookmarked page.

<h3>Editing</h3>

You can edit both name/tags of the bookmark and its URL. Either can be done by right-clicking the bookmark in the bookmarks list and choosing the corresponding action.

<h3>Removing</h3>

A bookmark can be removed by either right-clicking the bookmark and choosing the <em>Remove</em> action, or by selecting it and pressing the <em>Delete</em> key on the keyboard. A bookmark can also be removed by pressing on the star while being on the corresponding bookmarked page. Please note that Poshuku won't warn you regarding the bookmark removal.

<h3>Searching bookmarks</h3>

You can search and filter bookmarks either by string contained in the title or by tags.

To search by title, just enter the corresponding string in the search field in the <em>Bookmarks</em> tab. The search string can either be a plain substring, a mask or a regular expression. The mode is switched by the corresponding combobox near the search field. Filtering can also be toggled to be case sensitive or case insensitive.

To search by tags, either enter the ';'-separated list of tags manually and select the <em>Tags</em> search type, or just right-click the search field and select some of the tags.

You can open all of the bookmarks shown at once by clicking <em>Open in tabs</em> button at the bottom of the <em>Bookmarks</em> tab."
255,image,Add Bookmark in the addressbar,1321487363,,"",""
256,image,Add Bookmark dialog,1321487639,,"",""
257,book,Aggregator,1321541318,user-guide-aggregator,"",""
258,book,RSS and OpenSearch,1321818424,user-guide-poshuku-rss-and-opensearch,"This chapter describes how to work with RSS- and OpenSearch-enabled web sites in Poshuku.

<h2>RSS</h2>

<a href=""http://en.wikipedia.org/wiki/RSS"" target=""_blank"">RSS</a> is used to publish frequently updated works — such as blog entries, news headlines, audio, and video. One can subscribe to an RSS feed to automatically receive the updates of the site's content without checking it manually. RSS feeds are read by RSS aggregators, and the standard RSS aggregator in LeechCraft is, well, [7: Aggregator].

If a feed reader is installed, Poshuku automatically detects RSS feeds whenever it visits a RSS-enabled web page. If any RSS or Atom (<a href=""http://en.wikipedia.org/wiki/Atom_(standard)"" target=""_blank"">Atom</a> is basically just another format similar to RSS) feeds are detected on a web page, Poshuku would offer subscribing to them by displaying the corresponding icon in the address bar:

[img_assist|nid=259|title=|desc=|link=popup|width=750]

Clicking on the button reveals the list of feeds found:

[img_assist|nid=260|title=|desc=|link=popup|width=750]

As you may see, there may be several feeds on a single page, having different content.

Clicking on any item in the list results in dialog were you can set the tags for the item:

[img_assist|nid=261|title=|desc=|link=popup|width=750]

Here you can enter ';'-separated list of tags for the feed, or choose them from already-existing tags by right-clicking the line edit and selecting the needed ones.

Refer to the [257: Aggregator user guide] for further information.

<em>Note</em>: you can also right-click on any link containing the word <em>RSS</em>, and the context menu would have the corresponding action right on top:

[img_assist|nid=262|title=|desc=|link=popup|width=750]

This way you can subscribe to feeds that are not automatically detected.

<h2>OpenSearch</h2>

<a href=""http://en.wikipedia.org/wiki/OpenSearch"" target=""_blank"">OpenSearch</a> allows to perform web searches without actually having to visit the corresponding search engine. The [23: SeekThru] plugin in LeechCraft is responsible for OpenSearch support.

Just like with RSS feeds, Poshuku automatically detects the presence of OpenSearch descriptions and suggests to add them. This is completely analogous to the RSS autodetection and addition:

[img_assist|nid=263|title=|desc=|link=popup|width=750]

After selecting the OpenSearch description a dialog pops up where one can enter the tags that would be used to address this description.

Searching with the installed OpenSearch descriptions could be performed either from [25: Summary] (which is documented in its user guide) or directly from Poshuku. For that, just prepend the name of the tag with the exclamation sign and enter the search query in the address bar:

[img_assist|nid=264|title=|desc=|link=popup|width=750]

Here, we would search for ""leechcraft repo"" using all search engines with the <em>git</em> tag.","This chapter describes how to work with RSS- and OpenSearch-enabled web sites in Poshuku.

<h2>RSS</h2>

<a href=""http://en.wikipedia.org/wiki/RSS"" target=""_blank"">RSS</a> is used to publish frequently updated works — such as blog entries, news headlines, audio, and video. One can subscribe to an RSS feed to automatically receive the updates of the site's content without checking it manually. RSS feeds are read by RSS aggregators, and the standard RSS aggregator in LeechCraft is, well, [7: Aggregator].

If a feed reader is installed, Poshuku automatically detects RSS feeds whenever it visits a RSS-enabled web page. If any RSS or Atom (<a href=""http://en.wikipedia.org/wiki/Atom_(standard)"" target=""_blank"">Atom</a> is basically just another format similar to RSS) feeds are detected on a web page, Poshuku would offer subscribing to them by displaying the corresponding icon in the address bar:

[img_assist|nid=259|title=|desc=|link=popup|width=750]

Clicking on the button reveals the list of feeds found:

[img_assist|nid=260|title=|desc=|link=popup|width=750]

As you may see, there may be several feeds on a single page, having different content.

Clicking on any item in the list results in dialog were you can set the tags for the item:

[img_assist|nid=261|title=|desc=|link=popup|width=750]

Here you can enter ';'-separated list of tags for the feed, or choose them from already-existing tags by right-clicking the line edit and selecting the needed ones.

Refer to the [257: Aggregator user guide] for further information.

<em>Note</em>: you can also right-click on any link containing the word <em>RSS</em>, and the context menu would have the corresponding action right on top:

[img_assist|nid=262|title=|desc=|link=popup|width=750]

This way you can subscribe to feeds that are not automatically detected.

<h2>OpenSearch</h2>

<a href=""http://en.wikipedia.org/wiki/OpenSearch"" target=""_blank"">OpenSearch</a> allows to perform web searches without actually having to visit the corresponding search engine. The [23: SeekThru] plugin in LeechCraft is responsible for OpenSearch support.

Just like with RSS feeds, Poshuku automatically detects the presence of OpenSearch descriptions and suggests to add them. This is completely analogous to the RSS autodetection and addition:

[img_assist|nid=263|title=|desc=|link=popup|width=750]

After selecting the OpenSearch description a dialog pops up where one can enter the tags that would be used to address this description.

Searching with the installed OpenSearch descriptions could be performed either from [25: Summary] (which is documented in its user guide) or directly from Poshuku. For that, just prepend the name of the tag with the exclamation sign and enter the search query in the address bar:

[img_assist|nid=264|title=|desc=|link=popup|width=750]

Here, we would search for ""leechcraft repo"" using all search engines with the <em>git</em> tag."
259,image,"""External resources"" button in address bar",1321555414,,"",""
260,image,List of external resources on a Poshuku page,1321555496,,"",""
261,image,Adding a feed from Poshuku,1321555997,,"",""
262,image,Feed link autodetection,1321556219,,"",""
263,image,OpenSearch autodetection,1321556672,,"",""
264,image,Using OpenSearch from Poshuku,1321557216,,"",""
265,image,Installing package with list of CleanWeb subscriptions,1321820537,,"",""
266,image,Adding subscription in CleanWeb settings,1321821473,,"",""
267,book,Blocking ads,1321822832,user-guide-poshuku-blocking-ads,"Advertisment can be blocked with the [27: Poshuku CleanWeb] plugin. CleanWeb watches all the HTTP requests made and blocks those matching an entry in any installed ad filter. Just after installation CleanWeb doesn't contain any ad filters, and they have to be installed manually for CleanWeb to work. Most filters are updated periodically (typically once in several days) to reflect new ad patterns.

<h2>Adding filters</h2>

Filters allow CleanWeb to understand what HTTP requests should be blocked. There are lots of already-existing filters. Some of them may fit you better, depending on your language and browsing habits.

Please avoid adding too much filters since that can degrade the performance of your browsing considerably.

There are two ways of adding filters.

<h3>Through CleanWeb settings</h3>

There is a package called <em>Poshuku CleanWeb Subscriptions</em> with the list of some popular filters in the [153: LackMan]. Install it though LackMan:

[img_assist|nid=265|title=|desc=|link=popup|width=750]

After that, go to CleanWeb settings, select <em>Subscriptions</em> tab and click <em>Add</em>:

[img_assist|nid=266|title=|desc=|link=popup|width=750]

There, select the subscriptions you want and click <em>OK</em>. That's it!

<h3>The AdBlock+ subscriptions list</h3>

Since CleanWeb uses AdBlock+-compatible list format, you can just visit their page with the <a href=""http://adblockplus.org/en/subscriptions"" target=""_blank"">list of subscriptions</a>. There, just click on the links near <em>Subscribe:</em> words, and the subscriptions would be added automatically.

<h2>Removing filters</h2>

To remove a filter, just go CleanWeb settings page, select <em>Subscriptions</em> tab, select the filter you'd like to remove and click Remove. That's it!

<h2>Manual blocking</h2>

Some undesired elements may still be shown even after installing some filters. To block them, right-click the corresponding element and select <em>Block image...</em>. A dialog would pop up, where you can select blocking options:

[img_assist|nid=268|title=|desc=|link=popup|width=750]

There, you could customize the URL pattern to block, select whether it should be interpreted as a wildcard (with <em>*?</em> symbols) or a regexp. You can also specify whether the item will be blacklisted or whitelisted, whether the matching should be case-sensitive, and on what domains the filtering should be explicitly enabled or disabled.

If you later change your mind and decide to unblock the item, just go to CleanWeb settings, select the <em>User filters</em> tab and remove your filter.

<h2>Blocking Adobe Flash</h2>

Flash elements could also be blocked. If blocking is enabled, Flash won't be loaded by default. Instead it will be replaced with a button allowing you to load only desired Flash clips.

To enable Flash blocking, go to CleanWeb settings, select <em>FlashOnClick</em> tab and select the checkbox. That's it!","Advertisment can be blocked with the [27: Poshuku CleanWeb] plugin. CleanWeb watches all the HTTP requests made and blocks those matching an entry in any installed ad filter. Just after installation CleanWeb doesn't contain any ad filters, and they have to be installed manually for CleanWeb to work. Most filters are updated periodically (typically once in several days) to reflect new ad patterns.

<h2>Adding filters</h2>

Filters allow CleanWeb to understand what HTTP requests should be blocked. There are lots of already-existing filters. Some of them may fit you better, depending on your language and browsing habits.

Please avoid adding too much filters since that can degrade the performance of your browsing considerably.

There are two ways of adding filters.

<h3>Through CleanWeb settings</h3>

There is a package called <em>Poshuku CleanWeb Subscriptions</em> with the list of some popular filters in the [153: LackMan]. Install it though LackMan:

[img_assist|nid=265|title=|desc=|link=popup|width=750]

After that, go to CleanWeb settings, select <em>Subscriptions</em> tab and click <em>Add</em>:

[img_assist|nid=266|title=|desc=|link=popup|width=750]

There, select the subscriptions you want and click <em>OK</em>. That's it!

<h3>The AdBlock+ subscriptions list</h3>

Since CleanWeb uses AdBlock+-compatible list format, you can just visit their page with the <a href=""http://adblockplus.org/en/subscriptions"" target=""_blank"">list of subscriptions</a>. There, just click on the links near <em>Subscribe:</em> words, and the subscriptions would be added automatically.

<h2>Removing filters</h2>

To remove a filter, just go CleanWeb settings page, select <em>Subscriptions</em> tab, select the filter you'd like to remove and click Remove. That's it!

<h2>Manual blocking</h2>

Some undesired elements may still be shown even after installing some filters. To block them, right-click the corresponding element and select <em>Block image...</em>. A dialog would pop up, where you can select blocking options:

[img_assist|nid=268|title=|desc=|link=popup|width=750]

There, you could customize the URL pattern to block, select whether it should be interpreted as a wildcard (with <em>*?</em> symbols) or a regexp. You can also specify whether the item will be blacklisted or whitelisted, whether the matching should be case-sensitive, and on what domains the filtering should be explicitly enabled or disabled.

If you later change your mind and decide to unblock the item, just go to CleanWeb settings, select the <em>User filters</em> tab and remove your filter.

<h2>Blocking Adobe Flash</h2>

Flash elements could also be blocked. If blocking is enabled, Flash won't be loaded by default. Instead it will be replaced with a button allowing you to load only desired Flash clips.

To enable Flash blocking, go to CleanWeb settings, select <em>FlashOnClick</em> tab and select the checkbox. That's it!"
268,image,Manual element blocking in CleanWeb,1321822682,,"",""
269,image,Finding the Install button on Userscripts,1321826790,,"",""
270,image,FatApe userscript installation dialog,1321826825,,"",""
271,book,GreaseMonkey userscripts,1321827007,user-guide-poshuku-greasemonkey-userscripts,"Poshuku allows one to install scripts that make on-the-fly changes to web page contents via the Poshuku FatApe plugin. These scripts could be used for adding new features to web pages (for example, embedding price comparisons within shopping sites), fixing rendering bugs, combining data from multiple webpages, and numerous other purposes.

This chapter documents how userscripts could be installed and how they could be edited and managed.

<h2>Installing userscripts</h2>

We will consider the <a href=""http://userscripts.org"" target=""_blank"">Userscripts.org</a> site here. Installation process is similar for other sites.

Let's navigate to the site and pick a userscript for installation, for example, <a href=""http://userscripts.org/scripts/show/86674"" target=""_blank"">this one</a>. Click the <em>Install</em> button:

[img_assist|nid=269|title=|desc=|link=popup|width=750]

After that, FatApe's dialog will pop up with some information about the script (the domains where it is enabled or explicitly disabled):

[img_assist|nid=270|title=|desc=|link=popup|width=750]

You can view the script sources to ensure it doesn't do anything malicious, or you can just click <em>Install</em> to install it. That's basically it, the script is installed now. If you have any pages open that should be working with the just installed script, just reload them.

<h2>Managing userscripts</h2>

Open FatApe settings. There you can either disable/enable the installed userscripts, remove them or edit them. Editing requires entering the path to a text editor at the bottom.","Poshuku allows one to install scripts that make on-the-fly changes to web page contents via the Poshuku FatApe plugin. These scripts could be used for adding new features to web pages (for example, embedding price comparisons within shopping sites), fixing rendering bugs, combining data from multiple webpages, and numerous other purposes.

This chapter documents how userscripts could be installed and how they could be edited and managed.

<h2>Installing userscripts</h2>

We will consider the <a href=""http://userscripts.org"" target=""_blank"">Userscripts.org</a> site here. Installation process is similar for other sites.

Let's navigate to the site and pick a userscript for installation, for example, <a href=""http://userscripts.org/scripts/show/86674"" target=""_blank"">this one</a>. Click the <em>Install</em> button:

[img_assist|nid=269|title=|desc=|link=popup|width=750]

After that, FatApe's dialog will pop up with some information about the script (the domains where it is enabled or explicitly disabled):

[img_assist|nid=270|title=|desc=|link=popup|width=750]

You can view the script sources to ensure it doesn't do anything malicious, or you can just click <em>Install</em> to install it. That's basically it, the script is installed now. If you have any pages open that should be working with the just installed script, just reload them.

<h2>Managing userscripts</h2>

Open FatApe settings. There you can either disable/enable the installed userscripts, remove them or edit them. Editing requires entering the path to a text editor at the bottom."
272,story,Development digest 18,1322065012,devel-digest-18,"Last few weeks we were mostly busy polishing LeechCraft for the 0.4.95 milestone, so don't expect this digest to contain lots of new fancy features and such — it's more about bugfixing and small improvements.

So, what've we got for you?
<ul>
<li>Added Poshuku Pogooglue plugin for instantly searching selected text in Google.</li>
<li>Lots of improvements in Laure, as always.</li>
<li>Added <em>Gajim</em> style to Azoth StandardStyles.</li>
<li>Added context menu for nicknames in MUCs in [143: Azoth].</li>
<li>[143: Azoth] now can optionally append a message to the chat view whenever participant ends the conversation.</li>
<li>It is possible now to disable sending ""conversation ended"" chat participant state events in [143: Azoth].</li>
<li>Configurable text post-address text in [143: Azoth].</li>
<li>Added the <em>Quote</em> action to the chat view context menu of [143: Azoth].</li>
<li>Added support for <em>itpc</em> in [7: Aggregator].</li>
<li>More lexers in [158: Popishu]: added Octave and Matlab lexers.</li>
<li>Show line numbers and wrap words by default in [158: Popishu].</li>
<li>[145: Azoth Acetamide] now supports SSL connections.</li>
<li>LeechCraft now opens URLs in external applications if those URLs couldn't be handled by LeechCraft plugins.</li>
<li>Several fixes for interoperability of Azoth OTRoid with other Azoth plugins.</li>
<li>Fixed package deinstallation in [153: LackMan].</li>
<li>Fixed toolbar visibility control in Core.</li>
<li>Fixed leaking search widgets in [143: Azoth].</li>
<li>Fixed colors for pre-nick/post-nick text in Azoth StandardStyles.</li>
<li>Use <em>automoc</em> feature of CMake 2.8.6 and later. Fixes lots of warnings from <em>moc</em> during build process.</li>
<li>Fixed a segfault in [153: LackMan] when cancelling installation of packages.</li>
<li>Fixed fetching scripts in Poshuku FatApe.</li>
<li>Fixed userscripts detection in Poshuku FatApe.</li>
<li>Fixed segfault when clearing mood in [144: Azoth Xoox].</li>
<li>Lots of fixes for Poshuku OnlineBookmarks.</li>
<li>Fixed item view not being updated sometimes in [7: Aggregator].</li>
<li>Fixed <em>Clear chat</em> behavior in [143: Azoth].</li>
</ul>","Last few weeks we were mostly busy polishing LeechCraft for the 0.4.95 milestone, so don't expect this digest to contain lots of new fancy features and such — it's more about bugfixing and small improvements.

So, what've we got for you?
<ul>
<li>Added Poshuku Pogooglue plugin for instantly searching selected text in Google.</li>
<li>Lots of improvements in Laure, as always.</li>
<li>Added <em>Gajim</em> style to Azoth StandardStyles.</li>
<li>Added context menu for nicknames in MUCs in [143: Azoth].</li>
<li>[143: Azoth] now can optionally append a message to the chat view whenever participant ends the conversation.</li>
<li>It is possible now to disable sending ""conversation ended"" chat participant state events in [143: Azoth].</li>
<li>Configurable text post-address text in [143: Azoth].</li>
<li>Added the <em>Quote</em> action to the chat view context menu of [143: Azoth].</li>
<li>Added support for <em>itpc</em> in [7: Aggregator].</li>
<li>More lexers in [158: Popishu]: added Octave and Matlab lexers.</li>
<li>Show line numbers and wrap words by default in [158: Popishu].</li>
<li>[145: Azoth Acetamide] now supports SSL connections.</li>
<li>LeechCraft now opens URLs in external applications if those URLs couldn't be handled by LeechCraft plugins.</li>
<li>Several fixes for interoperability of Azoth OTRoid with other Azoth plugins.</li>
<li>Fixed package deinstallation in [153: LackMan].</li>
<li>Fixed toolbar visibility control in Core.</li>
<li>Fixed leaking search widgets in [143: Azoth].</li>
<li>Fixed colors for pre-nick/post-nick text in Azoth StandardStyles.</li>
<li>Use <em>automoc</em> feature of CMake 2.8.6 and later. Fixes lots of warnings from <em>moc</em> during build process.</li>
<li>Fixed a segfault in [153: LackMan] when cancelling installation of packages.</li>
<li>Fixed fetching scripts in Poshuku FatApe.</li>
<li>Fixed userscripts detection in Poshuku FatApe.</li>
<li>Fixed segfault when clearing mood in [144: Azoth Xoox].</li>
<li>Lots of fixes for Poshuku OnlineBookmarks.</li>
<li>Fixed item view not being updated sometimes in [7: Aggregator].</li>
<li>Fixed <em>Clear chat</em> behavior in [143: Azoth].</li>
</ul>"
274,story,Development digest #19,1322411986,devel-digest-19,"Only four days have passed since our last digest, but nevertheless we are publishing a new one, since today is... Well, read the next post for that :)

So, in these four days we managed to do the following:
<ul>
<li>Tought [144: Azoth Xoox] to handle <em>xmpp:...?message</em> links.</li>
<li>Top used status is shown on Fast Change Status button in [143: Azoth] now.</li>
<li>Optimized timers in LeechCraft, so that it, for example, on my machine it causes CPU wake ups 13-17 times per second instead of 50-60.</li>
<li>NPAPI plugins are disabled now in [26: Poshuku] since that fancy QGraphicsView stuff cannot work with them anymore.</li>
<li>Fixed segfault when deleting bookmarks in [26: Poshuku].</li>
<li>Fixed build of EiskaltDC++ with CMake 2.8.6 and later.</li>
<li>Added kludges for Qt 4.8 in Poshuku OnlineBookmarks Read It Later.</li>
</ul>","Only four days have passed since our last digest, but nevertheless we are publishing a new one, since today is... Well, read the next post for that :)

So, in these four days we managed to do the following:
<ul>
<li>Tought [144: Azoth Xoox] to handle <em>xmpp:...?message</em> links.</li>
<li>Top used status is shown on Fast Change Status button in [143: Azoth] now.</li>
<li>Optimized timers in LeechCraft, so that it, for example, on my machine it causes CPU wake ups 13-17 times per second instead of 50-60.</li>
<li>NPAPI plugins are disabled now in [26: Poshuku] since that fancy QGraphicsView stuff cannot work with them anymore.</li>
<li>Fixed segfault when deleting bookmarks in [26: Poshuku].</li>
<li>Fixed build of EiskaltDC++ with CMake 2.8.6 and later.</li>
<li>Added kludges for Qt 4.8 in Poshuku OnlineBookmarks Read It Later.</li>
</ul>"
276,story,LeechCraft 0.4.95 is released,1328777212,leechcraft-0.4.95-is-released,"LeechCraft milestone 0.4.95 ""Bet It All on Black"" is released.

This is the last milestone before the 0.5.0 containing new features. Further milestones (0.4.96-0.4.99) would bring only bugfixes, if any.

The development for post-0.5.0 times continues in the <em>master</em> branch, while things for the 0.5.0 release are getting stabilized in the <em>0.5.0</em> branch. Beware when you'd checkout sources next time :)

So, let me list some major features and improvements since the 0.4.90 release:
<ul>
<li>Support for <a href=""http://xmpp.org/extensions/xep-0055.html"">XEP-0055: Jabber Search</a> in [144: Azoth Xoox].</li>
<li>Reworked Poshuku OnlineBookmarks: it's almost rewritten from scratch. Particularly, it now supports its own plugins, and exact bookmark services are implemented as plugins. Currently supported services are Read It Later and Del.icio.us.</li>
<li>Implemented Azoth OTRoid for supporting <a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">Off-The-Record</a> messaging system in [143: Azoth].</li>
<li>[7: Aggregator] now queues updates of feeds instead of updating them all at once: no more lags on update!</li>
<li>Added KnowHow plugin for displaying tips of the days on startup.</li>
<li>[210: AdvancedNotifications] now supports enabling/disabling rules and single shot rules.</li>
<li>[158: Poshuku] now supports enabling WebGL for corresponding QtWebKit versions. And it really works!</li>
<li>[158: Poshuku] migrated to QGraphicsView-based web view, resulting in a bit increased performance, especially with effects-rich CSS3-(ab)using web sites.</li>
<li>[143: Azoth] and [144: Azoth Xoox] now support inviting to MUCs.</li>
<li>[143: Azoth] now supports some operations via drag-n-drop, like moving contacts between groups, sending files to contacts and uniting contacts into metacontacts.</li>
<li>Considerably improved [196: Azoth AdiumStyles]: added support for style variants and lots of compatibility improvements.</li>
<li>Added the ""Group send"" feature to [143: Azoth].</li>
<li>[img_assist|nid=246|title=Poshuku hover box|desc=|link=popup|align=right|width=220][26: Poshuku]: display links on hover in a nice box on the viewport instead of status bar (see the screenshot on the right).</li>
<li>[143: Azoth] now has buttons to install more different icons/themes in settings.</li>
<li>Added periodical updates feature to [153: LackMan].</li>
<li>Added Poshuku Pogooglue plugin for instantly searching selected text in Google.</li>
<li>Added <em>Gajim</em> style to Azoth StandardStyles.</li>
<li>Added context menu for nicknames in MUCs in [143: Azoth].</li>
<li>[143: Azoth] now can optionally append a message to the chat view whenever participant ends the conversation.</li>
<li>It is possible now to disable sending ""conversation ended"" chat participant state events in [143: Azoth].</li>
<li>[145: Azoth Acetamide] now supports SSL connections.</li>
<li>LeechCraft now opens URLs in external applications if those URLs couldn't be handled by LeechCraft plugins.</li>
<li>[144: Azoth Xoox] can now handle <em>xmpp:...?message</em> links.</li>
<li>Lots of fixes in [143: Azoth], [144: Azoth Xoox] and other plugins.</li>
<li>Lots of fixes for Poshuku OnlineBookmarks.</li>
<li>Optimized timers in LeechCraft, so that it, for example, on my machine it causes CPU wake ups 13-17 times per second instead of 50-60.</li>
</ul>

Moreover, our libvlc-based media player was renamed from Potorchu to Laure and got a huge portion of code and care, thanks <em>Ignotus</em>! Seems like this media player is already usable a bit, though it didn't get into this milestone. But it surely will be included in 0.6.0!

And here are all the digests corresponding to this milestone for those curious ones: [227: #13], [229: #14], [240: #15], [242: #16], [244: #17], [272: #18] and [274: #19].

Packages for various Ubuntu versions, for openSUSE, Fedora and ebuilds for Gentoo would be available soon. Please note that the address of Ubuntu PPA has changed, so consult the [5: download instructions] page to get up-to-date LeechCraft!","LeechCraft milestone 0.4.95 ""Bet It All on Black"" is released.

This is the last milestone before the 0.5.0 containing new features. Further milestones (0.4.96-0.4.99) would bring only bugfixes, if any.

The development for post-0.5.0 times continues in the <em>master</em> branch, while things for the 0.5.0 release are getting stabilized in the <em>0.5.0</em> branch. Beware when you'd checkout sources next time :)

So, let me list some major features and improvements since the 0.4.90 release:
<ul>
<li>Support for <a href=""http://xmpp.org/extensions/xep-0055.html"">XEP-0055: Jabber Search</a> in [144: Azoth Xoox].</li>
<li>Reworked Poshuku OnlineBookmarks: it's almost rewritten from scratch. Particularly, it now supports its own plugins, and exact bookmark services are implemented as plugins. Currently supported services are Read It Later and Del.icio.us.</li>
<li>Implemented Azoth OTRoid for supporting <a href=""http://www.cypherpunks.ca/otr/"" target=""_blank"">Off-The-Record</a> messaging system in [143: Azoth].</li>
<li>[7: Aggregator] now queues updates of feeds instead of updating them all at once: no more lags on update!</li>
<li>Added KnowHow plugin for displaying tips of the days on startup.</li>
<li>[210: AdvancedNotifications] now supports enabling/disabling rules and single shot rules.</li>
<li>[158: Poshuku] now supports enabling WebGL for corresponding QtWebKit versions. And it really works!</li>
<li>[158: Poshuku] migrated to QGraphicsView-based web view, resulting in a bit increased performance, especially with effects-rich CSS3-(ab)using web sites.</li>
<li>[143: Azoth] and [144: Azoth Xoox] now support inviting to MUCs.</li>
<li>[143: Azoth] now supports some operations via drag-n-drop, like moving contacts between groups, sending files to contacts and uniting contacts into metacontacts.</li>
<li>Considerably improved [196: Azoth AdiumStyles]: added support for style variants and lots of compatibility improvements.</li>
<li>Added the ""Group send"" feature to [143: Azoth].</li>
<li>[img_assist|nid=246|title=Poshuku hover box|desc=|link=popup|align=right|width=220][26: Poshuku]: display links on hover in a nice box on the viewport instead of status bar (see the screenshot on the right).</li>
<li>[143: Azoth] now has buttons to install more different icons/themes in settings.</li>
<li>Added periodical updates feature to [153: LackMan].</li>
<li>Added Poshuku Pogooglue plugin for instantly searching selected text in Google.</li>
<li>Added <em>Gajim</em> style to Azoth StandardStyles.</li>
<li>Added context menu for nicknames in MUCs in [143: Azoth].</li>
<li>[143: Azoth] now can optionally append a message to the chat view whenever participant ends the conversation.</li>
<li>It is possible now to disable sending ""conversation ended"" chat participant state events in [143: Azoth].</li>
<li>[145: Azoth Acetamide] now supports SSL connections.</li>
<li>LeechCraft now opens URLs in external applications if those URLs couldn't be handled by LeechCraft plugins.</li>
<li>[144: Azoth Xoox] can now handle <em>xmpp:...?message</em> links.</li>
<li>Lots of fixes in [143: Azoth], [144: Azoth Xoox] and other plugins.</li>
<li>Lots of fixes for Poshuku OnlineBookmarks.</li>
<li>Optimized timers in LeechCraft, so that it, for example, on my machine it causes CPU wake ups 13-17 times per second instead of 50-60.</li>
</ul>

Moreover, our libvlc-based media player was renamed from Potorchu to Laure and got a huge portion of code and care, thanks <em>Ignotus</em>! Seems like this media player is already usable a bit, though it didn't get into this milestone. But it surely will be included in 0.6.0!

And here are all the digests corresponding to this milestone for those curious ones: [227: #13], [229: #14], [240: #15], [242: #16], [244: #17], [272: #18] and [274: #19].

Packages for various Ubuntu versions, for openSUSE, Fedora and ebuilds for Gentoo would be available soon. Please note that the address of Ubuntu PPA has changed, so consult the [5: download instructions] page to get up-to-date LeechCraft!"
289,story,LeechCraft 0.4.96 is released,1328777231,leechcraft-0.4.96-is-released,"LeechCraft 0.4.96 ""Far Beyond The Days Of Grace"" is released! 

This is mostly a bugfix release. The only non-bugfix thing is a new status icon theme <em>Likey</em> made by Like-all. Make sure to check it out in Azoth settings!

Among the fixed bugs are the following ones:
<ul>
<li><a href=""http://dev.leechcraft.org/issues/511"">#511</a>: Failure to readd the accounts once they are deleted in Poshuku OnlineBookmarks.</li>
<li>Fixed build of SecMan SecureStorage.</li>
<li>Fixed handling of media players in Azoth Xtazy that were started after LeechCraft had been started.</li>
<li>[196: Azoth AdiumStyles]: support styles using tags other than <em>div</em> for marking message insertion places.</li>
<li>Fixed handling of <em>/me</em> in Azoth AdiumStyles.</li>
<li>Members-moderators are now able to kick participants in [144: Azoth Xoox].</li>
<li>Fixed Drag-n-Drop of a contact on itself in [214: Azoth Metacontacts].</li>
<li>Authorization issues were fixed in [143: Azoth].</li>
<li>Self PEP events are also handling in [144: Azoth Xoox] now.</li>
</ul>

The tarball is available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.96.tar.xz/download"">here</a>, and packages for supported OSes and distros will be available shortly.","LeechCraft 0.4.96 ""Far Beyond The Days Of Grace"" is released! 

This is mostly a bugfix release. The only non-bugfix thing is a new status icon theme <em>Likey</em> made by Like-all. Make sure to check it out in Azoth settings!

Among the fixed bugs are the following ones:
<ul>
<li><a href=""http://dev.leechcraft.org/issues/511"">#511</a>: Failure to readd the accounts once they are deleted in Poshuku OnlineBookmarks.</li>
<li>Fixed build of SecMan SecureStorage.</li>
<li>Fixed handling of media players in Azoth Xtazy that were started after LeechCraft had been started.</li>
<li>[196: Azoth AdiumStyles]: support styles using tags other than <em>div</em> for marking message insertion places.</li>
<li>Fixed handling of <em>/me</em> in Azoth AdiumStyles.</li>
<li>Members-moderators are now able to kick participants in [144: Azoth Xoox].</li>
<li>Fixed Drag-n-Drop of a contact on itself in [214: Azoth Metacontacts].</li>
<li>Authorization issues were fixed in [143: Azoth].</li>
<li>Self PEP events are also handling in [144: Azoth Xoox] now.</li>
</ul>

The tarball is available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.96.tar.xz/download"">here</a>, and packages for supported OSes and distros will be available shortly."
292,story,LeechCraft 0.4.97 is released,1328777241,leechcraft-0.4.97-is-released,"LeechCraft 0.4.97 ""Shadow Walker"" is released!

In this (purely bugfix) release:
<ul>
<li>[7: Aggregator]: updated the list of feeds.</li>
<li>[143: Azoth]: fast change status button offline by default.</li>
<li>Azoth: added perr.svg to Likey iconset.</li>
<li>Azoth: fixed drawing groups heading.</li>
<li>[196: Azoth AdiumStyles]: detect outgoing messages in MUCs.</li>
<li>[163: Azoth ChatHistory]: select proper history item.</li>
<li>[144: Azoth Xoox]: fixed Ad-Hoc commands.</li>
<li>Azoth plugins: more plugin icons.</li>
<li>[10: BitTorrent]: optimized updating pieces model.</li>
<li>BitTorrent: optimized calculating interesting pieces.</li>
<li>Core: correctly handle arguments from local socket. The name of LeechCraft executable isn't considered an argument anymore.</li>
<li>[13: CSTP]: fixed handling redirections for internal tasks. More working feeds in Aggregator now!</li>
<li>EiskaltDC++: fixed building with Boost-1.48 and later.</li>
<li>Poshuku OB: sync fixes.</li>
<li>Poshuku OB RIL: fixed uploading empty bookmarks.</li>
</ul>

Source tarball <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.97.tar.xz/download"">is available</a>. Packages for various OSes and distros would be available shortly.","LeechCraft 0.4.97 ""Shadow Walker"" is released!

In this (purely bugfix) release:
<ul>
<li>[7: Aggregator]: updated the list of feeds.</li>
<li>[143: Azoth]: fast change status button offline by default.</li>
<li>Azoth: added perr.svg to Likey iconset.</li>
<li>Azoth: fixed drawing groups heading.</li>
<li>[196: Azoth AdiumStyles]: detect outgoing messages in MUCs.</li>
<li>[163: Azoth ChatHistory]: select proper history item.</li>
<li>[144: Azoth Xoox]: fixed Ad-Hoc commands.</li>
<li>Azoth plugins: more plugin icons.</li>
<li>[10: BitTorrent]: optimized updating pieces model.</li>
<li>BitTorrent: optimized calculating interesting pieces.</li>
<li>Core: correctly handle arguments from local socket. The name of LeechCraft executable isn't considered an argument anymore.</li>
<li>[13: CSTP]: fixed handling redirections for internal tasks. More working feeds in Aggregator now!</li>
<li>EiskaltDC++: fixed building with Boost-1.48 and later.</li>
<li>Poshuku OB: sync fixes.</li>
<li>Poshuku OB RIL: fixed uploading empty bookmarks.</li>
</ul>

Source tarball <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.97.tar.xz/download"">is available</a>. Packages for various OSes and distros would be available shortly."
294,page,Azoth Zheet,1325249362,plugins-azoth-zheet,"Azoth Zheet provides support for the Windows Live Messenger (former MSN) protocol in Azoth.

Zheet is based on the <a href=""http://sourceforge.net/projects/libmsn/"">libmsn</a> library. The following protocol features are currently supported:
<ul>
<li>Message delivery receipts.</li>
<li>Attention requests (nudges).</li>
<li>Notifications about messages in mailbox.</li>
<li>Announcing own current tune and fetching others' one.</li>
<li>Multiple groups for each contact.</li>
<li>Authorization management.</li>
<li>Blacklist management.</li>
</ul>","Azoth Zheet provides support for the Windows Live Messenger (former MSN) protocol in Azoth.

Zheet is based on the <a href=""http://sourceforge.net/projects/libmsn/"">libmsn</a> library. The following protocol features are currently supported:
<ul>
<li>Message delivery receipts.</li>
<li>Attention requests (nudges).</li>
<li>Notifications about messages in mailbox.</li>
<li>Announcing own current tune and fetching others' one.</li>
<li>Multiple groups for each contact.</li>
<li>Authorization management.</li>
<li>Blacklist management.</li>
</ul>"
295,page,Azoth Vader,1325322049,plugins-azoth-vader,"Azoth Vader provides supports for the MRIM protocol used in the Mail.Ru Agent IM service.

Vader is based on an own implementation of the MRIM protocol, partially based on available (and outdated) official specs and partly reverse-engineered. The following protocol features are supported:
<ul>
<li>Extended statuses.</li>
<li>Attention requests (alarms).</li>
<li>Publishing current tune and fetching others' tune.</li>
<li>Message delivery receipts.</li>
<li>Mailbox notifications.</li>
<li>Opening mailbox without login.</li>
<li>Authorization management.</li>
<li>Grouping contacts.</li>
</ul>","Azoth Vader provides supports for the MRIM protocol used in the Mail.Ru Agent IM service.

Vader is based on an own implementation of the MRIM protocol, partially based on available (and outdated) official specs and partly reverse-engineered. The following protocol features are supported:
<ul>
<li>Extended statuses.</li>
<li>Attention requests (alarms).</li>
<li>Publishing current tune and fetching others' tune.</li>
<li>Message delivery receipts.</li>
<li>Mailbox notifications.</li>
<li>Opening mailbox without login.</li>
<li>Authorization management.</li>
<li>Grouping contacts.</li>
</ul>"
298,story,Threaded storage in Aggregator,1325594778,threaded-storage-in-aggregator,"Storage operations in [7: Aggregator] were always single-threaded and performed in the main GUI thread. Particularly, feed updates were also performed in the main thread, including fetching already-existent items from the database, looking for modified ones, updating modified items and inserting new ones. That resulted in a terrible overall performance during feed updates — one could tell when Aggregator decides to update its feeds just by feeling how sluggish and slow LeechCraft interface suddenly becomes for a dozen of seconds.

That's in the past now. Yesterday all that feed updating machinery was moved to a separate thread, and only parsing the downloaded feeds is done in the main GUI thread now, but I doubt that it is really worth moving that into a separate thread as well — XML parsing is fast as hell and is hardly the performance hotspot.

The threaded architecture allows moving arbitrary operations into the storage thread as long it makes sense from the UI point of view. For example, marking whole channels as read or unread was also moved into that separate thread, but it hardly makes sense to fetch items of the currently selected channel to that thread — user would wait for this operation to complete anyway, and it's fast enough for user to not start doing other stuff.

Threaded storage is already tested with SQLite and PostgreSQL on Linux and generally seems to work. It should work with any PostgreSQL/MySQL installation and with most modern SQLite installations. Though, if SQLite was compiled without threading support, Aggregator would misbehave, likely resulting in segfaults. In this case, file a bug to your distro's SQLite maintainers. And, of course, the usual warning: threaded storage is still quite experimental and not thoroughly tested, so bugs may happen.

This change only applies to the <em>master</em> branch: it won't be included in the upcoming 0.5 release.","Storage operations in [7: Aggregator] were always single-threaded and performed in the main GUI thread. Particularly, feed updates were also performed in the main thread, including fetching already-existent items from the database, looking for modified ones, updating modified items and inserting new ones. That resulted in a terrible overall performance during feed updates — one could tell when Aggregator decides to update its feeds just by feeling how sluggish and slow LeechCraft interface suddenly becomes for a dozen of seconds.

That's in the past now. Yesterday all that feed updating machinery was moved to a separate thread, and only parsing the downloaded feeds is done in the main GUI thread now, but I doubt that it is really worth moving that into a separate thread as well — XML parsing is fast as hell and is hardly the performance hotspot.

The threaded architecture allows moving arbitrary operations into the storage thread as long it makes sense from the UI point of view. For example, marking whole channels as read or unread was also moved into that separate thread, but it hardly makes sense to fetch items of the currently selected channel to that thread — user would wait for this operation to complete anyway, and it's fast enough for user to not start doing other stuff.

Threaded storage is already tested with SQLite and PostgreSQL on Linux and generally seems to work. It should work with any PostgreSQL/MySQL installation and with most modern SQLite installations. Though, if SQLite was compiled without threading support, Aggregator would misbehave, likely resulting in segfaults. In this case, file a bug to your distro's SQLite maintainers. And, of course, the usual warning: threaded storage is still quite experimental and not thoroughly tested, so bugs may happen.

This change only applies to the <em>master</em> branch: it won't be included in the upcoming 0.5 release."
300,story,LeechCraft 0.4.98 is released,1328777256,leechcraft-0.4.98-is-released,"LeechCraft 0.4.98 ""Ill Part Two"" is released!

In this, one more bugfix release:
<ul>
<li>[7: Aggregator]: fixed incorrect boost.optional usage.</li>
<li>Aggregator: fixed segfault on startup due to incorrect DB settings.</li>
<li>[143: Azoth]: proper icon for Draw Attention action.</li>
<li>Azoth: fixed segfault when opening chat with entries that are gone.</li>
<li>Azoth: correct context menus on entries with non-latin names.</li>
<li>[145: Azoth Acetamide]: fixed join/leave/kick messages (fixes segfaults with AdiumStyles).</li>
<li>[196: Azoth AdiumStyles]: fixed /me-related bug.</li>
<li>Azoth AdiumStyles: fixed self-closing tags in themes.</li>
<li>[13: CSTP]: correctly set UA from settings.</li>
<li>[155: Kinotify]: seemingly fixed parenting-related bugs.</li>
<li>[26: Poshuku]: fixed text margins in URL edit.</li>
</ul>

Source tarball is available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.98.tar.xz/download"">here</a>.","LeechCraft 0.4.98 ""Ill Part Two"" is released!

In this, one more bugfix release:
<ul>
<li>[7: Aggregator]: fixed incorrect boost.optional usage.</li>
<li>Aggregator: fixed segfault on startup due to incorrect DB settings.</li>
<li>[143: Azoth]: proper icon for Draw Attention action.</li>
<li>Azoth: fixed segfault when opening chat with entries that are gone.</li>
<li>Azoth: correct context menus on entries with non-latin names.</li>
<li>[145: Azoth Acetamide]: fixed join/leave/kick messages (fixes segfaults with AdiumStyles).</li>
<li>[196: Azoth AdiumStyles]: fixed /me-related bug.</li>
<li>Azoth AdiumStyles: fixed self-closing tags in themes.</li>
<li>[13: CSTP]: correctly set UA from settings.</li>
<li>[155: Kinotify]: seemingly fixed parenting-related bugs.</li>
<li>[26: Poshuku]: fixed text margins in URL edit.</li>
</ul>

Source tarball is available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.98.tar.xz/download"">here</a>."
302,page,Donate us,1375697595,donate,"You can donate us with one of the following methods:

<h3>PayPal</h3>

<form action=""https://www.paypal.com/cgi-bin/webscr"" method=""post"" target=""_top"">
<input type=""hidden"" name=""cmd"" value=""_s-xclick"">
<input type=""hidden"" name=""hosted_button_id"" value=""YQ8NB8QGS9TN4"">
<input type=""image"" src=""https://www.paypalobjects.com/en_GB/i/btn/btn_donate_SM.gif"" border=""0"" name=""submit"" alt=""PayPal – The safer, easier way to pay online."">
<img alt="""" border=""0"" src=""https://www.paypalobjects.com/ru_RU/i/scr/pixel.gif"" width=""1"" height=""1"">
</form>

<h3>Yandex.Money</h3>
<div style=""width: 30%;"">
<form style=""margin: 0; padding: 0;"" action=""https://money.yandex.ru/charity.xml"" method=""post""><input type=""hidden"" name=""to"" value=""410011236893071""/><input type=""hidden"" name=""CompanyName"" value=""LeechCraft""/><input type=""hidden"" name=""CompanyLink"" value=""http://leechcraft.org""/><table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td><div style=""background: url(http://img.yandex.net/i/li-uncolorer-rt.gif) no-repeat right top #FFFFFF;""><div style=""background: url(http://img.yandex.net/i/li-uncolorer-rb.gif) no-repeat right bottom;""><div style=""background: url(http://img.yandex.net/i/li-uncolorer-lb.gif) no-repeat left bottom;""><div style=""background: url(http://img.yandex.net/i/li-uncolorer-lt.gif) no-repeat left top; margin-right: 10px; padding: 10px 0 0 10px;""><table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td><table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td><input type=""submit"" value=""Отправить"" style=""margin-right: 5px;""/></td><td><input type=""text"" id=""CompanySum"" name=""CompanySum"" value="""" size=""4"" style=""margin-right: 5px;""/></td><td nowrap=""nowrap"" style=""font: 70% Verdana, Arial, Geneva CY, Sans-Serif;"" valign=""bottom""><strong>рублей Яндекс.Деньгами</strong></td></tr></table></td><td width=""90"" rowspan=""3"" valign=""bottom""><a href=""http://money.yandex.ru/""><img src=""http://img.yandex.net/i/ym-logo.gif"" width=""90"" height=""39"" border=""0"" style=""margin-left: 5px;""/></a></td></tr><tr><td nowrap=""nowrap"" style=""font: 70% Verdana, Arial, Geneva CY, Sans-Serif;"">на счет <span style=""color: #006600; font-weight: bold;"">410011236893071</span>&nbsp;(<a href=""http://leechcraft.org""><span style=""color: #666666; text-decoration: underline;"">LeechCraft</span></a>)</td></tr><tr><td><img src=""http://img.yandex.net/i/x.gif"" width=""1"" height=""10"" /></td></tr></table></div></div></div></div></td></tr></table></form>
</div>","You can donate us with one of the following methods:

<h3>PayPal</h3>

<form action=""https://www.paypal.com/cgi-bin/webscr"" method=""post"" target=""_top"">
<input type=""hidden"" name=""cmd"" value=""_s-xclick"">
<input type=""hidden"" name=""hosted_button_id"" value=""YQ8NB8QGS9TN4"">
<input type=""image"" src=""https://www.paypalobjects.com/en_GB/i/btn/btn_donate_SM.gif"" border=""0"" name=""submit"" alt=""PayPal – The safer, easier way to pay online."">
<img alt="""" border=""0"" src=""https://www.paypalobjects.com/ru_RU/i/scr/pixel.gif"" width=""1"" height=""1"">
</form>

<h3>Yandex.Money</h3>
<div style=""width: 30%;"">
<form style=""margin: 0; padding: 0;"" action=""https://money.yandex.ru/charity.xml"" method=""post""><input type=""hidden"" name=""to"" value=""410011236893071""/><input type=""hidden"" name=""CompanyName"" value=""LeechCraft""/><input type=""hidden"" name=""CompanyLink"" value=""http://leechcraft.org""/><table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td><div style=""background: url(http://img.yandex.net/i/li-uncolorer-rt.gif) no-repeat right top #FFFFFF;""><div style=""background: url(http://img.yandex.net/i/li-uncolorer-rb.gif) no-repeat right bottom;""><div style=""background: url(http://img.yandex.net/i/li-uncolorer-lb.gif) no-repeat left bottom;""><div style=""background: url(http://img.yandex.net/i/li-uncolorer-lt.gif) no-repeat left top; margin-right: 10px; padding: 10px 0 0 10px;""><table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td><table border=""0"" cellspacing=""0"" cellpadding=""0""><tr><td><input type=""submit"" value=""Отправить"" style=""margin-right: 5px;""/></td><td><input type=""text"" id=""CompanySum"" name=""CompanySum"" value="""" size=""4"" style=""margin-right: 5px;""/></td><td nowrap=""nowrap"" style=""font: 70% Verdana, Arial, Geneva CY, Sans-Serif;"" valign=""bottom""><strong>рублей Яндекс.Деньгами</strong></td></tr></table></td><td width=""90"" rowspan=""3"" valign=""bottom""><a href=""http://money.yandex.ru/""><img src=""http://img.yandex.net/i/ym-logo.gif"" width=""90"" height=""39"" border=""0"" style=""margin-left: 5px;""/></a></td></tr><tr><td nowrap=""nowrap"" style=""font: 70% Verdana, Arial, Geneva CY, Sans-Serif;"">на счет <span style=""color: #006600; font-weight: bold;"">410011236893071</span>&nbsp;(<a href=""http://leechcraft.org""><span style=""color: #666666; text-decoration: underline;"">LeechCraft</span></a>)</td></tr><tr><td><img src=""http://img.yandex.net/i/x.gif"" width=""1"" height=""10"" /></td></tr></table></div></div></div></div></td></tr></table></form>
</div>"
303,story,LeechCraft 0.4.99 is released,1328777267,leechcraft-0.4.99-is-released,"LeechCraft 0.4.99 ""Decimate the Weak"" is released!

In this release, the last one before The Great O-Five-O:

<ul>
<li>[143: Azoth]: entry info is copyable now.</li>
<li>Azoth: fixed quite a lot of memory leaks.</li>
<li>Azoth: shortcut for showing/hiding side widget with roster. One should press <em>Ctrl+J</em> and then <em>A</em> for that.</li>
<li>[163: Azoth ChatHistory]: added plugin icon.</li>
<li>Azoth Rosenthal: fixed suggestions display.</li>
<li>[144: Azoth Xoox]: fixed cases where nick was empty.</li>
<li>Core: fixed cases where no tab plugins are present.</li>
<li>[155: Kinotify]: <code type=""css"">word-wrap: break-word;</code> for themes.</li>
<li>[153: LackMan]: always update actions metadata.</li>
<li>LackMan: backported changes for repository format from <em>master</em> branch.</li>
<li>LackMan: backported support for xz/lzma archives from <em>master</em> branch.</li>
<li>[26: Poshuku]: Adobe Flash is working again.</li>
<li>Other: fixed Windows build.</li>
</ul>

Source tarball is available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.99.tar.xz/download"">here</a>.","LeechCraft 0.4.99 ""Decimate the Weak"" is released!

In this release, the last one before The Great O-Five-O:

<ul>
<li>[143: Azoth]: entry info is copyable now.</li>
<li>Azoth: fixed quite a lot of memory leaks.</li>
<li>Azoth: shortcut for showing/hiding side widget with roster. One should press <em>Ctrl+J</em> and then <em>A</em> for that.</li>
<li>[163: Azoth ChatHistory]: added plugin icon.</li>
<li>Azoth Rosenthal: fixed suggestions display.</li>
<li>[144: Azoth Xoox]: fixed cases where nick was empty.</li>
<li>Core: fixed cases where no tab plugins are present.</li>
<li>[155: Kinotify]: <code type=""css"">word-wrap: break-word;</code> for themes.</li>
<li>[153: LackMan]: always update actions metadata.</li>
<li>LackMan: backported changes for repository format from <em>master</em> branch.</li>
<li>LackMan: backported support for xz/lzma archives from <em>master</em> branch.</li>
<li>[26: Poshuku]: Adobe Flash is working again.</li>
<li>Other: fixed Windows build.</li>
</ul>

Source tarball is available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.4.99.tar.xz/download"">here</a>."
305,page,Poshuku FatApe,1328776856,plugins-poshuku-fatape,"FatApe provides support for GreaseMonkey userscripts. These scripts could be used for adding new features to web pages (for example, embedding price comparisons within shopping sites), fixing rendering bugs, combining data from multiple webpages, and numerous other purposes.

This plugin supports almost whole API of GreaseMonkey and is compatible with most userscripts present ""in the wild"".

FatApe usage is documented on the corresponding [271: user guide page].","FatApe provides support for GreaseMonkey userscripts. These scripts could be used for adding new features to web pages (for example, embedding price comparisons within shopping sites), fixing rendering bugs, combining data from multiple webpages, and numerous other purposes.

This plugin supports almost whole API of GreaseMonkey and is compatible with most userscripts present ""in the wild"".

FatApe usage is documented on the corresponding [271: user guide page]."
307,story,LeechCraft 0.5.0 is released,1328780639,leechcraft-0.5.0-is-released,"[img_assist|nid=59|title=Poshuku Browser|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=139|title=MUC|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=194|title=MUC with Adium style|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=58|title=Summary|desc=|link=popup|align=right|width=220|height=136]

Today LeechCraft 0.5.0 «Saviour Welcome Home» is finally released!

This is a yet another major release of LeechCraft, and we are really proud to announce it. A lot has changed since the 0.4.0 release more than a year ago. The most significant change is, of course, [143: Azoth] — our brand new multiprotocol modular IM client. It has plugins for [144: XMPP] (quite sophisticated, in fact) and [145: IRC] protocol in this release, and support for [294: Windows Live Messenger] and [295: Mail.Ru Agent] is already in <em>master</em>. It also has a bunch of other plugins, like [196: Adium styles support], antispam module, OTR encryption support plugin, spellchecker, [191: TeX formatter] and autopaster.

This release also introduces:
<ul>
<li>[305: Greasemonkey support layer] for [26: Poshuku];</li>
<li>module for syncing bookmarks with online bookmarks services like Read it Later and Del.icio.us;</li>
<li>new, highly configurable notifications framework with the [210: AdvancedNotifications] plugin;</li>
<li>a reworked tabs system.</li>
</ul>

Also, LeechCraft was optimized a lot. Particularly, heavy RSS operations like feed updates don't slow down the whole app anymore.

Packages for supported OSes will be ready soon. As always, instructions for installing are available on the [5: Download] page. Source tarball is already available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.5.0.tar.xz/download"">at SourceForge</a>.

Those interested ones may find all the release announcements corresponding to milestones in the 0.5 series by the <a href=""taxonomy/term/39"">0.5.x</a> tag.

Regarding the future plans, we already have the following in our <em>master</em> branch for the next releases:
<ul>
<li>new tabbed interface and concept — LeechCraft Sidebar;</li>
<li>support for MSN/WLM and MRIM protocols in Azoth (and more are coming!);</li>
<li>better, faster and more compatible Adium styles;</li>
<li>mail client;</li>
<li>new libvlc-based mediaplayer;</li>
<li>infrastructure for syncing settings and data of the whole application between different computers;</li>
<li>module for network storage management like Yandex.Disk;</li>
<li>much, much more.</li>
</ul>

We also plan to add support for Google Chrome extensions and move on to multiprocess WebKit (but that requires Qt 5). An intelligent application-wide semantic storage is also on its way.","[img_assist|nid=59|title=Poshuku Browser|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=139|title=MUC|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=194|title=MUC with Adium style|desc=|link=popup|align=right|width=220|height=136]

[img_assist|nid=58|title=Summary|desc=|link=popup|align=right|width=220|height=136]

Today LeechCraft 0.5.0 «Saviour Welcome Home» is finally released!

This is a yet another major release of LeechCraft, and we are really proud to announce it. A lot has changed since the 0.4.0 release more than a year ago. The most significant change is, of course, [143: Azoth] — our brand new multiprotocol modular IM client. It has plugins for [144: XMPP] (quite sophisticated, in fact) and [145: IRC] protocol in this release, and support for [294: Windows Live Messenger] and [295: Mail.Ru Agent] is already in <em>master</em>. It also has a bunch of other plugins, like [196: Adium styles support], antispam module, OTR encryption support plugin, spellchecker, [191: TeX formatter] and autopaster.

This release also introduces:
<ul>
<li>[305: Greasemonkey support layer] for [26: Poshuku];</li>
<li>module for syncing bookmarks with online bookmarks services like Read it Later and Del.icio.us;</li>
<li>new, highly configurable notifications framework with the [210: AdvancedNotifications] plugin;</li>
<li>a reworked tabs system.</li>
</ul>

Also, LeechCraft was optimized a lot. Particularly, heavy RSS operations like feed updates don't slow down the whole app anymore.

Packages for supported OSes will be ready soon. As always, instructions for installing are available on the [5: Download] page. Source tarball is already available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.0/leechcraft-0.5.0.tar.xz/download"">at SourceForge</a>.

Those interested ones may find all the release announcements corresponding to milestones in the 0.5 series by the <a href=""taxonomy/term/39"">0.5.x</a> tag.

Regarding the future plans, we already have the following in our <em>master</em> branch for the next releases:
<ul>
<li>new tabbed interface and concept — LeechCraft Sidebar;</li>
<li>support for MSN/WLM and MRIM protocols in Azoth (and more are coming!);</li>
<li>better, faster and more compatible Adium styles;</li>
<li>mail client;</li>
<li>new libvlc-based mediaplayer;</li>
<li>infrastructure for syncing settings and data of the whole application between different computers;</li>
<li>module for network storage management like Yandex.Disk;</li>
<li>much, much more.</li>
</ul>

We also plan to add support for Google Chrome extensions and move on to multiprocess WebKit (but that requires Qt 5). An intelligent application-wide semantic storage is also on its way."
309,image,Renkoo Adium style,1328967547,,Renkoo theme with Azoth AdiumStyles plugin.,Renkoo theme with Azoth AdiumStyles plugin.
310,page,Liznoo,1388390158,plugins-liznoo,"Liznoo is LeechCraft power manager.

[img_assist|nid=318|title=Battery state icon|desc=|link=popup|width=440]

[img_assist|nid=502|title=Battery history|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Displays battery status in LeechCraft tray.</li>
<li>Displays battery charge and power consumption history.</li>
<li>Notifies other plugins about sleep and resume events. This way plugins like [143: Azoth] can disconnect from servers gracefully on hibernation and reconnect properly on startup.</li>
<li>Allows other plugins like a video player to prohibit screensaver.</li>
<li>Allows user to easily sleep/hibernate the system.</li>
<li>Notifies user when device starts discharging or charging.</li>
<li>Notifies user on low power level.</li>
</ul>

<h2>Backends</h2>
<ul>
<li>UPower on Linux.</li>
<li>WinAPI on WIndows.</li>
<li>Native ioctl on FreeBSD.</li>
<li>Native APIs on Mac OS X.</li>
</ul>","Liznoo is LeechCraft power manager.

[img_assist|nid=318|title=Battery state icon|desc=|link=popup|width=440]

[img_assist|nid=502|title=Battery history|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Displays battery status in LeechCraft tray.</li>
<li>Displays battery charge and power consumption history.</li>
<li>Notifies other plugins about sleep and resume events. This way plugins like [143: Azoth] can disconnect from servers gracefully on hibernation and reconnect properly on startup.</li>
<li>Allows other plugins like a video player to prohibit screensaver.</li>
<li>Allows user to easily sleep/hibernate the system.</li>
<li>Notifies user when device starts discharging or charging.</li>
<li>Notifies user on low power level.</li>
</ul>

<h2>Backends</h2>
<ul>
<li>UPower on Linux.</li>
<li>WinAPI on WIndows.</li>
<li>Native ioctl on FreeBSD.</li>
<li>Native APIs on Mac OS X.</li>
</ul>"
311,page,TabSessManager,1330852196,plugins-tabsessmanager,"TabSessManager manages tab sessions in LeechCraft, automatically restoring last session and allowing to create named sessions.

<h2>Features</h2>
<ul>
<li>Automatically restores last session on LeechCraft startup.</li>
<li>Allows one to save named sessions for restoring them later.</li>
</ul>","TabSessManager manages tab sessions in LeechCraft, automatically restoring last session and allowing to create named sessions.

<h2>Features</h2>
<ul>
<li>Automatically restores last session on LeechCraft startup.</li>
<li>Allows one to save named sessions for restoring them later.</li>
</ul>"
312,story,LeechCraft 0.5.60 is released!,1331811656,leechcraft-0.5.60-is-released,"We haven't published any development digests since LeechCraft 0.4.95, and it's time to fill the gap, since the first milestone of the new 0.6.x series, LeechCraft 0.5.60 ""Hibernating Reason"", is released today!

So, since 0.4.95 we've introduced a bunch of new plugins. Most importantly, the following protocol plugins have been added to [143: Azoth]:
<ul>
<li>[315: Astrality], our Telepathy abstraction layer. Particularly, it allows to use protocols provided by <em>libpurple</em> via the <em>telepathy-haze</em> connection manager, like ICQ, AIM, Gadu-gadu, Yahoo and a bunch of others.</li>
<li>[295: Vader], an implementation of the Mail.Ru Agent protocol. It currently supports extended statuses, sending SMS, attention requests, user tune, message delivery receipts, mailbox notifications and other features of the protocol.</li>
<li>[294: Zheet], for the MSN protocol. It supports pretty much the same features.</li>
</ul>

The Sidebar plugin has been added. It displays a sidebar with actions for quickly opening new tabs, and it also displays currently opened tabs and allows to switch between them. If there are more than three tabs of some kind (like web browser tabs), they are folded into single action to avoid cluttering up the sidebar. It also incorporates something like a tray area, where other plugins may embed their actions or status icons. It is planned that some day Sidebar would supersede our current tabbar.

One of such plugins that embed actions into Sidebar is our new power manager plugin, [310: Liznoo]. It displays battery status in Sidebar's tray, and it also detects when computer goes to sleep or resumes and notifies other plugins about these events. This way [143: Azoth] can gracefully close connections to servers on hibernating and resume just as gracefully when returning from sleep. Liznoo also supports displaying history of battery charge and power consumption as well as notifications about low battery charge. It also allows user to make the machine go to sleep mode or hibernation.

Session management is now centralized and performed by the [311: TabSessManager] plugin. This means in near future even things like Azoth chat tabs will be recovered on LeechCraft start. Global centralized tab unclose manager is also on its way. TabSessManager also supports explicitly named sessions, so that one can save a bunch of interesting tabs in a named session and restore them later.

[img_assist|nid=314|title=NetStoreManager|desc=|link=popup|align=right|width=220|height=136]
[313: NetStoreManager], plugin for management of remote network data storages like Yandex.Disk, has been added. It is modular, and for now only Yandex.Disk is supported. NetStoreManager allows to upload files easily from LeechCraft, it maintains a list of uploaded files and allows to prolongate them (if the service supports it).

Some other important changes:
<ul>
<li>There is an API level check now when loading plugins, so no more segfaults because of plugins for previous LeechCraft versions!</li>
<li>[145: Azoth Acetamide], our IRC protocol plugin, plugin got a lot of improvements. Particularly, it now has a menu for CTCP operations, and user info is supported.</li>
<li>[144: Azoth Xoox], the XMPP protocol plugin, now allows to add download tasks remotely via the Ad-Hoc Commands XEP. It also got support for message forwarding. It also doesn't request vCards and versions in MUCs via gateways anymore. Support for emails and phones in vCard dialog was also added.</li>
<li>[7: Aggregator] now updates its feeds in a separate thread. No more freezes on update! Marking whole channels as read or unread is also performed in a separate thread.</li>
<li>Added importers from Psi+, Vacuum and Kopete to [22: New Life].</li>
<li>A bunch of fixes in [196: Azoth AdiumStyles], so the support for themes is almost fully compliant now. Themes like Renkoo or Satin look really nice!</li>
<li>Tabs pinning has been moved to a separate plugin — Pintab.</li>
<li>Added GActs, a plugin for global shortcut management, so Azoth now finally has a global shortcut for viewing next unread message.</li>
<li>LeechCraft now uses global system iconsets instead of carrying one with it. Oxygen or KFaenza are recommended!</li>
</ul>

Among other changes:
<ul>
<li>Added Poshuku Pogooglue plugin for quick googling of selected text.</li>
<li>Added Azoth Keeso plugin for morphing text InTo soMeTHiNg lIKe ThIS.</li>
<li>Caching in the Resource Loader framework, which should dramatically reduce amount of HDD accesses in plugins like Azoth.</li>
<li>Azoth now understands protocols where a user may have more than one permission of the same role in a MUC at a time.</li>
<li>[144: Azoth Xoox] now requests software versions for roster items and MUC participants.</li>
<li>A bit reworked UI of [143: Azoth].</li>
<li>Shortcuts for quoting and clearing chat window are now exposed.</li>
<li>Azoth now has its own fonts configurator.</li>
<li>More configurable shortcuts everywhere.</li>
<li>A bunch of protocol and behavior fixes in [143: Azoth], [145: Azoth Acetamide] and [144: Azoth Xoox].</li>
<li>Fixed self-presence and self-PEP-events handling in Azoth Xoox.</li>
<li>Fixed auto upload/download in Poshuku OnlineBookmarks.</li>
<li>Moved to C++11, so that LeechCraft can only be built now with gcc 4.5 or later or MSVS 2010 (though, the latter doesn't support a couple of plugins). clang isn't supported yet.</li>
</ul>

You can also check out the <a href=""http://dev.leechcraft.org/versions/17"" target=""_blank"">roadmap</a> for this version for more bug reports and feature requests that were implemented in this release!

Source tarball is already available on <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.60/leechcraft-0.5.60.tar.xz/download"">SourceForge</a>. Packages for supported distros will be available soon.","We haven't published any development digests since LeechCraft 0.4.95, and it's time to fill the gap, since the first milestone of the new 0.6.x series, LeechCraft 0.5.60 ""Hibernating Reason"", is released today!

So, since 0.4.95 we've introduced a bunch of new plugins. Most importantly, the following protocol plugins have been added to [143: Azoth]:
<ul>
<li>[315: Astrality], our Telepathy abstraction layer. Particularly, it allows to use protocols provided by <em>libpurple</em> via the <em>telepathy-haze</em> connection manager, like ICQ, AIM, Gadu-gadu, Yahoo and a bunch of others.</li>
<li>[295: Vader], an implementation of the Mail.Ru Agent protocol. It currently supports extended statuses, sending SMS, attention requests, user tune, message delivery receipts, mailbox notifications and other features of the protocol.</li>
<li>[294: Zheet], for the MSN protocol. It supports pretty much the same features.</li>
</ul>

The Sidebar plugin has been added. It displays a sidebar with actions for quickly opening new tabs, and it also displays currently opened tabs and allows to switch between them. If there are more than three tabs of some kind (like web browser tabs), they are folded into single action to avoid cluttering up the sidebar. It also incorporates something like a tray area, where other plugins may embed their actions or status icons. It is planned that some day Sidebar would supersede our current tabbar.

One of such plugins that embed actions into Sidebar is our new power manager plugin, [310: Liznoo]. It displays battery status in Sidebar's tray, and it also detects when computer goes to sleep or resumes and notifies other plugins about these events. This way [143: Azoth] can gracefully close connections to servers on hibernating and resume just as gracefully when returning from sleep. Liznoo also supports displaying history of battery charge and power consumption as well as notifications about low battery charge. It also allows user to make the machine go to sleep mode or hibernation.

Session management is now centralized and performed by the [311: TabSessManager] plugin. This means in near future even things like Azoth chat tabs will be recovered on LeechCraft start. Global centralized tab unclose manager is also on its way. TabSessManager also supports explicitly named sessions, so that one can save a bunch of interesting tabs in a named session and restore them later.

[img_assist|nid=314|title=NetStoreManager|desc=|link=popup|align=right|width=220|height=136]
[313: NetStoreManager], plugin for management of remote network data storages like Yandex.Disk, has been added. It is modular, and for now only Yandex.Disk is supported. NetStoreManager allows to upload files easily from LeechCraft, it maintains a list of uploaded files and allows to prolongate them (if the service supports it).

Some other important changes:
<ul>
<li>There is an API level check now when loading plugins, so no more segfaults because of plugins for previous LeechCraft versions!</li>
<li>[145: Azoth Acetamide], our IRC protocol plugin, plugin got a lot of improvements. Particularly, it now has a menu for CTCP operations, and user info is supported.</li>
<li>[144: Azoth Xoox], the XMPP protocol plugin, now allows to add download tasks remotely via the Ad-Hoc Commands XEP. It also got support for message forwarding. It also doesn't request vCards and versions in MUCs via gateways anymore. Support for emails and phones in vCard dialog was also added.</li>
<li>[7: Aggregator] now updates its feeds in a separate thread. No more freezes on update! Marking whole channels as read or unread is also performed in a separate thread.</li>
<li>Added importers from Psi+, Vacuum and Kopete to [22: New Life].</li>
<li>A bunch of fixes in [196: Azoth AdiumStyles], so the support for themes is almost fully compliant now. Themes like Renkoo or Satin look really nice!</li>
<li>Tabs pinning has been moved to a separate plugin — Pintab.</li>
<li>Added GActs, a plugin for global shortcut management, so Azoth now finally has a global shortcut for viewing next unread message.</li>
<li>LeechCraft now uses global system iconsets instead of carrying one with it. Oxygen or KFaenza are recommended!</li>
</ul>

Among other changes:
<ul>
<li>Added Poshuku Pogooglue plugin for quick googling of selected text.</li>
<li>Added Azoth Keeso plugin for morphing text InTo soMeTHiNg lIKe ThIS.</li>
<li>Caching in the Resource Loader framework, which should dramatically reduce amount of HDD accesses in plugins like Azoth.</li>
<li>Azoth now understands protocols where a user may have more than one permission of the same role in a MUC at a time.</li>
<li>[144: Azoth Xoox] now requests software versions for roster items and MUC participants.</li>
<li>A bit reworked UI of [143: Azoth].</li>
<li>Shortcuts for quoting and clearing chat window are now exposed.</li>
<li>Azoth now has its own fonts configurator.</li>
<li>More configurable shortcuts everywhere.</li>
<li>A bunch of protocol and behavior fixes in [143: Azoth], [145: Azoth Acetamide] and [144: Azoth Xoox].</li>
<li>Fixed self-presence and self-PEP-events handling in Azoth Xoox.</li>
<li>Fixed auto upload/download in Poshuku OnlineBookmarks.</li>
<li>Moved to C++11, so that LeechCraft can only be built now with gcc 4.5 or later or MSVS 2010 (though, the latter doesn't support a couple of plugins). clang isn't supported yet.</li>
</ul>

You can also check out the <a href=""http://dev.leechcraft.org/versions/17"" target=""_blank"">roadmap</a> for this version for more bug reports and feature requests that were implemented in this release!

Source tarball is already available on <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.60/leechcraft-0.5.60.tar.xz/download"">SourceForge</a>. Packages for supported distros will be available soon."
313,page,NetStoreManager,1402918644,plugins-netstoremanager,"NetStoreManager allows one to manage network storages like Yandex.Disk. It is modular, so different storages can be added to it without modifying the plugin itself.

[img_assist|nid=488|title=NetStoreManager|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Upload files easily from LeechCraft.</li>
<li>Multiple downloads for selected files.</li>
<li>Maintain the list of uploaded files.</li>
</ul>

Supported services:
<ul>
<li>Dropbox</li>
<li>Google Drive</li>
</ul>","NetStoreManager allows one to manage network storages like Yandex.Disk. It is modular, so different storages can be added to it without modifying the plugin itself.

[img_assist|nid=488|title=NetStoreManager|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Upload files easily from LeechCraft.</li>
<li>Multiple downloads for selected files.</li>
<li>Maintain the list of uploaded files.</li>
</ul>

Supported services:
<ul>
<li>Dropbox</li>
<li>Google Drive</li>
</ul>"
314,image,NetStoreManager,1330857089,,NetStoreManager plugin with a list of files on a Yandex.Disk account.,NetStoreManager plugin with a list of files on a Yandex.Disk account.
315,page,Azoth Astrality,1330857361,plugins-azoth-astrality,"Azoth Astrality adds support for various protocols provided by Telepathy to Azoth.

<h2>Features</h2>
<ul>
<li>Telepathy account creation.</li>
<li>In-band account registration.</li>
<li>Standard one-to-one chats.</li>
<li>Nick resolution.</li>
</ul>","Azoth Astrality adds support for various protocols provided by Telepathy to Azoth.

<h2>Features</h2>
<ul>
<li>Telepathy account creation.</li>
<li>In-band account registration.</li>
<li>Standard one-to-one chats.</li>
<li>Nick resolution.</li>
</ul>"
318,image,Liznoo battery icon,1331467708,,"",""
319,image,Liznoo battery history,1331467938,,"",""
322,image,Dolozhee — step 1,1333624192,,User selection in Dolozhee bug reporter.,User selection in Dolozhee bug reporter.
323,image,Dolozhee — step 2,1333624285,,Issue type selection.,Issue type selection.
324,image,Dolozhee — step 3,1333624398,,Filling corresponding fields.,Filling corresponding fields.
325,image,Dolozhee — step 4,1333624444,,Final report wizard page.,Final report wizard page.
326,image,Dolozhee — step 5 (extra),1333624535,,Resulting issue. Note the extra debug/system info for the Bug type.,Resulting issue. Note the extra debug/system info for the Bug type.
327,story,Development digest #20,1333637749,devel-digest-20,"Last couple of weeks we mostly fixed small issues and implemented not-so-big feature requests here or there. There are some changes worth emphasizing, though.

First, [144: Azoth Xoox], our XMPP protocol implementation, now properly caches information about clients' capabilities and doesn't rerequest vCards when they surely haven't been changed. This actually allows conserving bandwidth quite a lot.

Second, tabs unclosing system moved to a separate plugin, [311: TabSessManager], and became global. Support for this system already existed implicitly in Poshuku for some time, and now Azoth also supports it, which means that one can easily unclose a just closed chat. And, well, the <em>Ctrl+Shift+T</em> shortcut is working again!

Third, settings for theme and theme variant in [143: Azoth] settings are now separated. So, variants only relevant to currently selected theme are shown in a separate combobox. This allows themes to be much more manageable then it were before.

[145: Azoth Acetamide], the IRC implementation, also got a lot of improvements and fixes for protocol part as well as behavioral changes.

A bit more full list of changes looks like this:
<ul>
<li>[143: Azoth]: support tab session management.</li>
<li>Azoth: theme and theme variant settings are now separated.</li>
<li>Azoth: allow one to reorder bookmarks.</li>
<li>[145: Azoth Acetamide]: fixed answer on Spy commands.</li>
<li>Azoth Acetamide: disconnect on socket error.</li>
<li>Azoth Acetamide: proper WHO request after channel joining.</li>
<li>Azoth Acetamide: support for server password in bookmarks.</li>
<li>Azoth Acetamide: proper SSL errors handling.</li>
<li>[196: Azoth AdiumStyles]: parse PLists for more info.</li>
<li>[144: Azoth Xoox]: fixed segfault on going offline.</li>
<li>Azoth Xoox: proper gateway login/logout logic.</li>
<li>Azoth Xoox: better caching for disco#info.</li>
<li>Azoth Xoox: proper support for vcard-update — vCards aren't rerequested in vain any more.</li>
<li>Azoth Xoox: caching for avatars in MUCs.</li>
<li>Azoth Xoox: support refreshing branches in service discovery.</li>
<li>Azoth Xoox: support showing physical addresses in vCards.</li>
<li>Azoth Xoox: fixed several rare segfaults.</li>
<li>[27: Poshuku CleanWeb]: better control for user filters.</li>
<li>Poshuku CleanWeb: support pasting/loading user filters from file.</li>
<li>[311: TabSessManager]: implement a global tabs uncloser.</li>
<li>Core: name/shortcut filter in ShortcutManager widget.</li>
<li>Core: support setting accept-language.</li>
<li>XSD: support for selection event notifications.</li>
<li>Overall: some code fixes thanks to static analysis!</li>
</ul>","Last couple of weeks we mostly fixed small issues and implemented not-so-big feature requests here or there. There are some changes worth emphasizing, though.

First, [144: Azoth Xoox], our XMPP protocol implementation, now properly caches information about clients' capabilities and doesn't rerequest vCards when they surely haven't been changed. This actually allows conserving bandwidth quite a lot.

Second, tabs unclosing system moved to a separate plugin, [311: TabSessManager], and became global. Support for this system already existed implicitly in Poshuku for some time, and now Azoth also supports it, which means that one can easily unclose a just closed chat. And, well, the <em>Ctrl+Shift+T</em> shortcut is working again!

Third, settings for theme and theme variant in [143: Azoth] settings are now separated. So, variants only relevant to currently selected theme are shown in a separate combobox. This allows themes to be much more manageable then it were before.

[145: Azoth Acetamide], the IRC implementation, also got a lot of improvements and fixes for protocol part as well as behavioral changes.

A bit more full list of changes looks like this:
<ul>
<li>[143: Azoth]: support tab session management.</li>
<li>Azoth: theme and theme variant settings are now separated.</li>
<li>Azoth: allow one to reorder bookmarks.</li>
<li>[145: Azoth Acetamide]: fixed answer on Spy commands.</li>
<li>Azoth Acetamide: disconnect on socket error.</li>
<li>Azoth Acetamide: proper WHO request after channel joining.</li>
<li>Azoth Acetamide: support for server password in bookmarks.</li>
<li>Azoth Acetamide: proper SSL errors handling.</li>
<li>[196: Azoth AdiumStyles]: parse PLists for more info.</li>
<li>[144: Azoth Xoox]: fixed segfault on going offline.</li>
<li>Azoth Xoox: proper gateway login/logout logic.</li>
<li>Azoth Xoox: better caching for disco#info.</li>
<li>Azoth Xoox: proper support for vcard-update — vCards aren't rerequested in vain any more.</li>
<li>Azoth Xoox: caching for avatars in MUCs.</li>
<li>Azoth Xoox: support refreshing branches in service discovery.</li>
<li>Azoth Xoox: support showing physical addresses in vCards.</li>
<li>Azoth Xoox: fixed several rare segfaults.</li>
<li>[27: Poshuku CleanWeb]: better control for user filters.</li>
<li>Poshuku CleanWeb: support pasting/loading user filters from file.</li>
<li>[311: TabSessManager]: implement a global tabs uncloser.</li>
<li>Core: name/shortcut filter in ShortcutManager widget.</li>
<li>Core: support setting accept-language.</li>
<li>XSD: support for selection event notifications.</li>
<li>Overall: some code fixes thanks to static analysis!</li>
</ul>"
329,page,XProxy,1334656576,plugins-xproxy,"XProxy allows one to configure proxy servers on a per-host basis.

[img_assist|nid=330|title=XProxy settings|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Support for SOCKS5, HTTP and FTP proxies.</li>
<li>Matching hosts via regexps.</li>
<li>Different proxies for different ports/protocols.</li>
</ul>","XProxy allows one to configure proxy servers on a per-host basis.

[img_assist|nid=330|title=XProxy settings|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Support for SOCKS5, HTTP and FTP proxies.</li>
<li>Matching hosts via regexps.</li>
<li>Different proxies for different ports/protocols.</li>
</ul>"
330,image,XProxy,1334656494,,"",""
332,image,Otlozhu,1334657297,,"",""
333,page,Otlozhu,1334657399,plugins-otlozhu,"Otlozhu is a <a href=""http://en.wikipedia.org/wiki/Getting_Things_Done"">GTD</a>-inspired TODO manager for LeechCraft.

[img_assist|nid=332|title=Otlozhu|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Clean and simple interface in GTD style.</li>
<li>Tagging todo items.</li>
<li>Optional due dates for items, with notifications.</li>
<li>Support for iCal import/export.</li>
</ul>","Otlozhu is a <a href=""http://en.wikipedia.org/wiki/Getting_Things_Done"">GTD</a>-inspired TODO manager for LeechCraft.

[img_assist|nid=332|title=Otlozhu|desc=|link=popup|width=440]

<h2>Features</h2>
<ul>
<li>Clean and simple interface in GTD style.</li>
<li>Tagging todo items.</li>
<li>Optional due dates for items, with notifications.</li>
<li>Support for iCal import/export.</li>
</ul>"
335,page,Dolozhee,1387799949,plugins-dolozhee,"Dolozhee is a bug and feature request reporter tool for LeechCraft.

<h2>Features</h2>
<ul>
<li>Anonymous and already-registered user posting.</li>
<li>Support for both bug reports and feature requests.</li>
<li>Support for attaching files like logs or screenshots illustrating the problem (works well with [8: AnHero]).</li>
<li>A clean and simple wizard for submitting reports.</li>
</ul>

[img_assist|nid=322|title=Selecting user|desc=|link=popup|width=440]
[img_assist|nid=323|title=Selecting report type|desc=|link=popup|width=440]
[img_assist|nid=324|title=Filling the report|desc=|link=popup|width=440]
[img_assist|nid=325|title=Submitting|desc=|link=popup|width=440]","Dolozhee is a bug and feature request reporter tool for LeechCraft.

<h2>Features</h2>
<ul>
<li>Anonymous and already-registered user posting.</li>
<li>Support for both bug reports and feature requests.</li>
<li>Support for attaching files like logs or screenshots illustrating the problem (works well with [8: AnHero]).</li>
<li>A clean and simple wizard for submitting reports.</li>
</ul>

[img_assist|nid=322|title=Selecting user|desc=|link=popup|width=440]
[img_assist|nid=323|title=Selecting report type|desc=|link=popup|width=440]
[img_assist|nid=324|title=Filling the report|desc=|link=popup|width=440]
[img_assist|nid=325|title=Submitting|desc=|link=popup|width=440]"
337,story,Development digest #21,1334660664,devel-digest-21,"Since previous development digest we've introduced 4 new plugins, and we feel like it's just the time to make another one digest.
[img_assist|nid=332|title=Otlozhu|desc=|link=popup|align=right|width=220]
One of the new plugins is [333: Otlozhu] — a GTD-inspired TODO manager. It won't be an all-in-one PIM/organizer, so don't expect schedules, events, meetings, address books and stuff like that in it. It's point is to be a simple a clean way of keeping tracks of things you've got to do. Like GTD suggests, the less time you spend organizing your organizer, the better. For now it supports tagging items, (optional!) due dates, notifications, percentage of completeness, sorting and filtering by tags.
[img_assist|nid=330|title=XProxy|desc=|link=popup|align=right|width=220]
Other plugin is [329: XProxy] which is an advanced proxy configurator, allowing to configure proxies on a per-host and per-port basis.

Two other plugins are rather hidden most of the time. First is [335: Dolozhee] which is a bug reporting and feature requesting tool — basically, a client for our issue tracker. The other one is KBCraft which supports keeping track of what keyboard layout is active for which tab, so that different tabs can have different keyboard layouts.

Among other changes:
<ul>
<li>Core: filtering modules in plugin manager widget.</li>
<li>[210: Advanced Notifications]: support for Organizer event type.</li>
<li>Advanced Notifications: possibly fixed fonts generation (once more).</li>
<li>[7: Aggregator]: added Mark All As Read action.</li>
<li>Aggregator: proper indexes are expanded on feed addition, fixes <a href=""http://dev.leechcraft.org/issues/211"">#211</a>.</li>
<li>[12: Auscrie]: support for making overlay and whole desktop screenshots.</li>
<li>Auscrie: fixed dump.bitcheese.net uploader.</li>
<li>Auscrie: support hiding the dialog.</li>
<li>[143: Azoth]: plugins now support split build.</li>
<li>Azoth: hardlimit for 4 variant icons, fixes <a href=""http://dev.leechcraft.org/issues/440"">#440</a>.</li>
<li>Azoth: client icons are properly sorted by priority.</li>
<li>[145: Azoth Acetamide]: commands 323 and 338 are now supported.</li>
<li>[163: Azoth ChatHistory]: more clear search match highlights.</li>
<li>[144: Azoth Xoox]: support for XEP-0232 parsing/generation.</li>
<li>Azoth Xoox: handling/displaying XEP-0232 info in Service Discovery.</li>
<li>Azoth Xoox: text from muc#roominfo_description is used in SD now.</li>
<li>Azoth Xoox: even more efficient vCard requests.</li>
<li>Azoth Xoox: remember entered JID/password on in-band account reg.</li>
<li>Azoth Xoox: fixed several segfaults.</li>
<li>Azoth Xoox: configurable minimum height of message edit field.</li>
<li>[7: BitTorrent]: torrent icon for items in Summary.</li>
</ul>","Since previous development digest we've introduced 4 new plugins, and we feel like it's just the time to make another one digest.
[img_assist|nid=332|title=Otlozhu|desc=|link=popup|align=right|width=220]
One of the new plugins is [333: Otlozhu] — a GTD-inspired TODO manager. It won't be an all-in-one PIM/organizer, so don't expect schedules, events, meetings, address books and stuff like that in it. It's point is to be a simple a clean way of keeping tracks of things you've got to do. Like GTD suggests, the less time you spend organizing your organizer, the better. For now it supports tagging items, (optional!) due dates, notifications, percentage of completeness, sorting and filtering by tags.
[img_assist|nid=330|title=XProxy|desc=|link=popup|align=right|width=220]
Other plugin is [329: XProxy] which is an advanced proxy configurator, allowing to configure proxies on a per-host and per-port basis.

Two other plugins are rather hidden most of the time. First is [335: Dolozhee] which is a bug reporting and feature requesting tool — basically, a client for our issue tracker. The other one is KBCraft which supports keeping track of what keyboard layout is active for which tab, so that different tabs can have different keyboard layouts.

Among other changes:
<ul>
<li>Core: filtering modules in plugin manager widget.</li>
<li>[210: Advanced Notifications]: support for Organizer event type.</li>
<li>Advanced Notifications: possibly fixed fonts generation (once more).</li>
<li>[7: Aggregator]: added Mark All As Read action.</li>
<li>Aggregator: proper indexes are expanded on feed addition, fixes <a href=""http://dev.leechcraft.org/issues/211"">#211</a>.</li>
<li>[12: Auscrie]: support for making overlay and whole desktop screenshots.</li>
<li>Auscrie: fixed dump.bitcheese.net uploader.</li>
<li>Auscrie: support hiding the dialog.</li>
<li>[143: Azoth]: plugins now support split build.</li>
<li>Azoth: hardlimit for 4 variant icons, fixes <a href=""http://dev.leechcraft.org/issues/440"">#440</a>.</li>
<li>Azoth: client icons are properly sorted by priority.</li>
<li>[145: Azoth Acetamide]: commands 323 and 338 are now supported.</li>
<li>[163: Azoth ChatHistory]: more clear search match highlights.</li>
<li>[144: Azoth Xoox]: support for XEP-0232 parsing/generation.</li>
<li>Azoth Xoox: handling/displaying XEP-0232 info in Service Discovery.</li>
<li>Azoth Xoox: text from muc#roominfo_description is used in SD now.</li>
<li>Azoth Xoox: even more efficient vCard requests.</li>
<li>Azoth Xoox: remember entered JID/password on in-band account reg.</li>
<li>Azoth Xoox: fixed several segfaults.</li>
<li>Azoth Xoox: configurable minimum height of message edit field.</li>
<li>[7: BitTorrent]: torrent icon for items in Summary.</li>
</ul>"
339,page,Licensing,1366452060,licensing,"LeechCraft is licensed under the <a href=""http://www.boost.org/LICENSE_1_0.txt"">Boost Software License version 1.0</a>.

<!--
<h2>By-files breakdown</h2>

<pre>
Files: src/* tools/*
Copyright: 2006-2013 Georg Rudoy <0xd34df00d@gmail.com>
 2010-2012 Oleg Linkin
 2011 Yury Erik Potapov
 2011-2012 Minh Ngo
 2011 ForNeVeR
 2011 Andrey Batyiev
 2011 Alexander Konovalov
 2010 Vadim Misbakh-Soloviev
 2011-2012 Eugene Mamin
License: GPL-3+

Files: src/cmake/*
 src/plugins/laure/cmake/*
 src/plugins/lmp/cmake/*
 src/plugins/bittorrent/cmake/*
 src/plugins/azoth/cmake/*
 src/plugins/azoth/plugins/otroid/cmake/*
 src/plugins/azoth/plugins/xoox/cmake/*
 src/plugins/azoth/plugins/zheet/cmake/*
 src/plugins/popishu/cmake/*
 src/plugins/liznoo/cmake/*
 src/plugins/poshuku/plugins/onlinebookmarks/plugins/readitlater/cmake/*
 src/plugins/qrosp/cmake/*
 src/plugins/azoth/plugins/astrality/cmake/*
Copyright: 2009 Brad Hards <bradh@kde.org>
 2009 Michele Caini, <skypjack@gmail.com>
 2007 Pau Garcia i Quiles <pgquiles@elpauer.org>
 2008 Georg Rudoy <0xd34df00d@gmail.com>
 2008 Tanguy Krotoff <tkrotoff@gmail.com>
 2011 Minh Ngo <nlminhtl@gmail.com>
 2008 Matthias Kretz <kretz@kde.org>
 2008 Voker57 <voker57@gmail.com>
 2011 Eugene Mamin aka DZhon <TheDZhon@gmail.com>
 2006 Alessandro Praduroux <pradu@pradu.it>
 2007 Urs Wolfer <uwolfer@kde.org>
 2006 Andreas Schneider <mail@cynapses.org>
 2006 Michael Larouche <michael.larouche@kdemail.net>
 2007 Christian Ehrlicher <ch.ehrlicher@gmx.de>
 2008 Matt Rogers <mattr@kde.org>
 2008 Michael Zanetti <michael_zanetti@gnx.net>
 2006 David Faure <faure@kde.org>
 2007 Will Stephenson <wstephenson@kde.org>
 2007 Thomas Moenicke <thomas.moenicke@kdemail.net>
 2008 Allen Winter <winter@kde.org>
 2009 Andre Moreira Magalhaes <andrunko@gmail.com>
 2010 Casper van Donderen <casper.vandonderen@basyskom.de>
License: BSD-3-clause

Files: src/plugins/qrosp/third-party/*
Copyright: 2011 Nokia Corporation and/or its subsidiary(-ies)
License: GPL-3 or LGPL-2.1
 GNU Lesser General Public License Usage
 This file may be used under the terms of the GNU Lesser General Public
 License version 2.1 as published by the Free Software Foundation and
 appearing in the file LICENSE.LGPL included in the packaging of this
 file. Please review the following information to ensure the GNU Lesser
 General Public License version 2.1 requirements will be met:
 http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 .
 In addition, as a special exception, Nokia gives you certain additional
 rights. These rights are described in the Nokia Qt LGPL Exception
 version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 .
 GNU General Public License Usage
 Alternatively, this file may be used under the terms of the GNU General
 Public License version 3.0 as published by the Free Software Foundation
 and appearing in the file LICENSE.GPL included in the packaging of this
 file. Please review the following information to ensure the GNU General
 Public License version 3.0 requirements will be met:
 http://www.gnu.org/copyleft/gpl.html.
 .
 Other Usage
 Alternatively, these files may be used in accordance with the terms and
 conditions contained in a signed written agreement between you and Nokia.

Files: src/3dparty/*
Copyright: 2010 Qxt Foundation <foundation@libqxt.org> (http://libqxt.org)
License: LGPL-2.1 or CPL-1
 This library is free software; you can redistribute it and/or modify it
 under the terms of the Common Public License, version 1.0, as published
 by IBM, and/or under the terms of the GNU Lesser General Public License,
 version 2.1, as published by the Free Software Foundation.
 .
 This file is provided ""AS IS"", without WARRANTIES OR CONDITIONS OF ANY
 KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY
 WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR
 FITNESS FOR A PARTICULAR PURPOSE.
 .
 You should have received a copy of the CPL and the LGPL along with this
 file. See the LICENSE file and the cpl1.0.txt/lgpl-2.1.txt files
 included with the source distribution for more information.
 If you did not receive a copy of the licenses, contact the Qxt Foundation.
 .
 On Debian systems, the complete text of the GNU Lesser General
 Public License can be found in `/usr/share/common-licenses/LGPL-2.1'.

Files: src/plugins/azoth/plugins/autoidler/3dparty/*
Copyright: 2003 Justin Karneges
 2003 Tarkvara Design Inc.
License: LGPL-2.1+

Files: src/plugins/eiskaltdcpp/*
Copyright: 2009-2010 Andrey Karlov <dein.negativ@gmail.com>
License: GPL-3+ with OpenSSL exception
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 3 of the License, or (at your option) any later
 version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-3'.
 .
 In addition, as a special exception, authors of this program give permission
 to link the code of its release with the OpenSSL project's ""OpenSSL"" library
 (or with modified versions of it that use the same license as the ""OpenSSL""
 library), and distribute the linked executables. You must obey the GNU General
 Public License in all respects for all of the code used other than ""OpenSSL"".
 If you modify this file, you may extend this exception to your version of the
 file, but you are not obligated to do so.  If you do not wish to do so, delete
 this exception statement from your version.

Files: src/plugins/eiskaltdcpp/cmake/*
Copyright: 2006-2009 Kitware, Inc.
 2008-2009 Philip Lowman <philip@yhbt.com>
 2007-2010 Pau Garcia i Quiles <pgquiles@elpauer.org>
 2007 Juha Tuomala <tuju@iki.fi>
 2007 Daniel Gollub <gollub@b1-systems.de>
 2007 Alban Browaeys <prahal@yahoo.com>
 2006 Alexander Neundorf <neundorf@kde.org>
License: BSD-3-clause

Files: src/plugins/eiskaltdcpp/dcpp/*.h
 src/plugins/eiskaltdcpp/dcpp/*.cpp
 src/plugins/eiskaltdcpp/dht/*.h
 src/plugins/eiskaltdcpp/dht/*.cpp
 src/plugins/eiskaltdcpp/extra/upnpc.h
 src/plugins/eiskaltdcpp/extra/upnpc.cpp
 src/plugins/eiskaltdcpp/extra/dyndns.h
 src/plugins/eiskaltdcpp/extra/dyndns.cpp
 src/plugins/eiskaltdcpp/extra/freespace.h
 src/plugins/eiskaltdcpp/extra/freespace.cpp
 src/plugins/eiskaltdcpp/extra/stacktrace.h
Copyright: 2001-2010 Jacek Sieka <arnetheduck@gmail.com>
 2008-2010 Big Muscle (http://strongdc.sf.net)
 1996-2002 Florian Schintke
 2003-2006 RevConnect (http://www.revconnect.com)
 1997 Makoto Matsumoto and Takuji Nishimura <matumoto@math.keio.ac.jp>
 2010 cologic <ne5@parsoma.net>
 2010 ggrundik (http://code.google.com/u/ggrundik/)
 2010 Gennady Proskurin (https://launchpad.net/~gpr)
 2011 Eugene Petrov <dhamp@ya.ru>
License: GPL-2+

Files: src/plugins/eiskaltdcpp/examples/xmms2_audacious2.ru_RU.UTF-8.php
 src/plugins/eiskaltdcpp/examples/commands.ru_RU.UTF-8.php
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/gnome/commands.ru_RU.UTF-8.php
Copyright: 2010 nE0sIghT
 2010 GoTLiuM InSPiRiT <gotlium@gmail.com>
License: GPL-2

Files: src/plugins/eiskaltdcpp/update_geoip
 src/plugins/eiskaltdcpp/examples/amr.en_US.sh
 src/plugins/eiskaltdcpp/examples/mpris_now_playing.en_US.sh
 src/plugins/eiskaltdcpp/examples/audacious.en_US.sh
 src/plugins/eiskaltdcpp/examples/mpc.en_US.sh
 src/plugins/eiskaltdcpp/examples/rhythmbox.en_US.sh
 src/plugins/eiskaltdcpp/examples/qmmp.ru_RU.UTF-8.sh
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/amarok_nowplay/amarok.sh
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/clementine_nowplay/clementine.sh
Copyright: 2010 Uladzimir Bely (WiseLord) <wiselord1983@gmail.com>
 2010 Vovochka404 <vovochka13@gmail.com>
 2011 Mark Lutring
 2011 Boris Pek
 2010 none
License: public-domain
 No license required for any purpose; the work is not subject to copyright
 in any jurisdiction.

Files: src/plugins/eiskaltdcpp/extra/fsusage.c
 src/plugins/eiskaltdcpp/extra/fsusage.h
Copyright: 1991-2006 Free Software Foundation, Inc.
License: GPL-3+

Files: src/plugins/eiskaltdcpp/icons/*
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/icons/*
Copyright: 2010 Uladzimir Bely (WiseLord) <wiselord1983@gmail.com>
 2010 Oxygen icons theme team (see http://www.oxygen-icons.org/)
License: LGPL-3

Files: src/plugins/eiskaltdcpp/eiskaltdcpp-qt/icons/appl/faenza/*
Copyright: 2010-2011 Matthieu James (Tiheum) <matthieu.james@gmail.com>
License: GPL-3

Files: src/plugins/eiskaltdcpp/emoticons/*
Copyright: 2010 ApexDC++ Project Team (http://www.apexdc.net/)
 2010 FlylinkDC++ Project Team (http://code.google.com/p/flylinkdc/)
 1996-2010 The KDE SC project (http://www.kde.org)
License: GPL-2

Files: src/plugins/eiskaltdcpp/emoticons/default/*
Copyright: 1998-2009 Hylke Bons <hylkebons@gmail.com>
License: GPL-2+

Files: src/plugins/eiskaltdcpp/eiskaltdcpp-qt/src/FlowLayout.cpp
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/src/FlowLayout.h
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/src/qtsingleapp/*
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/tic-tac-toe/*
Copyright: 2010 Nokia Corporation and/or its subsidiary(-ies).
License: GPL-3 or LGPL-2.1 or Qt-Commercial-License
 Commercial Usage
 Licensees holding valid Qt Commercial licenses may use this file in
 accordance with the Qt Commercial License Agreement provided with the
 Software or, alternatively, in accordance with the terms contained in
 a written agreement between you and Nokia.
 .
 GNU Lesser General Public License Usage
 Alternatively, this file may be used under the terms of the GNU Lesser
 General Public License version 2.1 as published by the Free Software
 Foundation and appearing in the file LICENSE.LGPL included in the
 packaging of this file.  Please review the following information to
 ensure the GNU Lesser General Public License version 2.1 requirements
 will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 .
 In addition, as a special exception, Nokia gives you certain additional
 rights.  These rights are described in the Nokia Qt LGPL Exception
 version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 .
 GNU General Public License Usage
 Alternatively, this file may be used under the terms of the GNU
 General Public License version 3.0 as published by the Free Software
 Foundation and appearing in the file LICENSE.GPL included in the
 packaging of this file.  Please review the following information to
 ensure the GNU General Public License version 3.0 requirements will be
 met: http://www.gnu.org/copyleft/gpl.html.
 .
 If you have questions regarding the use of these files, please contact
 Nokia at <qt-info@nokia.com>.

Files: src/plugins/eiskaltdcpp/miniupnpc/*
Copyright: 1991, 1993 The Regents of the University of California
 2005-2010 Thomas Bernard (http://miniupnp.free.fr/)
License: BSD-3-clause

Files: src/plugins/azoth/share/azoth/iconsets/contactlist/oxygen/*
Copyright: 2007 Oxygen icons theme team (see http://www.oxygen-icons.org/)
License: LGPL-3

Files: src/plugins/azoth/plugins/adiumstyles/share/azoth/styles/adium/*/Contents/Resources/*.png
 src/plugins/azoth/plugins/adiumstyles/share/azoth/styles/adium/*/Contents/Resources/*/*.png
Copyright: 2001-2009 The Kopete Developers <kopete-devel@kde.org>
License: GPL-2+

Files: src/plugins/azoth/plugins/modnok/lc_azoth_modnok_latexconvert.sh
Copyright: 2004 Andreas Reigber <anderl@nought.de>
License: GPL-3+

Files: src/plugins/azoth/plugins/rosenthal/hunspell/*
Copyright: 2000 Bjoern Jacke <bjoern@j3e.de>
 2002 Kevin B. Hendricks
License: LGPL-2.1

Files: qxmpp/*
Copyright: 2008-2011 The QXmpp developers (http://code.google.com/p/qxmpp)
 2008-2011 Georg Rudoy <0xd34df00d@gmail.com>
License: LGPL-2.1+

Files: debian/*
Copyright: 2011-2012 Boris Pek <tehnick-8@mail.ru>
License: GPL-2+

License: GPL-2
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 2 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-2'.

License: GPL-2+
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 2 of the License, or (at your option) any later
 version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-2'.

License: GPL-3
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 3 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-3'.

License: GPL-3+
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 3 of the License, or (at your option) any later
 version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-3'.

License: LGPL-2.1
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation, either version 2.1 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General Public License
 can be found in `/usr/share/common-licenses/LGPL-2.1'.

License: LGPL-2.1+
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation, either version 2.1 of the License, or (at your option)
 any later version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General Public License
 can be found in `/usr/share/common-licenses/LGPL-2.1'.

License: LGPL-3
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation, either version 3 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General Public License
 can be found in `/usr/share/common-licenses/LGPL-3'.

License: BSD-3-clause
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.
 .
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
</pre>-->","LeechCraft is licensed under the <a href=""http://www.boost.org/LICENSE_1_0.txt"">Boost Software License version 1.0</a>.

<!--
<h2>By-files breakdown</h2>

<pre>
Files: src/* tools/*
Copyright: 2006-2013 Georg Rudoy <0xd34df00d@gmail.com>
 2010-2012 Oleg Linkin
 2011 Yury Erik Potapov
 2011-2012 Minh Ngo
 2011 ForNeVeR
 2011 Andrey Batyiev
 2011 Alexander Konovalov
 2010 Vadim Misbakh-Soloviev
 2011-2012 Eugene Mamin
License: GPL-3+

Files: src/cmake/*
 src/plugins/laure/cmake/*
 src/plugins/lmp/cmake/*
 src/plugins/bittorrent/cmake/*
 src/plugins/azoth/cmake/*
 src/plugins/azoth/plugins/otroid/cmake/*
 src/plugins/azoth/plugins/xoox/cmake/*
 src/plugins/azoth/plugins/zheet/cmake/*
 src/plugins/popishu/cmake/*
 src/plugins/liznoo/cmake/*
 src/plugins/poshuku/plugins/onlinebookmarks/plugins/readitlater/cmake/*
 src/plugins/qrosp/cmake/*
 src/plugins/azoth/plugins/astrality/cmake/*
Copyright: 2009 Brad Hards <bradh@kde.org>
 2009 Michele Caini, <skypjack@gmail.com>
 2007 Pau Garcia i Quiles <pgquiles@elpauer.org>
 2008 Georg Rudoy <0xd34df00d@gmail.com>
 2008 Tanguy Krotoff <tkrotoff@gmail.com>
 2011 Minh Ngo <nlminhtl@gmail.com>
 2008 Matthias Kretz <kretz@kde.org>
 2008 Voker57 <voker57@gmail.com>
 2011 Eugene Mamin aka DZhon <TheDZhon@gmail.com>
 2006 Alessandro Praduroux <pradu@pradu.it>
 2007 Urs Wolfer <uwolfer@kde.org>
 2006 Andreas Schneider <mail@cynapses.org>
 2006 Michael Larouche <michael.larouche@kdemail.net>
 2007 Christian Ehrlicher <ch.ehrlicher@gmx.de>
 2008 Matt Rogers <mattr@kde.org>
 2008 Michael Zanetti <michael_zanetti@gnx.net>
 2006 David Faure <faure@kde.org>
 2007 Will Stephenson <wstephenson@kde.org>
 2007 Thomas Moenicke <thomas.moenicke@kdemail.net>
 2008 Allen Winter <winter@kde.org>
 2009 Andre Moreira Magalhaes <andrunko@gmail.com>
 2010 Casper van Donderen <casper.vandonderen@basyskom.de>
License: BSD-3-clause

Files: src/plugins/qrosp/third-party/*
Copyright: 2011 Nokia Corporation and/or its subsidiary(-ies)
License: GPL-3 or LGPL-2.1
 GNU Lesser General Public License Usage
 This file may be used under the terms of the GNU Lesser General Public
 License version 2.1 as published by the Free Software Foundation and
 appearing in the file LICENSE.LGPL included in the packaging of this
 file. Please review the following information to ensure the GNU Lesser
 General Public License version 2.1 requirements will be met:
 http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 .
 In addition, as a special exception, Nokia gives you certain additional
 rights. These rights are described in the Nokia Qt LGPL Exception
 version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 .
 GNU General Public License Usage
 Alternatively, this file may be used under the terms of the GNU General
 Public License version 3.0 as published by the Free Software Foundation
 and appearing in the file LICENSE.GPL included in the packaging of this
 file. Please review the following information to ensure the GNU General
 Public License version 3.0 requirements will be met:
 http://www.gnu.org/copyleft/gpl.html.
 .
 Other Usage
 Alternatively, these files may be used in accordance with the terms and
 conditions contained in a signed written agreement between you and Nokia.

Files: src/3dparty/*
Copyright: 2010 Qxt Foundation <foundation@libqxt.org> (http://libqxt.org)
License: LGPL-2.1 or CPL-1
 This library is free software; you can redistribute it and/or modify it
 under the terms of the Common Public License, version 1.0, as published
 by IBM, and/or under the terms of the GNU Lesser General Public License,
 version 2.1, as published by the Free Software Foundation.
 .
 This file is provided ""AS IS"", without WARRANTIES OR CONDITIONS OF ANY
 KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY
 WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR
 FITNESS FOR A PARTICULAR PURPOSE.
 .
 You should have received a copy of the CPL and the LGPL along with this
 file. See the LICENSE file and the cpl1.0.txt/lgpl-2.1.txt files
 included with the source distribution for more information.
 If you did not receive a copy of the licenses, contact the Qxt Foundation.
 .
 On Debian systems, the complete text of the GNU Lesser General
 Public License can be found in `/usr/share/common-licenses/LGPL-2.1'.

Files: src/plugins/azoth/plugins/autoidler/3dparty/*
Copyright: 2003 Justin Karneges
 2003 Tarkvara Design Inc.
License: LGPL-2.1+

Files: src/plugins/eiskaltdcpp/*
Copyright: 2009-2010 Andrey Karlov <dein.negativ@gmail.com>
License: GPL-3+ with OpenSSL exception
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 3 of the License, or (at your option) any later
 version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-3'.
 .
 In addition, as a special exception, authors of this program give permission
 to link the code of its release with the OpenSSL project's ""OpenSSL"" library
 (or with modified versions of it that use the same license as the ""OpenSSL""
 library), and distribute the linked executables. You must obey the GNU General
 Public License in all respects for all of the code used other than ""OpenSSL"".
 If you modify this file, you may extend this exception to your version of the
 file, but you are not obligated to do so.  If you do not wish to do so, delete
 this exception statement from your version.

Files: src/plugins/eiskaltdcpp/cmake/*
Copyright: 2006-2009 Kitware, Inc.
 2008-2009 Philip Lowman <philip@yhbt.com>
 2007-2010 Pau Garcia i Quiles <pgquiles@elpauer.org>
 2007 Juha Tuomala <tuju@iki.fi>
 2007 Daniel Gollub <gollub@b1-systems.de>
 2007 Alban Browaeys <prahal@yahoo.com>
 2006 Alexander Neundorf <neundorf@kde.org>
License: BSD-3-clause

Files: src/plugins/eiskaltdcpp/dcpp/*.h
 src/plugins/eiskaltdcpp/dcpp/*.cpp
 src/plugins/eiskaltdcpp/dht/*.h
 src/plugins/eiskaltdcpp/dht/*.cpp
 src/plugins/eiskaltdcpp/extra/upnpc.h
 src/plugins/eiskaltdcpp/extra/upnpc.cpp
 src/plugins/eiskaltdcpp/extra/dyndns.h
 src/plugins/eiskaltdcpp/extra/dyndns.cpp
 src/plugins/eiskaltdcpp/extra/freespace.h
 src/plugins/eiskaltdcpp/extra/freespace.cpp
 src/plugins/eiskaltdcpp/extra/stacktrace.h
Copyright: 2001-2010 Jacek Sieka <arnetheduck@gmail.com>
 2008-2010 Big Muscle (http://strongdc.sf.net)
 1996-2002 Florian Schintke
 2003-2006 RevConnect (http://www.revconnect.com)
 1997 Makoto Matsumoto and Takuji Nishimura <matumoto@math.keio.ac.jp>
 2010 cologic <ne5@parsoma.net>
 2010 ggrundik (http://code.google.com/u/ggrundik/)
 2010 Gennady Proskurin (https://launchpad.net/~gpr)
 2011 Eugene Petrov <dhamp@ya.ru>
License: GPL-2+

Files: src/plugins/eiskaltdcpp/examples/xmms2_audacious2.ru_RU.UTF-8.php
 src/plugins/eiskaltdcpp/examples/commands.ru_RU.UTF-8.php
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/gnome/commands.ru_RU.UTF-8.php
Copyright: 2010 nE0sIghT
 2010 GoTLiuM InSPiRiT <gotlium@gmail.com>
License: GPL-2

Files: src/plugins/eiskaltdcpp/update_geoip
 src/plugins/eiskaltdcpp/examples/amr.en_US.sh
 src/plugins/eiskaltdcpp/examples/mpris_now_playing.en_US.sh
 src/plugins/eiskaltdcpp/examples/audacious.en_US.sh
 src/plugins/eiskaltdcpp/examples/mpc.en_US.sh
 src/plugins/eiskaltdcpp/examples/rhythmbox.en_US.sh
 src/plugins/eiskaltdcpp/examples/qmmp.ru_RU.UTF-8.sh
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/amarok_nowplay/amarok.sh
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/clementine_nowplay/clementine.sh
Copyright: 2010 Uladzimir Bely (WiseLord) <wiselord1983@gmail.com>
 2010 Vovochka404 <vovochka13@gmail.com>
 2011 Mark Lutring
 2011 Boris Pek
 2010 none
License: public-domain
 No license required for any purpose; the work is not subject to copyright
 in any jurisdiction.

Files: src/plugins/eiskaltdcpp/extra/fsusage.c
 src/plugins/eiskaltdcpp/extra/fsusage.h
Copyright: 1991-2006 Free Software Foundation, Inc.
License: GPL-3+

Files: src/plugins/eiskaltdcpp/icons/*
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/icons/*
Copyright: 2010 Uladzimir Bely (WiseLord) <wiselord1983@gmail.com>
 2010 Oxygen icons theme team (see http://www.oxygen-icons.org/)
License: LGPL-3

Files: src/plugins/eiskaltdcpp/eiskaltdcpp-qt/icons/appl/faenza/*
Copyright: 2010-2011 Matthieu James (Tiheum) <matthieu.james@gmail.com>
License: GPL-3

Files: src/plugins/eiskaltdcpp/emoticons/*
Copyright: 2010 ApexDC++ Project Team (http://www.apexdc.net/)
 2010 FlylinkDC++ Project Team (http://code.google.com/p/flylinkdc/)
 1996-2010 The KDE SC project (http://www.kde.org)
License: GPL-2

Files: src/plugins/eiskaltdcpp/emoticons/default/*
Copyright: 1998-2009 Hylke Bons <hylkebons@gmail.com>
License: GPL-2+

Files: src/plugins/eiskaltdcpp/eiskaltdcpp-qt/src/FlowLayout.cpp
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/src/FlowLayout.h
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/src/qtsingleapp/*
 src/plugins/eiskaltdcpp/eiskaltdcpp-qt/qtscripts/tic-tac-toe/*
Copyright: 2010 Nokia Corporation and/or its subsidiary(-ies).
License: GPL-3 or LGPL-2.1 or Qt-Commercial-License
 Commercial Usage
 Licensees holding valid Qt Commercial licenses may use this file in
 accordance with the Qt Commercial License Agreement provided with the
 Software or, alternatively, in accordance with the terms contained in
 a written agreement between you and Nokia.
 .
 GNU Lesser General Public License Usage
 Alternatively, this file may be used under the terms of the GNU Lesser
 General Public License version 2.1 as published by the Free Software
 Foundation and appearing in the file LICENSE.LGPL included in the
 packaging of this file.  Please review the following information to
 ensure the GNU Lesser General Public License version 2.1 requirements
 will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 .
 In addition, as a special exception, Nokia gives you certain additional
 rights.  These rights are described in the Nokia Qt LGPL Exception
 version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 .
 GNU General Public License Usage
 Alternatively, this file may be used under the terms of the GNU
 General Public License version 3.0 as published by the Free Software
 Foundation and appearing in the file LICENSE.GPL included in the
 packaging of this file.  Please review the following information to
 ensure the GNU General Public License version 3.0 requirements will be
 met: http://www.gnu.org/copyleft/gpl.html.
 .
 If you have questions regarding the use of these files, please contact
 Nokia at <qt-info@nokia.com>.

Files: src/plugins/eiskaltdcpp/miniupnpc/*
Copyright: 1991, 1993 The Regents of the University of California
 2005-2010 Thomas Bernard (http://miniupnp.free.fr/)
License: BSD-3-clause

Files: src/plugins/azoth/share/azoth/iconsets/contactlist/oxygen/*
Copyright: 2007 Oxygen icons theme team (see http://www.oxygen-icons.org/)
License: LGPL-3

Files: src/plugins/azoth/plugins/adiumstyles/share/azoth/styles/adium/*/Contents/Resources/*.png
 src/plugins/azoth/plugins/adiumstyles/share/azoth/styles/adium/*/Contents/Resources/*/*.png
Copyright: 2001-2009 The Kopete Developers <kopete-devel@kde.org>
License: GPL-2+

Files: src/plugins/azoth/plugins/modnok/lc_azoth_modnok_latexconvert.sh
Copyright: 2004 Andreas Reigber <anderl@nought.de>
License: GPL-3+

Files: src/plugins/azoth/plugins/rosenthal/hunspell/*
Copyright: 2000 Bjoern Jacke <bjoern@j3e.de>
 2002 Kevin B. Hendricks
License: LGPL-2.1

Files: qxmpp/*
Copyright: 2008-2011 The QXmpp developers (http://code.google.com/p/qxmpp)
 2008-2011 Georg Rudoy <0xd34df00d@gmail.com>
License: LGPL-2.1+

Files: debian/*
Copyright: 2011-2012 Boris Pek <tehnick-8@mail.ru>
License: GPL-2+

License: GPL-2
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 2 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-2'.

License: GPL-2+
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 2 of the License, or (at your option) any later
 version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-2'.

License: GPL-3
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 3 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-3'.

License: GPL-3+
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation, either version 3 of the License, or (at your option) any later
 version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU General Public License
 can be found in `/usr/share/common-licenses/GPL-3'.

License: LGPL-2.1
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation, either version 2.1 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General Public License
 can be found in `/usr/share/common-licenses/LGPL-2.1'.

License: LGPL-2.1+
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation, either version 2.1 of the License, or (at your option)
 any later version.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General Public License
 can be found in `/usr/share/common-licenses/LGPL-2.1'.

License: LGPL-3
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the Free
 Software Foundation, either version 3 of the License.
 .
 This program is distributed in the hope that it will be useful, but WITHOUT ANY
 WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 PARTICULAR PURPOSE. See the GNU General Public License for more details.
 .
 You should have received a copy of the GNU General Public License along with
 this program. If not, see <http://www.gnu.org/licenses/>.
 .
 On Debian systems, the complete text of the GNU Lesser General Public License
 can be found in `/usr/share/common-licenses/LGPL-3'.

License: BSD-3-clause
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.
 .
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
</pre>-->"
340,story,Development digest #22,1335019291,devel-digest-22,"In the last two weeks we mostly fixed things, and the list of fixes is quite big and important.

We've also updated, fixed and revamped [153: LackMan], our package manager, a lot. Its behavior is now much more consistent, and the UI is much more clear and information-rich. And it became much, much faster on updates. And it finally works on Windows!

[143: Azoth], our IM client, now supports loading messages from history into chat window on demand. And Azoth's history storage module, [163: ChatHistory], finally became able to perform global and per-account searches.

The promised list of fixes as well as improvements follows:
<ul>
<li>Core: store plugin icons on-disk, not in QSettings.</li>
<li>Core: support for searching icons in <code type=""bash"">~/.leechcraft/icons</code>.</li>
<li>Core: optional hiding of the tray icon.</li>
<li>Core: much nicer settings tab.</li>
<li>Core: saner tab recovery policy.</li>
<li>Util: better SysInfo data.</li>
<li>XSD: fixed segfault when adding LackMan packages.</li>
<li>XSD: fixed first start segfault on Windows.</li>
<li>[143: Azoth]: history scrollback.</li>
<li>Azoth: case-insensitive highlight.</li>
<li>Azoth: filter by entry ID in console.</li>
<li>Azoth: console now shows timings.</li>
<li>Azoth: changed alternative nick semantics.</li>
<li>Azoth: fixed occasional segfault when hiding offline users.</li>
<li>[196: Azoth AdiumStyles]: minor theme compatibility issues fixed, themes like Pushpin are now working.</li>
<li>[163: Azoth ChatHistory]: support per-account and global searching.</li>
<li>Azoth Rosenthal: fixed context menu corrections.</li>
<li>[144: Azoth Xoox]: advertise XEP-0232 info about self.</li>
<li>Azoth Xoox: store passwords for password-protected MUCs.</li>
<li>Azoth Xoox: kludges for Kopete and Jabber.El detection.</li>
<li>Azoth Xoox: self-offline handling fixes.</li>
<li>Azoth Xoox: a bunch of other small fixes.</li>
<li>Azoth Xoox: caps generation fixes.</li>
<li>Azoth Xoox: fixed a couple of logical leaks.</li>
<li>[10: BitTorrent]: compatibility with libtorrent 0.16.</li>
<li>[14: DBusManager]: disable notifications by default.</li>
<li>[335: Dolozhee]: bug link now works.</li>
<li>Dolozhee: proper completion method for bug page.</li>
<li>Dolozhee: passwords are saved now.</li>
<li>[153: LackMan]: revamped UI.</li>
<li>LackMan: lots of Storage fixes, particularly on package removal.</li>
<li>LackMan: async Storage, speeds things up by two orders of magnitude.</li>
<li>LackMan: don't request all images on package retrieval.</li>
<li>LackMan: keep package if it's removed from repo but is installed.</li>
<li>LackMan: fixed Windows issues.</li>
<li>LackMan: notifications about number of new/updated packages.</li>
<li>[333: Otlozhu]: added iCal import/export.</li>
<li>[311: TabSessManager]: remove duplicate unclose actions.</li>
<li>TabSessManager: elided text for actions.</li>
</ul>","In the last two weeks we mostly fixed things, and the list of fixes is quite big and important.

We've also updated, fixed and revamped [153: LackMan], our package manager, a lot. Its behavior is now much more consistent, and the UI is much more clear and information-rich. And it became much, much faster on updates. And it finally works on Windows!

[143: Azoth], our IM client, now supports loading messages from history into chat window on demand. And Azoth's history storage module, [163: ChatHistory], finally became able to perform global and per-account searches.

The promised list of fixes as well as improvements follows:
<ul>
<li>Core: store plugin icons on-disk, not in QSettings.</li>
<li>Core: support for searching icons in <code type=""bash"">~/.leechcraft/icons</code>.</li>
<li>Core: optional hiding of the tray icon.</li>
<li>Core: much nicer settings tab.</li>
<li>Core: saner tab recovery policy.</li>
<li>Util: better SysInfo data.</li>
<li>XSD: fixed segfault when adding LackMan packages.</li>
<li>XSD: fixed first start segfault on Windows.</li>
<li>[143: Azoth]: history scrollback.</li>
<li>Azoth: case-insensitive highlight.</li>
<li>Azoth: filter by entry ID in console.</li>
<li>Azoth: console now shows timings.</li>
<li>Azoth: changed alternative nick semantics.</li>
<li>Azoth: fixed occasional segfault when hiding offline users.</li>
<li>[196: Azoth AdiumStyles]: minor theme compatibility issues fixed, themes like Pushpin are now working.</li>
<li>[163: Azoth ChatHistory]: support per-account and global searching.</li>
<li>Azoth Rosenthal: fixed context menu corrections.</li>
<li>[144: Azoth Xoox]: advertise XEP-0232 info about self.</li>
<li>Azoth Xoox: store passwords for password-protected MUCs.</li>
<li>Azoth Xoox: kludges for Kopete and Jabber.El detection.</li>
<li>Azoth Xoox: self-offline handling fixes.</li>
<li>Azoth Xoox: a bunch of other small fixes.</li>
<li>Azoth Xoox: caps generation fixes.</li>
<li>Azoth Xoox: fixed a couple of logical leaks.</li>
<li>[10: BitTorrent]: compatibility with libtorrent 0.16.</li>
<li>[14: DBusManager]: disable notifications by default.</li>
<li>[335: Dolozhee]: bug link now works.</li>
<li>Dolozhee: proper completion method for bug page.</li>
<li>Dolozhee: passwords are saved now.</li>
<li>[153: LackMan]: revamped UI.</li>
<li>LackMan: lots of Storage fixes, particularly on package removal.</li>
<li>LackMan: async Storage, speeds things up by two orders of magnitude.</li>
<li>LackMan: don't request all images on package retrieval.</li>
<li>LackMan: keep package if it's removed from repo but is installed.</li>
<li>LackMan: fixed Windows issues.</li>
<li>LackMan: notifications about number of new/updated packages.</li>
<li>[333: Otlozhu]: added iCal import/export.</li>
<li>[311: TabSessManager]: remove duplicate unclose actions.</li>
<li>TabSessManager: elided text for actions.</li>
</ul>"
342,story,LeechCraft 0.5.65 is released!,1335031519,leechcraft-0.5.65-is-released,"Today LeechCraft 0.5.65 «Dreams Without Courage» is released!

This release features some new plugins:
<ul>
<li>[335: Dolozhee] — bug reporting and feature requesting tool for LeechCraft.</li>
<li>KBCraft — keyboard layout manager, allowing to keep separate layouts for each plugin or even tab.</li>
<li>[333: Otlozhu] — a simple GTD-inspired TODO manager.</li>
<li>[329: XProxy] — an advanced proxy configurator.</li>
</ul>

Among significant changes and fixes in already existing plugins:
<ul>
<li>[153: LackMan], our package manager, got a major UI update and general overhaul. It's much faster now, and it also works on Windows!</li>
<li>Tab unclosing system has been implemented globally in the [311: TabSessManager] plugin (and [143: Azoth] supports it!).</li>
<li>[144: Azoth Xoox], the XMPP protocol implementation, now properly caches entity capabilities, vCards and other similar information. This allows to reduce considerably the amount of used bandwidth.</li>
<li>As always, there are lots of fixes and improvements in [145: Azoth Acetamide], our IRC protocol implementation.</li>
<li>Choosing chat window style and its variant is much more handy now — only variants relevant to the selected theme are shown.</li>
<li>Full support for XEP-0232 in Azoth Xoox.</li>
<li>Configurable minimal message editor height in Azoth.</li>
<li>Improved Auscrie — support for full desktop and overlay screenshots as well as fixed dump.bitcheese.net uploader.</li>
</ul>

As always, you can read the corresponding development digests: [327: #20], [337: #21], [340: #22] if you need more information about changes.

Packages for supported distros and OSes will be available soon. Source archive is already available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.65/leechcraft-0.5.65.tar.xz/download"">at SourceForge</a>.

Stay tuned! I hope we'd roll out something interesting for 0.5.70 in a month or even less!","Today LeechCraft 0.5.65 «Dreams Without Courage» is released!

This release features some new plugins:
<ul>
<li>[335: Dolozhee] — bug reporting and feature requesting tool for LeechCraft.</li>
<li>KBCraft — keyboard layout manager, allowing to keep separate layouts for each plugin or even tab.</li>
<li>[333: Otlozhu] — a simple GTD-inspired TODO manager.</li>
<li>[329: XProxy] — an advanced proxy configurator.</li>
</ul>

Among significant changes and fixes in already existing plugins:
<ul>
<li>[153: LackMan], our package manager, got a major UI update and general overhaul. It's much faster now, and it also works on Windows!</li>
<li>Tab unclosing system has been implemented globally in the [311: TabSessManager] plugin (and [143: Azoth] supports it!).</li>
<li>[144: Azoth Xoox], the XMPP protocol implementation, now properly caches entity capabilities, vCards and other similar information. This allows to reduce considerably the amount of used bandwidth.</li>
<li>As always, there are lots of fixes and improvements in [145: Azoth Acetamide], our IRC protocol implementation.</li>
<li>Choosing chat window style and its variant is much more handy now — only variants relevant to the selected theme are shown.</li>
<li>Full support for XEP-0232 in Azoth Xoox.</li>
<li>Configurable minimal message editor height in Azoth.</li>
<li>Improved Auscrie — support for full desktop and overlay screenshots as well as fixed dump.bitcheese.net uploader.</li>
</ul>

As always, you can read the corresponding development digests: [327: #20], [337: #21], [340: #22] if you need more information about changes.

Packages for supported distros and OSes will be available soon. Source archive is already available <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.65/leechcraft-0.5.65.tar.xz/download"">at SourceForge</a>.

Stay tuned! I hope we'd roll out something interesting for 0.5.70 in a month or even less!"
344,page,LastFMScrobble,1341910903,plugins-lastfmscrobble,"LastFMScrobble provides support for the <a href=""http://last.fm"">Last.FM</a> service. For example, it scrobble tracks from other players, requests similar artists (on demand by other players as well), supports fetching album art, etc.

<h3>Features</h3>
<ul>
<li>Scrobbling listened tracks from other players like [20: LMP] to Last.FM.</li>
<li>""Loving"" listened tracks.</li>
<li>Support for requesting artists that are similar to a given artist.</li>
<li>Automatic fetching of album art.</li>
<li>Support for Last.FM radio.</li>
<li>Fetching personalized recommendations.</li>
<li>Fetching recent releases of artists that are in the user's collection.</li>
<li>Fetching artists biography.</li>
<li>Configurable language of the fetched information.</li>
</ul>","LastFMScrobble provides support for the <a href=""http://last.fm"">Last.FM</a> service. For example, it scrobble tracks from other players, requests similar artists (on demand by other players as well), supports fetching album art, etc.

<h3>Features</h3>
<ul>
<li>Scrobbling listened tracks from other players like [20: LMP] to Last.FM.</li>
<li>""Loving"" listened tracks.</li>
<li>Support for requesting artists that are similar to a given artist.</li>
<li>Automatic fetching of album art.</li>
<li>Support for Last.FM radio.</li>
<li>Fetching personalized recommendations.</li>
<li>Fetching recent releases of artists that are in the user's collection.</li>
<li>Fetching artists biography.</li>
<li>Configurable language of the fetched information.</li>
</ul>"
346,story,Development digest #23,1337954004,devel-digest-23,"We have a new major plugin since the 0.5.65 release: the all-new rewritten [20: LMP]! It's now a music-only player, still Phonon-based though. It is inspired by players like Amarok and Clementine, and is built around collections. For now, it has only basic functionality like playback, playlists, collection, basic scrobbling to services like Last.FM and a couple of others.

Directory and clipboard watching was moved out of the Core to a separate new plugin, Nacheku, so make sure to install it if you feel like missing this functionality.

But there are some other changes as well, for example:
<ul>
<li>Core: handle back/forward mouse buttons on tabs and scroll the tabs accordingly.</li>
<li>Core: always bring to front the main window on tray icon click.</li>
<li>[210: AdvancedNotifications]: fixed QML file for the notification.</li>
<li>AdvancedNotifications: fixed leaking of some objects and views.</li>
<li>[143: Azoth]: don't suggest already existing items in RIEX.</li>
<li>Azoth: handle /kick and /ban commands.</li>
<li>Azoth: fixed avatars cropping.</li>
<li>Azoth: fixed a rare segfault in search.</li>
<li>Azoth Autopaste: migrate to <a href=""http://codepad.org"">codepad.org</a> since paste.pocoo.org is dead.</li>
<li>[161: Azoth p100q]: working addition and configuration buttons.</li>
<li>Azoth p100q: fixed compatibility with some Adium themes.</li>
<li>[144: Azoth Xoox]: stubs for microblogging support according to XEP-0277.</li>
<li>Azoth Xoox: proper conferences rejoining.</li>
<li>Azoth Xoox: rejoin to conferences on disconnect.</li>
<li>Azoth Xoox: updated VK icon.</li>
<li>[344: LastFMScrobble]: scrobbler now obeys official guidelines.</li>
<li>LastFMScrobble: save scrobbling queue between runs.</li>
<li>LastFMScrobble: support requesting similar artists.</li>
<li>LastFMScrobble: support searching for album arts.</li>
<li>LastFMScrobble: support marking tracks as loved.</li>
<li>LastFMScrobble: handle auth errors.</li>
<li>[26: Poshuku]: handle back/forward mouse buttons.</li>
</ul>","We have a new major plugin since the 0.5.65 release: the all-new rewritten [20: LMP]! It's now a music-only player, still Phonon-based though. It is inspired by players like Amarok and Clementine, and is built around collections. For now, it has only basic functionality like playback, playlists, collection, basic scrobbling to services like Last.FM and a couple of others.

Directory and clipboard watching was moved out of the Core to a separate new plugin, Nacheku, so make sure to install it if you feel like missing this functionality.

But there are some other changes as well, for example:
<ul>
<li>Core: handle back/forward mouse buttons on tabs and scroll the tabs accordingly.</li>
<li>Core: always bring to front the main window on tray icon click.</li>
<li>[210: AdvancedNotifications]: fixed QML file for the notification.</li>
<li>AdvancedNotifications: fixed leaking of some objects and views.</li>
<li>[143: Azoth]: don't suggest already existing items in RIEX.</li>
<li>Azoth: handle /kick and /ban commands.</li>
<li>Azoth: fixed avatars cropping.</li>
<li>Azoth: fixed a rare segfault in search.</li>
<li>Azoth Autopaste: migrate to <a href=""http://codepad.org"">codepad.org</a> since paste.pocoo.org is dead.</li>
<li>[161: Azoth p100q]: working addition and configuration buttons.</li>
<li>Azoth p100q: fixed compatibility with some Adium themes.</li>
<li>[144: Azoth Xoox]: stubs for microblogging support according to XEP-0277.</li>
<li>Azoth Xoox: proper conferences rejoining.</li>
<li>Azoth Xoox: rejoin to conferences on disconnect.</li>
<li>Azoth Xoox: updated VK icon.</li>
<li>[344: LastFMScrobble]: scrobbler now obeys official guidelines.</li>
<li>LastFMScrobble: save scrobbling queue between runs.</li>
<li>LastFMScrobble: support requesting similar artists.</li>
<li>LastFMScrobble: support searching for album arts.</li>
<li>LastFMScrobble: support marking tracks as loved.</li>
<li>LastFMScrobble: handle auth errors.</li>
<li>[26: Poshuku]: handle back/forward mouse buttons.</li>
</ul>"
348,story,Development digest #24,1337956468,devel-digest-24,"Last two weeks were mostly dedicated to the [20: LMP] media player and everything that's around it. Some other plugins also got their fair share of improvements, so let's just move to the changes list:
<ul>
<li>Core: fixed a rare bug preventing to edit shortcuts.</li>
<li>Overall: changed tabs system to delegate tabs recovering to modules like [311: TabSessManager].</li>
<li>[143: Azoth]: properly handle removal of styles.</li>
<li>Azoth: don't replace smiles in the middle of words.</li>
<li>Azoth: support showing/hiding accounts.</li>
<li>Azoth Rosenthal: get rid of bundled Hunspell, use system's one instead.</li>
<li>[295: Azoth Vader]: support assigning phones to contacts.</li>
<li>Azoth Vader: protocol logging is now optional.</li>
<li>Azoth Vader: removed excessive auth requests.</li>
<li>Azoth Vader: fixed a rare segfault on giving authentication.</li>
<li>Azoth Vader: better buddy handling on authentication operations.</li>
<li>[144: Azoth Xoox]: enable to add/edit/remove phones and emails in VCards.</li>
<li>[10: BitTorrent]: show more information in Summary like uploading speed and number of seeders/leechers.</li>
<li>DeadLyrics: rewritten to provide texts to LMP using Amarok descriptions.</li>
<li>[155: Kinotify]: disable notifications on fullscreen apps so that user isn't distracted if he plays a fullscreen game or watches a movie (Win32 only yet).</li>
<li>[20: LMP]: support requesting lyrics.</li>
<li>LMP: manipulate collection via the FS tree.</li>
<li>LMP: allow one to stop after a given track.</li>
<li>LMP: automatically request album art for collection.</li>
<li>LMP: added system tray icon.</li>
<li>LMP: save last played song and play mode.</li>
<li>LMP: support for Drag-n-Drop here or there.</li>
<li>LMP: support for XSPF and PLS playlists.</li>
<li>LMP: support rescanning collection.</li>
<li>LMP: fixed issues with TagLib reentrancy.</li>
</ul>","Last two weeks were mostly dedicated to the [20: LMP] media player and everything that's around it. Some other plugins also got their fair share of improvements, so let's just move to the changes list:
<ul>
<li>Core: fixed a rare bug preventing to edit shortcuts.</li>
<li>Overall: changed tabs system to delegate tabs recovering to modules like [311: TabSessManager].</li>
<li>[143: Azoth]: properly handle removal of styles.</li>
<li>Azoth: don't replace smiles in the middle of words.</li>
<li>Azoth: support showing/hiding accounts.</li>
<li>Azoth Rosenthal: get rid of bundled Hunspell, use system's one instead.</li>
<li>[295: Azoth Vader]: support assigning phones to contacts.</li>
<li>Azoth Vader: protocol logging is now optional.</li>
<li>Azoth Vader: removed excessive auth requests.</li>
<li>Azoth Vader: fixed a rare segfault on giving authentication.</li>
<li>Azoth Vader: better buddy handling on authentication operations.</li>
<li>[144: Azoth Xoox]: enable to add/edit/remove phones and emails in VCards.</li>
<li>[10: BitTorrent]: show more information in Summary like uploading speed and number of seeders/leechers.</li>
<li>DeadLyrics: rewritten to provide texts to LMP using Amarok descriptions.</li>
<li>[155: Kinotify]: disable notifications on fullscreen apps so that user isn't distracted if he plays a fullscreen game or watches a movie (Win32 only yet).</li>
<li>[20: LMP]: support requesting lyrics.</li>
<li>LMP: manipulate collection via the FS tree.</li>
<li>LMP: allow one to stop after a given track.</li>
<li>LMP: automatically request album art for collection.</li>
<li>LMP: added system tray icon.</li>
<li>LMP: save last played song and play mode.</li>
<li>LMP: support for Drag-n-Drop here or there.</li>
<li>LMP: support for XSPF and PLS playlists.</li>
<li>LMP: support rescanning collection.</li>
<li>LMP: fixed issues with TagLib reentrancy.</li>
</ul>"
350,image,LMP: collection,1347816744,,Collection view and play queue in LMP.,Collection view and play queue in LMP.
351,image,LMP: similar artists,1347816766,,Similar artists from Last.FM in LMP.,Similar artists from Last.FM in LMP.
352,image,LMP: lyrics,1347816793,,"",""
353,image,LMP: tray icon,1337957980,,"",""
354,story,LeechCraft 0.5.70 is released,1338121630,leechcraft-0.5.70-is-released,"Today LeechCraft 0.5.70 «Hessian Blade» is released!

The most significant change since the previous release is the all-new rewritten [20: LMP] media player, which specializes on audio and is collection-oriented. For now quite basic functions are implemented, present in most other players, like, well, local collection, static and dynamic playlists (like ""50 random tracks""), support for external playlists in pls, xspf and m3u8 formats, and different playback modes, like sequential, shuffled and track/album/playlist repeat.
With modules like LastFMScrobble LMP supports scrobbling listened tracks to Last.FM (and possibly other similar services), fetching missing album covers and requests for similar artists. It also can use search modules to automatically fetch lyrics for currently playing song.

Some screenshots of LMP:

[img_assist|nid=350|title=Collection|desc=|link=popup|width=440]

[img_assist|nid=351|title=Similar artists|desc=|link=popup|width=440]

[img_assist|nid=352|title=Lyrics|desc=|link=popup|width=440]

[img_assist|nid=353|title=Tray icon|desc=|link=popup|width=440]

The following is planned in the nearest future:
<ul>
<li>Support for hardware (USB-pluggable) players and synchronization with them.</li>
<li>Support for audio streams and things like Last.FM radio.</li>
<li>Integration with our RSS feed reader, Aggregator, for full support for podcasts.</li>
<li>Fetching of personalized recommendations from Last.FM and similar services.</li>
<li>Automatic fetching of tabulatures.</li>
<li>Tags editor.</li>
</ul>

Some help would be needed for implementing support for hardware players, from platform-dependend things to testing different devices.

Among other changes the following can be noted:
<ul>
<li>Core: ""back""/""forward"" mouse buttons make tabs switching.</li>
<li>In the [210: AdvancedNotifications] module, responsible for rule-based advanced notifications, QML template and a couple of memory leaks were fixed.</li>
<li>In our modular IM client [143: Azoth]:
<ul>
<li>added support for /kick and /ban commands,</li>
<li>smiles aren't replaced anymore in the middle of the words;</li>
<li>added support for hiding and disabling accounts.</li>
</ul></li>
<li>Azoth Autopaste module which automatically pastes long texts to pastebins was migrated to the <a href=""http://codepad.org"">codepad.org</a> service due to paste.pocoo.org's death.</li>
<li>[161: Azoth p100q] which adds support for the <a href=""http://psto.net"">psto.net</a> microblogging service is now more compatible with Adium themes.</li>
<li>[144: Azoth Xoox], our XMPP protocol implementation, now supports adding, editing and removing phones and emails, and some MUC reconnection issues were fixed.</li>
<li>[295: Azoth Vader] module, the Mail.Ru Agent protocol implementation, now supports assigning phone numbers to contacts, and some problems with authorization handling were fixed.</li>
<li>Visual notifications provider [155: Kinotify] now doesn't show notifications if a fullscreen application is active. This helps to distract the user less if he's playing a game or watching a movie. For now it works only on Win32, and Xlib contributions are welcome!</li>
</ul>

More information about other changes is available in corresponding development digests: [346: #23] and [348: #24].

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [5: download page]!

As always, feature requests and bug reports are welcome, and we will be happy to get any help — from code (like hardware players support) to translations and artwork!","Today LeechCraft 0.5.70 «Hessian Blade» is released!

The most significant change since the previous release is the all-new rewritten [20: LMP] media player, which specializes on audio and is collection-oriented. For now quite basic functions are implemented, present in most other players, like, well, local collection, static and dynamic playlists (like ""50 random tracks""), support for external playlists in pls, xspf and m3u8 formats, and different playback modes, like sequential, shuffled and track/album/playlist repeat.
With modules like LastFMScrobble LMP supports scrobbling listened tracks to Last.FM (and possibly other similar services), fetching missing album covers and requests for similar artists. It also can use search modules to automatically fetch lyrics for currently playing song.

Some screenshots of LMP:

[img_assist|nid=350|title=Collection|desc=|link=popup|width=440]

[img_assist|nid=351|title=Similar artists|desc=|link=popup|width=440]

[img_assist|nid=352|title=Lyrics|desc=|link=popup|width=440]

[img_assist|nid=353|title=Tray icon|desc=|link=popup|width=440]

The following is planned in the nearest future:
<ul>
<li>Support for hardware (USB-pluggable) players and synchronization with them.</li>
<li>Support for audio streams and things like Last.FM radio.</li>
<li>Integration with our RSS feed reader, Aggregator, for full support for podcasts.</li>
<li>Fetching of personalized recommendations from Last.FM and similar services.</li>
<li>Automatic fetching of tabulatures.</li>
<li>Tags editor.</li>
</ul>

Some help would be needed for implementing support for hardware players, from platform-dependend things to testing different devices.

Among other changes the following can be noted:
<ul>
<li>Core: ""back""/""forward"" mouse buttons make tabs switching.</li>
<li>In the [210: AdvancedNotifications] module, responsible for rule-based advanced notifications, QML template and a couple of memory leaks were fixed.</li>
<li>In our modular IM client [143: Azoth]:
<ul>
<li>added support for /kick and /ban commands,</li>
<li>smiles aren't replaced anymore in the middle of the words;</li>
<li>added support for hiding and disabling accounts.</li>
</ul></li>
<li>Azoth Autopaste module which automatically pastes long texts to pastebins was migrated to the <a href=""http://codepad.org"">codepad.org</a> service due to paste.pocoo.org's death.</li>
<li>[161: Azoth p100q] which adds support for the <a href=""http://psto.net"">psto.net</a> microblogging service is now more compatible with Adium themes.</li>
<li>[144: Azoth Xoox], our XMPP protocol implementation, now supports adding, editing and removing phones and emails, and some MUC reconnection issues were fixed.</li>
<li>[295: Azoth Vader] module, the Mail.Ru Agent protocol implementation, now supports assigning phone numbers to contacts, and some problems with authorization handling were fixed.</li>
<li>Visual notifications provider [155: Kinotify] now doesn't show notifications if a fullscreen application is active. This helps to distract the user less if he's playing a game or watching a movie. For now it works only on Win32, and Xlib contributions are welcome!</li>
</ul>

More information about other changes is available in corresponding development digests: [346: #23] and [348: #24].

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [5: download page]!

As always, feature requests and bug reports are welcome, and we will be happy to get any help — from code (like hardware players support) to translations and artwork!"
356,book,Azoth,1340835876,user-guide-azoth,"[143: Azoth] is our modular IM client supporting a bunch of protocols, with quite good support for XMPP, in particular. Its features and highlights are documented on [143: this page].","[143: Azoth] is our modular IM client supporting a bunch of protocols, with quite good support for XMPP, in particular. Its features and highlights are documented on [143: this page]."
357,book,Encrypted instant messaging with PGP,1340837433,user-guide-azoth-encrypted-messaging-pgp,"<div style=""text-align:right;""><em>This guide is contributed by our nice Windows maintainer DJm00n.</em></div>

<h2>Some notes</h2>

LeechCraft doesn't work with <a href=""http://cygwin.com/cgi-bin2/package-grep.cgi?grep=gnupg"">Cygwin GnuPG</a>. Instead it works with <a href=""http://www.gpg4win.org"">native GnuPG build</a>. If you understand the difference you probably already have the right version.

<h2>Prerequisites</h2>

Later LeechCraft builds for Windows support message encryption, particularly via XMPP (the <a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a>). Native GnuPG build called Gpg4win is required for this to function properly. Gpg4win can be obtained <a href=""http://www.gpg4win.org"">here</a>.

After installation you need to generate a pair of keys — public and private (secret) ones. Your public key will be used by others to encrypt messages addressed to you, which could be decrypted by you using the private key. For this one can use the GNU Privacy Assistant application from Gpg4win. After keys are generated you need to give your public key to your chat buddies.

You can also add public keys of your chat buddies using that same program, GNU Privacy Assistant. This is needed for LeechCraft to encrypt messages you write. Ask your buddies to send you their public keys via any method convenient to them, from email to XMPP file transfer.

After you've generated your keys and imported public keys of your contacts, LeechCraft needs to be configured for this to work.

<h2>Configuring LeechCraft</h2>

<h3>Incoming messages decryption</h3>

Open LeechCraft settings: <em>Main Menu → Settings → Azoth</em>.
Select account you wish to configure and press the <em>PGP...</em> button on the right. Select your private key in the drop-down list which will be used to encrypt incoming messages and press <em>OK</em>. Then press <em>Apply</em> for settings to take effect.

<h3>Outgoing messages encryption</h3>

Each user can be assigned with a public PGP key, which will be used for encrypting the messages for that user.

For assigning a public key, you need to:
<ol>
<li>Right-click the user in Azoth roster.</li>
<li>Select <em>Manage PGP keys...</em> in the context menu.</li>
<li>Choose the public key for the contact and press <em>OK</em>.</li>
</ol>

<h2>Using encrypted messaging</h2>

One can enable or disable message encryption before sending the message.

To toggle the encryption, one needs to press the <em>Enable encryption</em> button in the chat tab's toolbar (a lock is drawn on it). After that all your messages will be encrypted with the chosen public key for that contact, and the other part will be able to read the messages only if it has the corresponding private key. It's up to the other party, though, whether to send you back encrypted or plain messages.

If something goes wrong, the button won't be enabled and you'd get an error message instead.

Also, LeechCraft automatically enables sending encrypted messages if it receives an encrypted message from the other part and a public key for it is set.

<h2>Troubleshooting</h2>

There is an excellent page about common problems and their solutions on the Psi IM project page <a href=""http://psi-im.org/wiki/Investigating_GnuPG_Problems"">here</a>.","<div style=""text-align:right;""><em>This guide is contributed by our nice Windows maintainer DJm00n.</em></div>

<h2>Some notes</h2>

LeechCraft doesn't work with <a href=""http://cygwin.com/cgi-bin2/package-grep.cgi?grep=gnupg"">Cygwin GnuPG</a>. Instead it works with <a href=""http://www.gpg4win.org"">native GnuPG build</a>. If you understand the difference you probably already have the right version.

<h2>Prerequisites</h2>

Later LeechCraft builds for Windows support message encryption, particularly via XMPP (the <a href=""http://xmpp.org/extensions/xep-0027.html"">XEP-0027</a>). Native GnuPG build called Gpg4win is required for this to function properly. Gpg4win can be obtained <a href=""http://www.gpg4win.org"">here</a>.

After installation you need to generate a pair of keys — public and private (secret) ones. Your public key will be used by others to encrypt messages addressed to you, which could be decrypted by you using the private key. For this one can use the GNU Privacy Assistant application from Gpg4win. After keys are generated you need to give your public key to your chat buddies.

You can also add public keys of your chat buddies using that same program, GNU Privacy Assistant. This is needed for LeechCraft to encrypt messages you write. Ask your buddies to send you their public keys via any method convenient to them, from email to XMPP file transfer.

After you've generated your keys and imported public keys of your contacts, LeechCraft needs to be configured for this to work.

<h2>Configuring LeechCraft</h2>

<h3>Incoming messages decryption</h3>

Open LeechCraft settings: <em>Main Menu → Settings → Azoth</em>.
Select account you wish to configure and press the <em>PGP...</em> button on the right. Select your private key in the drop-down list which will be used to encrypt incoming messages and press <em>OK</em>. Then press <em>Apply</em> for settings to take effect.

<h3>Outgoing messages encryption</h3>

Each user can be assigned with a public PGP key, which will be used for encrypting the messages for that user.

For assigning a public key, you need to:
<ol>
<li>Right-click the user in Azoth roster.</li>
<li>Select <em>Manage PGP keys...</em> in the context menu.</li>
<li>Choose the public key for the contact and press <em>OK</em>.</li>
</ol>

<h2>Using encrypted messaging</h2>

One can enable or disable message encryption before sending the message.

To toggle the encryption, one needs to press the <em>Enable encryption</em> button in the chat tab's toolbar (a lock is drawn on it). After that all your messages will be encrypted with the chosen public key for that contact, and the other part will be able to read the messages only if it has the corresponding private key. It's up to the other party, though, whether to send you back encrypted or plain messages.

If something goes wrong, the button won't be enabled and you'd get an error message instead.

Also, LeechCraft automatically enables sending encrypted messages if it receives an encrypted message from the other part and a public key for it is set.

<h2>Troubleshooting</h2>

There is an excellent page about common problems and their solutions on the Psi IM project page <a href=""http://psi-im.org/wiki/Investigating_GnuPG_Problems"">here</a>."
361,story,Development digest #25,1341911880,devel-digest-25,"Since the 0.5.70 release, we've added the Lads plugin, which provides some basic integration facilities with Unity, like displaying LeechCraft menu in Unity's Launcher.

Except that plugin, we mostly worked on [20: LMP], and had some fixes in other plugins. So here are some changes:

<ul>
<li>[143: Azoth]: updated contact list delegate.</li>
<li>Azoth: highlighting groups is now optional.</li>
<li>[144: Azoth Xoox]: always show JID in the vCard.</li>
<li>[154: GMailNotifier]: if the username isn't set, the error is shown only once.</li>
<li>[155: Kinotify]: support for X11 systems fullscreen detection.</li>
<li>[344: LastFMScrobble]: support for requesting recommended artists.</li>
<li>LastFMScrobble: support for Last.FM radios.</li>
<li>LastFMScrobble: support for requesting recent releases in user's library.</li>
<li>LastFMScrobble: some scrobbling queue fixes.</li>
<li>LastFMScrobble: fetch artists biography.</li>
<li>[20: LMP]: support radio sources & allow one to play radio streams.</li>
<li>LMP: display personal recommendations for the user.</li>
<li>LMP: display recent releases for user's musical taste.</li>
<li>LMP: display biography of the currently playing artist.</li>
<li>LMP: configurable transition time between tracks.</li>
<li>LMP: current item is saved between playlist modifications.</li>
<li>LMP: album art can be viewed in full size in some places.</li>
<li>LMP: support undo/redo in playlist.</li>
<li>LMP: notify when local collection is updated.</li>
<li>LMP: on-start directory iteration is async now.</li>
<li>LMP: many library scanning fixes.</li>
<li>LMP: album time is properly reduced on items removal.</li>
<li>[27: Poshuku CleanWeb]: fixed a segfault on premature frame destruction.</li>
<li>Sidebar: LeechCraft menu is shown here now.</li>
<li>[311: TabSessManager]: don't add empty tabs to the unclose list.</li>
<li>TabSessManager: delayed session saving.</li>
</ul>","Since the 0.5.70 release, we've added the Lads plugin, which provides some basic integration facilities with Unity, like displaying LeechCraft menu in Unity's Launcher.

Except that plugin, we mostly worked on [20: LMP], and had some fixes in other plugins. So here are some changes:

<ul>
<li>[143: Azoth]: updated contact list delegate.</li>
<li>Azoth: highlighting groups is now optional.</li>
<li>[144: Azoth Xoox]: always show JID in the vCard.</li>
<li>[154: GMailNotifier]: if the username isn't set, the error is shown only once.</li>
<li>[155: Kinotify]: support for X11 systems fullscreen detection.</li>
<li>[344: LastFMScrobble]: support for requesting recommended artists.</li>
<li>LastFMScrobble: support for Last.FM radios.</li>
<li>LastFMScrobble: support for requesting recent releases in user's library.</li>
<li>LastFMScrobble: some scrobbling queue fixes.</li>
<li>LastFMScrobble: fetch artists biography.</li>
<li>[20: LMP]: support radio sources & allow one to play radio streams.</li>
<li>LMP: display personal recommendations for the user.</li>
<li>LMP: display recent releases for user's musical taste.</li>
<li>LMP: display biography of the currently playing artist.</li>
<li>LMP: configurable transition time between tracks.</li>
<li>LMP: current item is saved between playlist modifications.</li>
<li>LMP: album art can be viewed in full size in some places.</li>
<li>LMP: support undo/redo in playlist.</li>
<li>LMP: notify when local collection is updated.</li>
<li>LMP: on-start directory iteration is async now.</li>
<li>LMP: many library scanning fixes.</li>
<li>LMP: album time is properly reduced on items removal.</li>
<li>[27: Poshuku CleanWeb]: fixed a segfault on premature frame destruction.</li>
<li>Sidebar: LeechCraft menu is shown here now.</li>
<li>[311: TabSessManager]: don't add empty tabs to the unclose list.</li>
<li>TabSessManager: delayed session saving.</li>
</ul>"
363,story,Development digest #26,1341955807,devel-digest-26,"This week we got a license for Intel VTune CPU profiler for non-commercial use, so some stuff was heavily optimized. For example, LeechCraft now starts much faster, especially if [143: Azoth] has a bunch of items in its contact list.

So, here's the changelog:
<ul>
<li>Core: added <code type=""bash"">--list-plugins</code> and <code type=""bash"">--safe-mode</code> options. The former just lists the plugins that LeechCraft has found, and the latter starts LeechCraft without any of them, allowing to disable those failing.</li>
<li>Core: added <em>Select All</em> and <em>Select None</em> buttons to the plugin manager.</li>
<li>[210: AdvancedNotifications]: added Urgent hint handler.</li>
<li>[143: Azoth]: message text is stored in tab info, so it's recovered as well.</li>
<li>Azoth: MUCs are rejoined on tab recovery.</li>
<li>Azoth: added an option to alias KP_Enter to Enter.</li>
<li>Azoth: even non-chat nicknames can be dragged now from contact list.</li>
<li>Azoth: multiple performance improvements.</li>
<li>[196: Azoth AdiumStyles]: support for <em>SenderColors.txt</em>.</li>
<li>[163: Azoth ChatHistory]: added a calendar for choosing dates.</li>
<li>Azoth ChatHistory: clickable links in History.</li>
<li>Azoth StandardStyles: added a bunch of standard styles by Pendruk.</li>
<li>[144: Azoth Xoox]: severely optimized load time, especially with big roster.</li>
<li>[344: LastFMScrobble]: allow the user to choose the language of the info.</li>
<li>[310: Liznoo]: hide the dialog after second click on its action.</li>
<li>[20: LMP]: added support for MPRIS.</li>
<li>LMP: directory iteration now optionally supports symlinks.</li>
<li>LMP: track properties for Now Playing, FS, Collection and playlist. </li>
<li>LMP: EnableScrobbling setting is now respected.</li>
<li>LMP: some scanning fixes, a couple of segfaults has been fixed too.</li>
<li>LMP: fixed compatibility with TagLib < 1.7.</li>
<li>LMP: fixed some segfaults.</li>
<li>[26: Poshuku]: removed tooltips generation.</li>
<li>Sidebar: support embeddind dock visibility actions.</li>
<li>[311: TabSessManager]: fixed <em>Select All</em> and <em>Select None</em> buttons.</li>
<li>TabSessManager: fixed tab close handling.</li>
</ul>","This week we got a license for Intel VTune CPU profiler for non-commercial use, so some stuff was heavily optimized. For example, LeechCraft now starts much faster, especially if [143: Azoth] has a bunch of items in its contact list.

So, here's the changelog:
<ul>
<li>Core: added <code type=""bash"">--list-plugins</code> and <code type=""bash"">--safe-mode</code> options. The former just lists the plugins that LeechCraft has found, and the latter starts LeechCraft without any of them, allowing to disable those failing.</li>
<li>Core: added <em>Select All</em> and <em>Select None</em> buttons to the plugin manager.</li>
<li>[210: AdvancedNotifications]: added Urgent hint handler.</li>
<li>[143: Azoth]: message text is stored in tab info, so it's recovered as well.</li>
<li>Azoth: MUCs are rejoined on tab recovery.</li>
<li>Azoth: added an option to alias KP_Enter to Enter.</li>
<li>Azoth: even non-chat nicknames can be dragged now from contact list.</li>
<li>Azoth: multiple performance improvements.</li>
<li>[196: Azoth AdiumStyles]: support for <em>SenderColors.txt</em>.</li>
<li>[163: Azoth ChatHistory]: added a calendar for choosing dates.</li>
<li>Azoth ChatHistory: clickable links in History.</li>
<li>Azoth StandardStyles: added a bunch of standard styles by Pendruk.</li>
<li>[144: Azoth Xoox]: severely optimized load time, especially with big roster.</li>
<li>[344: LastFMScrobble]: allow the user to choose the language of the info.</li>
<li>[310: Liznoo]: hide the dialog after second click on its action.</li>
<li>[20: LMP]: added support for MPRIS.</li>
<li>LMP: directory iteration now optionally supports symlinks.</li>
<li>LMP: track properties for Now Playing, FS, Collection and playlist. </li>
<li>LMP: EnableScrobbling setting is now respected.</li>
<li>LMP: some scanning fixes, a couple of segfaults has been fixed too.</li>
<li>LMP: fixed compatibility with TagLib < 1.7.</li>
<li>LMP: fixed some segfaults.</li>
<li>[26: Poshuku]: removed tooltips generation.</li>
<li>Sidebar: support embeddind dock visibility actions.</li>
<li>[311: TabSessManager]: fixed <em>Select All</em> and <em>Select None</em> buttons.</li>
<li>TabSessManager: fixed tab close handling.</li>
</ul>"
365,image,Vrooby popup,1341984643,,"",""
366,page,Vrooby,1378900970,plugins-vrooby,"Vrooby is removable storage device manager for LeechCraft.

Except allowing the user to mount and umount removable devices, it also provides other plugins with information about what devices are mounted and at which mount points. [20: LMP] for example uses this to enable collection synchronization.

[img_assist|nid=490|title=Devices popup|desc=|link=popup|width=440]

<h2>Features</h2>

<ul>
<li>Userspace mounting/unmounting of removable devices.</li>
<li>Display of information about mounted devices, like mount paths or available and total size.</li>
<li>Ignoring devices by UUID.</li>
<li>Integration with other plugins like [20: LMP].</li>
</ul>

<h2>Backends</h2>

<ul>
<li>UDisks</li>
<li>UDisks2</li>
</ul>","Vrooby is removable storage device manager for LeechCraft.

Except allowing the user to mount and umount removable devices, it also provides other plugins with information about what devices are mounted and at which mount points. [20: LMP] for example uses this to enable collection synchronization.

[img_assist|nid=490|title=Devices popup|desc=|link=popup|width=440]

<h2>Features</h2>

<ul>
<li>Userspace mounting/unmounting of removable devices.</li>
<li>Display of information about mounted devices, like mount paths or available and total size.</li>
<li>Ignoring devices by UUID.</li>
<li>Integration with other plugins like [20: LMP].</li>
</ul>

<h2>Backends</h2>

<ul>
<li>UDisks</li>
<li>UDisks2</li>
</ul>"
368,story,Development digest #27,1341987112,devel-digest-27,"We have some good news: finally [20: LMP] is able to upload tracks from local music collection to portable media players! For now it supports only basic media players for which no MTP or iPod-related stuff is required. Support for MTP players and i-devices will be added later.

Of course, transcoding is supported, so that you can automatically convert big FLAC files in your local collection to a smaller lossy format like Ogg Vorbis. Anyway, it hardly makes sense to keep these large FLACs on players with such limited memory and typically crappy sound.

For this to work, a new plugin has been introduced: meet [366: Vrooby]! It is LeechCraft's removable storage device manager, allowing the user to mount and unmount devices as well as aiding other plugins in working with such devices.

Poshuku WYFV plugin has been removed as obsolete and unsupported.

Among other changes:
<ul>
<li>Core: tab bar can be moved to the bottom.</li>
<li>Core: allow to disable resource caching via the new <code type=""bash"">--no-resource-caching</code> flag.</li>
<li>Core: lots of optimizations.</li>
<li>Core: fixed a possible segfault when there are no handlers for entity.</li>
<li>[210: AdvancedNotifications]: fixed QML notifier on some multimonitor systems.</li>
<li>[143: Azoth]: support inserting corresponding nicknames via clicking in the roster.</li>
<li>Azoth Herbicide: block authorization requests as well.</li>
<li>[161: Azoth p100q]: fixed recommending comments.</li>
<li>[144: Azoth Xoox]: action for modifying self vCard in account menu.</li>
<li>Azoth Xoox: fix for client connection handling, and a possible segfault.</li>
<li>[344: LastFMScrobble]: added support for liblastfm-1.0.</li>
<li>[20: LMP]: show full-scale album art when requested.</li>
<li>LMP: support copying properties from the properties display widget.</li>
<li>LMP: properly handle collections with unscannable items.</li>
<li>LMP: fixed a segfault on certain loaded plugins combinations.</li>
</ul>","We have some good news: finally [20: LMP] is able to upload tracks from local music collection to portable media players! For now it supports only basic media players for which no MTP or iPod-related stuff is required. Support for MTP players and i-devices will be added later.

Of course, transcoding is supported, so that you can automatically convert big FLAC files in your local collection to a smaller lossy format like Ogg Vorbis. Anyway, it hardly makes sense to keep these large FLACs on players with such limited memory and typically crappy sound.

For this to work, a new plugin has been introduced: meet [366: Vrooby]! It is LeechCraft's removable storage device manager, allowing the user to mount and unmount devices as well as aiding other plugins in working with such devices.

Poshuku WYFV plugin has been removed as obsolete and unsupported.

Among other changes:
<ul>
<li>Core: tab bar can be moved to the bottom.</li>
<li>Core: allow to disable resource caching via the new <code type=""bash"">--no-resource-caching</code> flag.</li>
<li>Core: lots of optimizations.</li>
<li>Core: fixed a possible segfault when there are no handlers for entity.</li>
<li>[210: AdvancedNotifications]: fixed QML notifier on some multimonitor systems.</li>
<li>[143: Azoth]: support inserting corresponding nicknames via clicking in the roster.</li>
<li>Azoth Herbicide: block authorization requests as well.</li>
<li>[161: Azoth p100q]: fixed recommending comments.</li>
<li>[144: Azoth Xoox]: action for modifying self vCard in account menu.</li>
<li>Azoth Xoox: fix for client connection handling, and a possible segfault.</li>
<li>[344: LastFMScrobble]: added support for liblastfm-1.0.</li>
<li>[20: LMP]: show full-scale album art when requested.</li>
<li>LMP: support copying properties from the properties display widget.</li>
<li>LMP: properly handle collections with unscannable items.</li>
<li>LMP: fixed a segfault on certain loaded plugins combinations.</li>
</ul>"
370,image,Collection uploading to a portable device,1342006920,,The process of transcoding and uploading media files from local collection to an iPod with Rockbox in [20: LMP].,The process of transcoding and uploading media files from local collection to an iPod with Rockbox in [20: LMP].
371,image,Transcoding options in LMP,1342006984,,Transcoding options selector in LMP player.,Transcoding options selector in LMP player.
372,story,LeechCraft 0.5.75 is released,1342009669,leechcraft-0.5.75-is-released,"Today LeechCraft 0.5.75 ""This Glorious Nightmare"" is released!

Just like in the previous release, we mostly focused on [20: LMP] module, which is our collection-oriented music player.

For example, it now supports music collection uploading to portable media players. Files can also be set to converted from lossless formats like FLACs to lossy but much smaller ones (in terms of file size) like Ogg Vorbis. One can also select the desired directory layout and file naming when uploading files. The transcoder is highly parallel: in fact, it can encode as much media files as you have CPU cores, so it makes sense to upload music in big batches. It's also run with minimum possible priority, so one can just continue to do your work while the media files are being converted. All this stuff looks like this:

[img_assist|nid=370|title=Uploading progress|desc=|link=popup|width=440]
[img_assist|nid=371|title=Transcoding options|desc=|link=popup|width=440]

For now only those media players are supported that don't require any special MTP or i-device-related protocols, but support for the latter ones is planned. By the way we will be glad to get your help here — from writing protocols support and synchronization modules to testing!

Among other significant new features in LMP:
<ul>
<li>Support for social radio stations like Last.FM radio.</li>
<li>Obtaining personalized recommendations, recent releases by artists in user's library and biography retrieval.</li>
<li>Support for MPRIS.</li>
</ul>

Implementing collection synchronization support required us to make yet one more plugin: [366: Vrooby]. Vrooby is responsible for working with the underlying platform/backend to obtain information about removable storage devices. Other plugins then may query it to know what devices are available and where they are mounted, for example. It also allows the user to mount and unmount them via LeechCraft UI:

[img_assist|nid=365|title=Devices popup|desc=|link=popup|width=440]

Several things were optimized a lot, thanks to the Intel VTune profiler being for non-commercial use (it's available in Gentoo's <em>science</em> overlay, BTW). Particularly, startup times were reduced a lot (especially if all the required libraries are already in disk cache), and some places like contact list drawing in [143: Azoth], our IM client, were optimized.

We've also worked hard on a couple of new plugins, one of which is Monocle, a modular document reader. It would be officially announced next time in milestone 0.5.80, though, so stay tuned!

There was a bunch of minor fixes and enhancements in other plugins, so check out our development digests, where all this is listed in more detail: [361: #25], [363: #26] and [368: #27]. One can especially highlight two small but highly requested features:
<ul>
<li>First, a nickname can be inserted into current chat tab message edit by Ctrl+clicking it in the roster.</li>
<li>Second, [163: Azoth ChatHistory] module finally got a small calendar widget to select dates to view history for, and links in chat logs are now clickable.</li>
</ul>

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [5: download page]! By the way, the source archive is <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.75/leechcraft-0.5.75.tar.xz/download"">already available</a>.","Today LeechCraft 0.5.75 ""This Glorious Nightmare"" is released!

Just like in the previous release, we mostly focused on [20: LMP] module, which is our collection-oriented music player.

For example, it now supports music collection uploading to portable media players. Files can also be set to converted from lossless formats like FLACs to lossy but much smaller ones (in terms of file size) like Ogg Vorbis. One can also select the desired directory layout and file naming when uploading files. The transcoder is highly parallel: in fact, it can encode as much media files as you have CPU cores, so it makes sense to upload music in big batches. It's also run with minimum possible priority, so one can just continue to do your work while the media files are being converted. All this stuff looks like this:

[img_assist|nid=370|title=Uploading progress|desc=|link=popup|width=440]
[img_assist|nid=371|title=Transcoding options|desc=|link=popup|width=440]

For now only those media players are supported that don't require any special MTP or i-device-related protocols, but support for the latter ones is planned. By the way we will be glad to get your help here — from writing protocols support and synchronization modules to testing!

Among other significant new features in LMP:
<ul>
<li>Support for social radio stations like Last.FM radio.</li>
<li>Obtaining personalized recommendations, recent releases by artists in user's library and biography retrieval.</li>
<li>Support for MPRIS.</li>
</ul>

Implementing collection synchronization support required us to make yet one more plugin: [366: Vrooby]. Vrooby is responsible for working with the underlying platform/backend to obtain information about removable storage devices. Other plugins then may query it to know what devices are available and where they are mounted, for example. It also allows the user to mount and unmount them via LeechCraft UI:

[img_assist|nid=365|title=Devices popup|desc=|link=popup|width=440]

Several things were optimized a lot, thanks to the Intel VTune profiler being for non-commercial use (it's available in Gentoo's <em>science</em> overlay, BTW). Particularly, startup times were reduced a lot (especially if all the required libraries are already in disk cache), and some places like contact list drawing in [143: Azoth], our IM client, were optimized.

We've also worked hard on a couple of new plugins, one of which is Monocle, a modular document reader. It would be officially announced next time in milestone 0.5.80, though, so stay tuned!

There was a bunch of minor fixes and enhancements in other plugins, so check out our development digests, where all this is listed in more detail: [361: #25], [363: #26] and [368: #27]. One can especially highlight two small but highly requested features:
<ul>
<li>First, a nickname can be inserted into current chat tab message edit by Ctrl+clicking it in the roster.</li>
<li>Second, [163: Azoth ChatHistory] module finally got a small calendar widget to select dates to view history for, and links in chat logs are now clickable.</li>
</ul>

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [5: download page]! By the way, the source archive is <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.75/leechcraft-0.5.75.tar.xz/download"">already available</a>."
374,image,Recommendations widget in LMP,1347816933,,"",""
375,image,Recent releases,1356129924,,[20: LMP] displaying recent releases that the user may have missed according to the information from Last.FM.,[20: LMP] displaying recent releases that the user may have missed according to the information from Last.FM.
376,image,Tooltip with an avatar,1344446297,,"",""
377,story,Development digest #28,1344448055,devel-digest-28,"Once again, last couple of weeks we mostly worked on [20: LMP], or nice media player. What's also important, we've added some compatibility fixes, so [10: BitTorrent] can be built with Boost 1.50 now, and [344: LastFMScrobble] can be built with fresh liblastfm-1.0.

Adding support for liblastfm-1.0 revealed that a bunch of changes in it were like renaming a function here or a function there, and it's not clear why upstream did this in the first place: these changes bring no fixes, no new features, no improvements.

Also, small, but nice news is that [143: Azoth] now supports displaying avatars in tooltips, like this:

[img_assist|nid=376|title=|desc=|link=popup|width=440]

And here's the list of other important changes:
<ul>
<li>[7: Aggregator]: support exporting feeds to PDF.</li>
<li>Azoth: fixed a segfault when Ctrl+Clicking.</li>
<li>[335: Dolozhee]: fetch the list of issue categories and assign issues to them.</li>
<li>[344: LastFMScrobble]: expose some predefined radio stations like neighbour radio or loved tracks.</li>
<li>[20: LMP]: support adding artists to wishlists to plugins like [333: Otlozhu].</li>
<li>LMP: support predefined radio stations from radio plugins.</li>
<li>LMP: playlist stats below the playlist.</li>
<li>LMP: configurable shortcuts.</li>
<li>LMP: close the Album Art display on Esc or mouse click.</li>
<li>LMP: added an option to ignore ""The "" when sorting artists (this way <em>The Autumn Offering</em> will be between <em>August Burns Red</em> and <em>Behold... The Arctopus</em>).</li>
<li>LMP: URLs are displayed in playlist instead of just the string ""URL"".</li>
<li>LMP: fixed background in QMLs.</li>
<li>LMP: more file types are now supported.</li>
<li>[333: Otlozhu]: support adding tasks from other plugins.</li>
<li>[366: Vrooby]: fixed a segfault on startup on some systems.</li>
</ul>","Once again, last couple of weeks we mostly worked on [20: LMP], or nice media player. What's also important, we've added some compatibility fixes, so [10: BitTorrent] can be built with Boost 1.50 now, and [344: LastFMScrobble] can be built with fresh liblastfm-1.0.

Adding support for liblastfm-1.0 revealed that a bunch of changes in it were like renaming a function here or a function there, and it's not clear why upstream did this in the first place: these changes bring no fixes, no new features, no improvements.

Also, small, but nice news is that [143: Azoth] now supports displaying avatars in tooltips, like this:

[img_assist|nid=376|title=|desc=|link=popup|width=440]

And here's the list of other important changes:
<ul>
<li>[7: Aggregator]: support exporting feeds to PDF.</li>
<li>Azoth: fixed a segfault when Ctrl+Clicking.</li>
<li>[335: Dolozhee]: fetch the list of issue categories and assign issues to them.</li>
<li>[344: LastFMScrobble]: expose some predefined radio stations like neighbour radio or loved tracks.</li>
<li>[20: LMP]: support adding artists to wishlists to plugins like [333: Otlozhu].</li>
<li>LMP: support predefined radio stations from radio plugins.</li>
<li>LMP: playlist stats below the playlist.</li>
<li>LMP: configurable shortcuts.</li>
<li>LMP: close the Album Art display on Esc or mouse click.</li>
<li>LMP: added an option to ignore ""The "" when sorting artists (this way <em>The Autumn Offering</em> will be between <em>August Burns Red</em> and <em>Behold... The Arctopus</em>).</li>
<li>LMP: URLs are displayed in playlist instead of just the string ""URL"".</li>
<li>LMP: fixed background in QMLs.</li>
<li>LMP: more file types are now supported.</li>
<li>[333: Otlozhu]: support adding tasks from other plugins.</li>
<li>[366: Vrooby]: fixed a segfault on startup on some systems.</li>
</ul>"
379,book,Plugin-specific documentation,1344451280,development-plugin-specific,"This chapter lists information specific to plugins, like what kind of entities a plugin accepts, API for its subplugins, etc.","This chapter lists information specific to plugins, like what kind of entities a plugin accepts, API for its subplugins, etc."
380,book,Roadmap & wanted,1344452391,development-roadmap-and-wanted,"Since this page is write-protected, discussion of desired features can be found <a href=""http://wiki.leechcraft.org/wiki/index.php/Roadmap_and_Features"">here</a>.

<h2>Features we want</h2>

<dl>
<dt>Jamendo integration in [20: LMP].</dt>
<dd>We need to support radio streams, obtaining artists info, recommendations, album art and similar stuff as does [344: LastFMScrobble] for Last.FM.</dd>
<dt>HAL backend for [310: Liznoo].</dt>
<dd>This will be needed for the FreeBSD port of Liznoo, since there is no UPower there.</dd>
<dt>UPower2 backend for Liznoo.</dt>
<dd>This should be pretty simple since UPower2 resembles UPower pretty much.</dd>
</dl>

<h2>Plans</h2>

<h3>0.5.85</h3>

Release date: ≈15 September.
<dl>
<dt>Nicer Google Drive support.</dt>
<dd></dd>
<dt>CHM support in Monocle.</dt>
<dd>Use chmlib for this.</dd>
</dl>","Since this page is write-protected, discussion of desired features can be found <a href=""http://wiki.leechcraft.org/wiki/index.php/Roadmap_and_Features"">here</a>.

<h2>Features we want</h2>

<dl>
<dt>Jamendo integration in [20: LMP].</dt>
<dd>We need to support radio streams, obtaining artists info, recommendations, album art and similar stuff as does [344: LastFMScrobble] for Last.FM.</dd>
<dt>HAL backend for [310: Liznoo].</dt>
<dd>This will be needed for the FreeBSD port of Liznoo, since there is no UPower there.</dd>
<dt>UPower2 backend for Liznoo.</dt>
<dd>This should be pretty simple since UPower2 resembles UPower pretty much.</dd>
</dl>

<h2>Plans</h2>

<h3>0.5.85</h3>

Release date: ≈15 September.
<dl>
<dt>Nicer Google Drive support.</dt>
<dd></dd>
<dt>CHM support in Monocle.</dt>
<dd>Use chmlib for this.</dd>
</dl>"
381,page,Monocle,1394092299,plugins-monocle,"Monocle is a modular document reader, with support for different file formats via different backends.

Monocle integrates with the rest of LeechCraft, so, for example, when you click a link to a PDF document in [26: Poshuku], it is suggested to be opened by Monocle after it's downloaded.

<h2>Features</h2>
<ul>
<li>Tables of contents.</li>
<li>Support for links in documents (like in PDF files).</li>
<li>Support for forms in documents (like, again, in PDF documents).</li>
<li>Displaying annotations in documents like PDF.</li>
<li>Support for searching in documents like PDF and FB2.</li>
<li>Thumbnails for documents visually highlighting the currently displayed part of the pages.</li>
<li>Support for selecting areas and copying them as image or as text (if applicable), or even integrating with the [529: data filters] like image uploaders or text searchers.</li>
<li>Fullscreen presentation mode.</li>
<li>Limited cache for already-rendered images.</li>
<li>Displaying one or two pages at once.</li>
<li>Paginated navigation.</li>
<li>Automatic document reload on document file changes.</li>
<li>Integration with the rest of LeechCraft.</li>
</ul>

The exact feature set depends on the backend used and document type.

<h2>Screenshots</h2>

[img_assist|nid=484|title=Searching in a PDF document|desc=|link=popup|width=440]

[img_assist|nid=532|title=Data filters|desc=|link=popup|width=440]

[img_assist|nid=485|title=Page thumbnails|desc=|link=popup|width=440]

[img_assist|nid=486|title=PDF document with forms|desc=|link=popup|width=440]

[img_assist|nid=487|title=DjVu document|desc=|link=popup|width=440]

<h2>Backends</h2>

Different file formats are supported by different backends. For now the following backends exist:

<h3>PDF (Poppler-based)</h3>

The most feature-rich backend, based on the Poppler rendering library. It also supports multithreaded threaded rendering on Poppler 0.24.0 and newer, resulting in seamless smooth scrolling and optimal multicore usage if multiple pages are displayed at once.

<h3>fb2</h3>

Self-written parser for fb2 books. Doesn't support images in fb2 documents for now.

<h3>DjVu</h3>

Based on the DjVuLibre suite.

<h3>PostScript</h3>

Based on the libspectre library.

<h3>MOBI</h3>

Based on own implementation.

<h3>PDF (mupdf-based)</h3>

Another backend for PDF documents. Some claim that it renders more nicely than Poppler. Though, for now it doesn't support links, forms, text searching and possibly some other fancy things Poppler supports.

Please note that since mupdf is built as static library, you need to build mupdf with the <code type=""bash"">-fPIC</code> option.","Monocle is a modular document reader, with support for different file formats via different backends.

Monocle integrates with the rest of LeechCraft, so, for example, when you click a link to a PDF document in [26: Poshuku], it is suggested to be opened by Monocle after it's downloaded.

<h2>Features</h2>
<ul>
<li>Tables of contents.</li>
<li>Support for links in documents (like in PDF files).</li>
<li>Support for forms in documents (like, again, in PDF documents).</li>
<li>Displaying annotations in documents like PDF.</li>
<li>Support for searching in documents like PDF and FB2.</li>
<li>Thumbnails for documents visually highlighting the currently displayed part of the pages.</li>
<li>Support for selecting areas and copying them as image or as text (if applicable), or even integrating with the [529: data filters] like image uploaders or text searchers.</li>
<li>Fullscreen presentation mode.</li>
<li>Limited cache for already-rendered images.</li>
<li>Displaying one or two pages at once.</li>
<li>Paginated navigation.</li>
<li>Automatic document reload on document file changes.</li>
<li>Integration with the rest of LeechCraft.</li>
</ul>

The exact feature set depends on the backend used and document type.

<h2>Screenshots</h2>

[img_assist|nid=484|title=Searching in a PDF document|desc=|link=popup|width=440]

[img_assist|nid=532|title=Data filters|desc=|link=popup|width=440]

[img_assist|nid=485|title=Page thumbnails|desc=|link=popup|width=440]

[img_assist|nid=486|title=PDF document with forms|desc=|link=popup|width=440]

[img_assist|nid=487|title=DjVu document|desc=|link=popup|width=440]

<h2>Backends</h2>

Different file formats are supported by different backends. For now the following backends exist:

<h3>PDF (Poppler-based)</h3>

The most feature-rich backend, based on the Poppler rendering library. It also supports multithreaded threaded rendering on Poppler 0.24.0 and newer, resulting in seamless smooth scrolling and optimal multicore usage if multiple pages are displayed at once.

<h3>fb2</h3>

Self-written parser for fb2 books. Doesn't support images in fb2 documents for now.

<h3>DjVu</h3>

Based on the DjVuLibre suite.

<h3>PostScript</h3>

Based on the libspectre library.

<h3>MOBI</h3>

Based on own implementation.

<h3>PDF (mupdf-based)</h3>

Another backend for PDF documents. Some claim that it renders more nicely than Poppler. Though, for now it doesn't support links, forms, text searching and possibly some other fancy things Poppler supports.

Please note that since mupdf is built as static library, you need to build mupdf with the <code type=""bash"">-fPIC</code> option."
382,image,Monocle with an FB2 document,1344619118,,"",""
383,image,Monocle with a PDF document,1344619144,,"",""
385,story,Development digest #29,1344674212,devel-digest-29,"Since the last development digest we've did a bunch of improvements here or there, and added a couple of new plugins.

The most exciting improvement is that [313: NetStoreManager] now supports Google Drive service, and its core was reworked so that now it can easily support other similar cloud storage services like Yandex.Disk. For now only uploading and fetching the list of already uploaded files works. Since the original Yandex.Narod doesn't fit the new idea of NetStoreManager, its support will be removed after this milestone.

The other important module adds support for the MP3tunes.com service in [20: LMP]. Only playlists, transcoding and uploading works, but this module (and corresponding changes in LMP core) lay foundation for other services like Google Music.

The third added plugin is not that exciting, but has been requested quite a lot: it's a birthday notifier module for our [143: Azoth] IM client. It takes information about birthdays from contacts' vCards, and one can also configure the desired days on which to notify.

Среди прочих изменений:
<ul>
<li>Core: fallback to using external apps is now optional.</li>
<li>Core: fixed showing main window in some WMs.</li>
<li>[143: Azoth]: autoselect other resources only when a chat message is recieved.</li>
<li>Azoth: tooltip is updated on avatar changes.</li>
<li>Azoth: added default queries in Service Discovery.</li>
<li>Azoth: MUC icon is preserved on MUC tabs on account state change.</li>
<li>Azoth: MUCs with unread highlight messages are marked with ""*"" now.</li>
<li>Azoth: more compatibility with full Unicode JIDs.</li>
<li>Azoth: fixed a couple of bookmarks-related memory leaks.</li>
<li>[163: Azoth ChatHistory]: dates with logs for that day are displayed in bold.</li>
<li>Azoth ChatHistory: configurable amount of logs to show on one page.</li>
<li>[144: Azoth Xoox]: synced QXmpp with upstream.</li>
<li>Azoth Xoox: added icon for odnoklassniki.</li>
<li>Azoth Xoox: birthday field is now editable for self vcards.</li>
<li>Azoth Xtazy: added /np and /sharesong commands.</li>
<li>[10: BitTorrent]: optional flags for peers' countries.</li>
<li>Glance: nice Close button right on thumbnails.</li>
<li>LMP: support different sorting styles in the playlist.</li>
<li>LMP: support Drag'n'Drop and actions for reordering items in the playlist.</li>
<li>LMP: all found lyrics can be displayed, not the last found one.</li>
<li>LMP: faster prescaler for huge album arts in notifications.</li>
<li>LMP: fixed compatibility with taglib built without ASF or MP4.</li>
<li>[313: NetStoreManager]: other plugins can request uploads now.</li>
</ul>","Since the last development digest we've did a bunch of improvements here or there, and added a couple of new plugins.

The most exciting improvement is that [313: NetStoreManager] now supports Google Drive service, and its core was reworked so that now it can easily support other similar cloud storage services like Yandex.Disk. For now only uploading and fetching the list of already uploaded files works. Since the original Yandex.Narod doesn't fit the new idea of NetStoreManager, its support will be removed after this milestone.

The other important module adds support for the MP3tunes.com service in [20: LMP]. Only playlists, transcoding and uploading works, but this module (and corresponding changes in LMP core) lay foundation for other services like Google Music.

The third added plugin is not that exciting, but has been requested quite a lot: it's a birthday notifier module for our [143: Azoth] IM client. It takes information about birthdays from contacts' vCards, and one can also configure the desired days on which to notify.

Среди прочих изменений:
<ul>
<li>Core: fallback to using external apps is now optional.</li>
<li>Core: fixed showing main window in some WMs.</li>
<li>[143: Azoth]: autoselect other resources only when a chat message is recieved.</li>
<li>Azoth: tooltip is updated on avatar changes.</li>
<li>Azoth: added default queries in Service Discovery.</li>
<li>Azoth: MUC icon is preserved on MUC tabs on account state change.</li>
<li>Azoth: MUCs with unread highlight messages are marked with ""*"" now.</li>
<li>Azoth: more compatibility with full Unicode JIDs.</li>
<li>Azoth: fixed a couple of bookmarks-related memory leaks.</li>
<li>[163: Azoth ChatHistory]: dates with logs for that day are displayed in bold.</li>
<li>Azoth ChatHistory: configurable amount of logs to show on one page.</li>
<li>[144: Azoth Xoox]: synced QXmpp with upstream.</li>
<li>Azoth Xoox: added icon for odnoklassniki.</li>
<li>Azoth Xoox: birthday field is now editable for self vcards.</li>
<li>Azoth Xtazy: added /np and /sharesong commands.</li>
<li>[10: BitTorrent]: optional flags for peers' countries.</li>
<li>Glance: nice Close button right on thumbnails.</li>
<li>LMP: support different sorting styles in the playlist.</li>
<li>LMP: support Drag'n'Drop and actions for reordering items in the playlist.</li>
<li>LMP: all found lyrics can be displayed, not the last found one.</li>
<li>LMP: faster prescaler for huge album arts in notifications.</li>
<li>LMP: fixed compatibility with taglib built without ASF or MP4.</li>
<li>[313: NetStoreManager]: other plugins can request uploads now.</li>
</ul>"
387,image,Uploading to cloud music storage,1344674836,,"",""
388,image,NetStoreManager Google Drive,1344679820,,"",""
389,story,LeechCraft 0.5.80 is released,1344684909,leechcraft-0.5.80-is-released,"In this release we've mostly focused on the [20: LMP] and [313: NetStoreManager] modules, but other modules also got some interesting improvements. Also, it's time to announce the [381: Monocle] reader!

<h2>LMP</h2>

LMP, our music player, now has all proper logic for uploading songs to cloud services, playing back uploaded songs, as well as, for example, fetching playlists from such services. Support for exact clouds is added via modules, in accordance with LeechCraft way, and for now only MP3tunes.com service is supported. Since the foundation is already laid, adding other clouds like Google Music would be much easier.

Much like with device synchronization, one can also transcode the songs before uploading:
[img_assist|nid=387|title=Cloud uploading|desc=|link=popup|width=440]

As one may see from this screenshot there is now a nice stats label below the playlist, so that one can know exactly how much songs he added and their total play time.

Regarding playlist improvements, there are now different sort modes, so that one can now sort, for example, by file path or disable sorting at all. If the sorting is disabled, then it's possible to move and reorder tracks around with Drag'n'Drop, and the order of tracks addition is preserved as tracks are added.

Among cosmetic changes are fixed background colors in QML elements and optional ignoring of ""The "" when sorting artists in collection. This way <em>The Autumn Offering</em> will be between <em>August Burns Red</em> and <em>Behold... The Arctopus</em>. And shortcuts for different actions are configurable now, too.

The newer LMP also supports recently released liblastfm-1.0 which broke API compatibility with liblastfm-0.3.

<h2>NetStoreManager</h2>

NetStoreManager got initial support for the Google Drive cloud storage service:
[img_assist|nid=388|title=Google Drive|desc=|link=popup|width=440]

Its core has been reworked so now it can easily support other similar cloud storage services like Yandex.Disk. For now only uploading and fetching the list of already uploaded files works, but in the next milestone it'd have the rest of features, as well as automatic folder synchronization.

Since the original Yandex.Narod doesn't fit the new idea of NetStoreManager, its support will be removed after this milestone and replaced with Yandex.Disk.

<h2>Monocle</h2>

Though being available for some months already, this module only matured now enough to be announced. So, meet [381: Monocle]: our document reader. It already has quite enough features to use it on a daily basis for most tasks. It supports displaying one page or double-page spread, copying selection to image or text, scaling, width and height fitting, tables of contents, links, paginated navigation and printing. Monocle also integrates with the rest of LeechCraft so that it automatically opens a PDF document after a link to it is clicked, for example, in a browser or [143: Azoth], and the document is downloaded.

[img_assist|nid=383|title=PDF document|desc=|link=popup|width=440]
[img_assist|nid=382|title=FB2 document|desc=|link=popup|width=440]

Different formats are supported via different backend moudles, and for now only PDF and fb2 file formats are supported. There are two backends for PDF and one hand-written fb2 implementation.

PDF is supported either via Poppler library or through mupdf library. The later is discouraged, since the mupdf backend supports not all features that are supported by Poppler backend, but that may be fixed some time in the future. And it is built as a static library, so some magic is required to make it work in LeechCraft. For example, see <a href=""https://bugs.gentoo.org/show_bug.cgi?id=407807"">this bugreport</a>.

The main reasoning behind adding mupdf backend is that some claim it renders text much better than Poppler, but that's questionable.

<h2>Azoth</h2>

[143: Azoth] IM client also got its fair share of improvements.

A new plugin has been added, Azoth BirthdayNotifier, which notifies about birthdays of contacts in user's contact list. The dates are taken from contacts' vCards, so this feature obviously relies on them being properly filled out.

Azoth Xtazy now supports /np and /sharesong commands. /np pastes the name of the currently played song into current chat, while /sharesong uploads the song via plugins like NetStoreManager and pastes a link to it. The former works with both LMP and MPRIS players, the latter requires LMP only. This can be seen as yet one example of profits of LeechCraft architecture and integration.

Azoth now finally displays user's avatar in tooltips:
[img_assist|nid=376|title=|desc=|link=popup|width=440]

Moreover, tabs of conferences with unread highlight messages are now marked with a star sign (""*"").

QXmpp, the XMPP implementation library forked by us, has been synced with the upstream. And seems like we're a bit closer to integrating our custom patches to QXmpp with the upstream version. Integrating means less mess, more chances to get into Debian repos, and is good and healthy for the Open Source community — why fork when we can cooperate? :)

<h2>Other modules</h2>

[7: Aggregator] now supports exporting feeds to PDF in addition to previously supported fb2. One can adjust the parameters of PDF export, like margins, fonts and font sizes, and paper size. The resulting PDFs are perfect for reading on eBooks like Amazon Kindle.

The issue reporter [335: Dolozhee] now supports fetching issue categories from our tracker during issue reporting. This way one can assign a category to the issue being reporterd right from Dolozhee interface.

Of course, there was a bunch of other improvements, so don't forget to check out our development digests if you're interested: [377: #28] and [385: #29].

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [6: download page]! The source archive is <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.80/leechcraft-0.5.80.tar.xz/download"">already available</a>.","In this release we've mostly focused on the [20: LMP] and [313: NetStoreManager] modules, but other modules also got some interesting improvements. Also, it's time to announce the [381: Monocle] reader!

<h2>LMP</h2>

LMP, our music player, now has all proper logic for uploading songs to cloud services, playing back uploaded songs, as well as, for example, fetching playlists from such services. Support for exact clouds is added via modules, in accordance with LeechCraft way, and for now only MP3tunes.com service is supported. Since the foundation is already laid, adding other clouds like Google Music would be much easier.

Much like with device synchronization, one can also transcode the songs before uploading:
[img_assist|nid=387|title=Cloud uploading|desc=|link=popup|width=440]

As one may see from this screenshot there is now a nice stats label below the playlist, so that one can know exactly how much songs he added and their total play time.

Regarding playlist improvements, there are now different sort modes, so that one can now sort, for example, by file path or disable sorting at all. If the sorting is disabled, then it's possible to move and reorder tracks around with Drag'n'Drop, and the order of tracks addition is preserved as tracks are added.

Among cosmetic changes are fixed background colors in QML elements and optional ignoring of ""The "" when sorting artists in collection. This way <em>The Autumn Offering</em> will be between <em>August Burns Red</em> and <em>Behold... The Arctopus</em>. And shortcuts for different actions are configurable now, too.

The newer LMP also supports recently released liblastfm-1.0 which broke API compatibility with liblastfm-0.3.

<h2>NetStoreManager</h2>

NetStoreManager got initial support for the Google Drive cloud storage service:
[img_assist|nid=388|title=Google Drive|desc=|link=popup|width=440]

Its core has been reworked so now it can easily support other similar cloud storage services like Yandex.Disk. For now only uploading and fetching the list of already uploaded files works, but in the next milestone it'd have the rest of features, as well as automatic folder synchronization.

Since the original Yandex.Narod doesn't fit the new idea of NetStoreManager, its support will be removed after this milestone and replaced with Yandex.Disk.

<h2>Monocle</h2>

Though being available for some months already, this module only matured now enough to be announced. So, meet [381: Monocle]: our document reader. It already has quite enough features to use it on a daily basis for most tasks. It supports displaying one page or double-page spread, copying selection to image or text, scaling, width and height fitting, tables of contents, links, paginated navigation and printing. Monocle also integrates with the rest of LeechCraft so that it automatically opens a PDF document after a link to it is clicked, for example, in a browser or [143: Azoth], and the document is downloaded.

[img_assist|nid=383|title=PDF document|desc=|link=popup|width=440]
[img_assist|nid=382|title=FB2 document|desc=|link=popup|width=440]

Different formats are supported via different backend moudles, and for now only PDF and fb2 file formats are supported. There are two backends for PDF and one hand-written fb2 implementation.

PDF is supported either via Poppler library or through mupdf library. The later is discouraged, since the mupdf backend supports not all features that are supported by Poppler backend, but that may be fixed some time in the future. And it is built as a static library, so some magic is required to make it work in LeechCraft. For example, see <a href=""https://bugs.gentoo.org/show_bug.cgi?id=407807"">this bugreport</a>.

The main reasoning behind adding mupdf backend is that some claim it renders text much better than Poppler, but that's questionable.

<h2>Azoth</h2>

[143: Azoth] IM client also got its fair share of improvements.

A new plugin has been added, Azoth BirthdayNotifier, which notifies about birthdays of contacts in user's contact list. The dates are taken from contacts' vCards, so this feature obviously relies on them being properly filled out.

Azoth Xtazy now supports /np and /sharesong commands. /np pastes the name of the currently played song into current chat, while /sharesong uploads the song via plugins like NetStoreManager and pastes a link to it. The former works with both LMP and MPRIS players, the latter requires LMP only. This can be seen as yet one example of profits of LeechCraft architecture and integration.

Azoth now finally displays user's avatar in tooltips:
[img_assist|nid=376|title=|desc=|link=popup|width=440]

Moreover, tabs of conferences with unread highlight messages are now marked with a star sign (""*"").

QXmpp, the XMPP implementation library forked by us, has been synced with the upstream. And seems like we're a bit closer to integrating our custom patches to QXmpp with the upstream version. Integrating means less mess, more chances to get into Debian repos, and is good and healthy for the Open Source community — why fork when we can cooperate? :)

<h2>Other modules</h2>

[7: Aggregator] now supports exporting feeds to PDF in addition to previously supported fb2. One can adjust the parameters of PDF export, like margins, fonts and font sizes, and paper size. The resulting PDFs are perfect for reading on eBooks like Amazon Kindle.

The issue reporter [335: Dolozhee] now supports fetching issue categories from our tracker during issue reporting. This way one can assign a category to the issue being reporterd right from Dolozhee interface.

Of course, there was a bunch of other improvements, so don't forget to check out our development digests if you're interested: [377: #28] and [385: #29].

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [6: download page]! The source archive is <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.80/leechcraft-0.5.80.tar.xz/download"">already available</a>."
391,image,LMP: recommended events,1347816861,,"",""
392,image,LMP: radio,1347816875,,"",""
393,page,Screenshots,1377366544,screenshots,"<h2>Azoth</h2>

[img_assist|nid=139|title=MUC|desc=|link=popup|width=440]
[img_assist|nid=249|title=MUC with Adium style|desc=|link=popup|width=440]
[img_assist|nid=194|title=Another Adium style|desc=|link=popup|width=440]
[img_assist|nid=195|title=Yet one more Adium style|desc=|link=popup|width=440]
[img_assist|nid=192|title=LaTeX formula in a MUC|desc=|link=popup|width=440]
[img_assist|nid=162|title=Psto in Azoth|desc=|link=popup|width=440]
[img_assist|nid=141|title=Service Discovery|desc=|link=popup|width=440]

<h2>LMP</h2>

[img_assist|nid=351|title=Similar artists|desc=|link=popup|width=440]
[img_assist|nid=350|title=Collection|desc=|link=popup|width=440]
[img_assist|nid=374|title=Recommendations|desc=|link=popup|width=440]
[img_assist|nid=375|title=Recent releases|desc=|link=popup|width=440]
[img_assist|nid=391|title=Recommended events|desc=|link=popup|width=440]
[img_assist|nid=392|title=Radio station|desc=|link=popup|width=440]
[img_assist|nid=352|title=Lyrics|desc=|link=popup|width=440]

<h2>Various</h2>

[img_assist|nid=365|title=Vrooby device manager|desc=|link=popup|width=440]","<h2>Azoth</h2>

[img_assist|nid=139|title=MUC|desc=|link=popup|width=440]
[img_assist|nid=249|title=MUC with Adium style|desc=|link=popup|width=440]
[img_assist|nid=194|title=Another Adium style|desc=|link=popup|width=440]
[img_assist|nid=195|title=Yet one more Adium style|desc=|link=popup|width=440]
[img_assist|nid=192|title=LaTeX formula in a MUC|desc=|link=popup|width=440]
[img_assist|nid=162|title=Psto in Azoth|desc=|link=popup|width=440]
[img_assist|nid=141|title=Service Discovery|desc=|link=popup|width=440]

<h2>LMP</h2>

[img_assist|nid=351|title=Similar artists|desc=|link=popup|width=440]
[img_assist|nid=350|title=Collection|desc=|link=popup|width=440]
[img_assist|nid=374|title=Recommendations|desc=|link=popup|width=440]
[img_assist|nid=375|title=Recent releases|desc=|link=popup|width=440]
[img_assist|nid=391|title=Recommended events|desc=|link=popup|width=440]
[img_assist|nid=392|title=Radio station|desc=|link=popup|width=440]
[img_assist|nid=352|title=Lyrics|desc=|link=popup|width=440]

<h2>Various</h2>

[img_assist|nid=365|title=Vrooby device manager|desc=|link=popup|width=440]"
394,story,Development digest #30,1349279299,devel-digest-30,"Only a week has passed since the 0.5.80 release, but we've already done quite a lot!

First of all, radio support in [20: LMP] has been reworked, and a new plugin has been added, [399: HotStreams], which provides access to lots of different radio stations, like the ones on Digitally Imported, SkyFM, SomaFM and more.

Then [313: NetStoreManager] has been improved a lot and now better supports intuitive drag'n'drop operations. Also, the NetStoreManager's aim is a bit different today from what it was planned for almost a year ago, so the initial Yandex.Narod service subplugin has been removed as being obsolete. When we settle with the Google Drive support, Yandex.Narod will be replaced with a full-blown Yandex.Disk integration module.

Third, the [310: Liznoo] power management module now supports FreeBSD platform, thanks to the contributions of a guy who chose to remain anonymous.

And the settings tab has been also cleaned up a lot: subplugins' settings now reside in their parent plugins settings pages.

There is also a bunch of other smaller changes:
<ul>
<li>Core: use native file dialogs.</li>
<li>[143: Azoth]: adjust variant chooser to contents.</li>
<li>Azoth: fixed non-expanding smiles in smiles chooser.</li>
<li>Azoth: MUC-aware groups sorting (MUC groups are now at the bottom).</li>
<li>Azoth: optional separate MUC log.</li>
<li>Azoth: fixed handling of tabs losing focus.</li>
<li>Azoth: fixed several segfaults.</li>
<li>[145: Azoth Acetamide]: support 307, 310, 320, 378 answers for UnrealIRCD.</li>
<li>Azoth Acetamide: default IRC port is 6667 now.</li>
<li>[161: Azoth p100q]: support in-place insertions instead of replaces.</li>
<li>Azoth p100q: fixed last ID shortcut (it's <em>Ctrl+Shift+P</em> now).</li>
<li>[144: Azoth Xoox]: detect and eliminate duplicate bookmarks.</li>
<li>Azoth Xoox: fixed a bug in stanza generation in XEP-0016.</li>
<li>Azoth Xoox: proper Cancel/Auth error handling.</li>
<li>Azoth Xoox: don't reconnect on account nick change.</li>
<li>[335: Dolozhee]: fixed reporting Core issues.</li>
<li>[155: Kinotify]: configurable screen corner for the notifier balloon.</li>
<li>[153: LackMan]: remove caching.</li>
<li>[20: LMP]: added listview-based tabs switcher.</li>
<li>LMP: added buffer status indicator.</li>
<li>LMP: added collection statistics dialog.</li>
<li>LMP: new collection items are added immediately.</li>
<li>[26: Poshuku]: fixed error page template.</li>
</ul>","Only a week has passed since the 0.5.80 release, but we've already done quite a lot!

First of all, radio support in [20: LMP] has been reworked, and a new plugin has been added, [399: HotStreams], which provides access to lots of different radio stations, like the ones on Digitally Imported, SkyFM, SomaFM and more.

Then [313: NetStoreManager] has been improved a lot and now better supports intuitive drag'n'drop operations. Also, the NetStoreManager's aim is a bit different today from what it was planned for almost a year ago, so the initial Yandex.Narod service subplugin has been removed as being obsolete. When we settle with the Google Drive support, Yandex.Narod will be replaced with a full-blown Yandex.Disk integration module.

Third, the [310: Liznoo] power management module now supports FreeBSD platform, thanks to the contributions of a guy who chose to remain anonymous.

And the settings tab has been also cleaned up a lot: subplugins' settings now reside in their parent plugins settings pages.

There is also a bunch of other smaller changes:
<ul>
<li>Core: use native file dialogs.</li>
<li>[143: Azoth]: adjust variant chooser to contents.</li>
<li>Azoth: fixed non-expanding smiles in smiles chooser.</li>
<li>Azoth: MUC-aware groups sorting (MUC groups are now at the bottom).</li>
<li>Azoth: optional separate MUC log.</li>
<li>Azoth: fixed handling of tabs losing focus.</li>
<li>Azoth: fixed several segfaults.</li>
<li>[145: Azoth Acetamide]: support 307, 310, 320, 378 answers for UnrealIRCD.</li>
<li>Azoth Acetamide: default IRC port is 6667 now.</li>
<li>[161: Azoth p100q]: support in-place insertions instead of replaces.</li>
<li>Azoth p100q: fixed last ID shortcut (it's <em>Ctrl+Shift+P</em> now).</li>
<li>[144: Azoth Xoox]: detect and eliminate duplicate bookmarks.</li>
<li>Azoth Xoox: fixed a bug in stanza generation in XEP-0016.</li>
<li>Azoth Xoox: proper Cancel/Auth error handling.</li>
<li>Azoth Xoox: don't reconnect on account nick change.</li>
<li>[335: Dolozhee]: fixed reporting Core issues.</li>
<li>[155: Kinotify]: configurable screen corner for the notifier balloon.</li>
<li>[153: LackMan]: remove caching.</li>
<li>[20: LMP]: added listview-based tabs switcher.</li>
<li>LMP: added buffer status indicator.</li>
<li>LMP: added collection statistics dialog.</li>
<li>LMP: new collection items are added immediately.</li>
<li>[26: Poshuku]: fixed error page template.</li>
</ul>"
396,image,Launchy,1349278631,,"",""
397,page,Launchy,1388390073,plugins-launchy,"Launchy is third-party applications launcher and LeechCraft tab opener. It also provides a quark for quick opening favorite applications.

Launchy supports freedesktop.org-compliant applications that properly install the corresponding desktop files, and as such it's usable only on X11 platforms.

<h2>Features</h2>

<ul>
<li>Support for favorites.</li>
<li>Recently launched apps list.</li>
<li>Quark for quickly opening applications added to favorites.</li>
<li>Keyboard navigation.</li>
<li>Filtering by application name, description or executable name.</li>
</ul>

[img_assist|nid=489|title=Launchy|desc=|link=popup|width=440]","Launchy is third-party applications launcher and LeechCraft tab opener. It also provides a quark for quick opening favorite applications.

Launchy supports freedesktop.org-compliant applications that properly install the corresponding desktop files, and as such it's usable only on X11 platforms.

<h2>Features</h2>

<ul>
<li>Support for favorites.</li>
<li>Recently launched apps list.</li>
<li>Quark for quickly opening applications added to favorites.</li>
<li>Keyboard navigation.</li>
<li>Filtering by application name, description or executable name.</li>
</ul>

[img_assist|nid=489|title=Launchy|desc=|link=popup|width=440]"
399,page,HotStreams,1349353679,plugins-hotstreams,"HotStreams is a radio directory module for [20: LMP] and similar plugins.

It supports the following radios:
<ul>
<li>Digitally Imported.</li>
<li>SkyFM.</li>
<li>SomaFM.</li>
<li>Huge radio directory from <a href=""http://dir.xiph.org"">dir.xiph.org</a>.</li>
<li>42fm.</li>
</ul>","HotStreams is a radio directory module for [20: LMP] and similar plugins.

It supports the following radios:
<ul>
<li>Digitally Imported.</li>
<li>SkyFM.</li>
<li>SomaFM.</li>
<li>Huge radio directory from <a href=""http://dir.xiph.org"">dir.xiph.org</a>.</li>
<li>42fm.</li>
</ul>"
401,story,Development digest #31,1349287663,devel-digest-31,"This time we are here with a couple of new plugins as well as a usual bunch of fixes and improvements in already existing modules.

One of the two new plugins is Monocle Seen, DjVu backend plugin for our [381: document reader]. For now it's quite basic and only supports, well, rendering the documents. Support for TOCs and similar stuff will come later.

Then there is [397: Launchy], a new plugin for launching applications and open LeechCraft tabs. It is UNIX-only and fetches the list of applications from the freedesktop.org desktop files. For now it only supports visual fullscreen launcher, some say it resembles Unity a bit:
[img_assist|nid=396|title=Launchy|desc=|link=popup|width=440]

Another improvement worth noting separately is that Azoth Autopaste module has been upgraded a lot, so now it supports choosing syntax highlighting of the text that's pasted to pastebins, and the pastebin service itself can be chosen. Though, for now only <a href=""http://codepad.org"">codepad.org</a> is available.

The [20: LMP] audioplayer paired with [344: LastFMScrobble] is now able to fetch personalized recommended events. Of course, this is location-aware, so only events near you will be shown. It's quite easy to add support for other such social events aggregators, if any.

And finally we synced our QXmpp fork with the upstream, pushing all the required patches! So now the following should be used to checkout sources:
<code type=""bash"">git clone https://code.google.com/p/qxmpp</code>

Among other changes:
<ul>
<li>Core: support restaring LeechCraft from LeechCraft.</li>
<li>Core: support setting startup password.</li>
<li>[143: Azoth]: fixed a rare segfault where nick hash was negative.</li>
<li>Azoth: leave chat view enabled when the other contact is deleted.</li>
<li>Azoth: added ""clear line edit"" to roster filter.</li>
<li>[295: Azoth Vader]: online/offline status handling fixes.</li>
<li>Azoth Xoox: properly reconnect after account changes.</li>
<li>Azoth Xoox: logging all data to file is now optional and is disabled by default.</li>
<li>[14: DBusManager]: expose plugins like NetStoreManager via D-Bus.</li>
<li>[20: LMP]: detect deleted files.</li>
<li>LMP: tracks can now be removed from collection or even from disk via UI.</li>
<li>LMP: properly re-add root paths on rescan.</li>
<li>LMP: directory iterator now asynchronous in FS watcher.</li>
<li>LMP: scale pixmaps to 48x48 in playlist, conserves memory a lot.</li>
<li>LMP: play on Enter/Space/Return.</li>
<li>LMP: support playlist searching.</li>
<li>LMP: handle links in biography and similar views.</li>
<li>LMP: fetch artist image for radio tracks.</li>
<li>LMP: support banning current track.</li>
<li>LMP: support deleting static playlists.</li>
<li>LMP: support Phonon in non-KDE installations.</li>
<li>LMP: ""clear line edit"" in collection and playlist filters.</li>
<li>LMP: background blurring in QML templates.</li>
<li>LMP: lots of small QML template fixes and improvements.</li>
</ul>","This time we are here with a couple of new plugins as well as a usual bunch of fixes and improvements in already existing modules.

One of the two new plugins is Monocle Seen, DjVu backend plugin for our [381: document reader]. For now it's quite basic and only supports, well, rendering the documents. Support for TOCs and similar stuff will come later.

Then there is [397: Launchy], a new plugin for launching applications and open LeechCraft tabs. It is UNIX-only and fetches the list of applications from the freedesktop.org desktop files. For now it only supports visual fullscreen launcher, some say it resembles Unity a bit:
[img_assist|nid=396|title=Launchy|desc=|link=popup|width=440]

Another improvement worth noting separately is that Azoth Autopaste module has been upgraded a lot, so now it supports choosing syntax highlighting of the text that's pasted to pastebins, and the pastebin service itself can be chosen. Though, for now only <a href=""http://codepad.org"">codepad.org</a> is available.

The [20: LMP] audioplayer paired with [344: LastFMScrobble] is now able to fetch personalized recommended events. Of course, this is location-aware, so only events near you will be shown. It's quite easy to add support for other such social events aggregators, if any.

And finally we synced our QXmpp fork with the upstream, pushing all the required patches! So now the following should be used to checkout sources:
<code type=""bash"">git clone https://code.google.com/p/qxmpp</code>

Among other changes:
<ul>
<li>Core: support restaring LeechCraft from LeechCraft.</li>
<li>Core: support setting startup password.</li>
<li>[143: Azoth]: fixed a rare segfault where nick hash was negative.</li>
<li>Azoth: leave chat view enabled when the other contact is deleted.</li>
<li>Azoth: added ""clear line edit"" to roster filter.</li>
<li>[295: Azoth Vader]: online/offline status handling fixes.</li>
<li>Azoth Xoox: properly reconnect after account changes.</li>
<li>Azoth Xoox: logging all data to file is now optional and is disabled by default.</li>
<li>[14: DBusManager]: expose plugins like NetStoreManager via D-Bus.</li>
<li>[20: LMP]: detect deleted files.</li>
<li>LMP: tracks can now be removed from collection or even from disk via UI.</li>
<li>LMP: properly re-add root paths on rescan.</li>
<li>LMP: directory iterator now asynchronous in FS watcher.</li>
<li>LMP: scale pixmaps to 48x48 in playlist, conserves memory a lot.</li>
<li>LMP: play on Enter/Space/Return.</li>
<li>LMP: support playlist searching.</li>
<li>LMP: handle links in biography and similar views.</li>
<li>LMP: fetch artist image for radio tracks.</li>
<li>LMP: support banning current track.</li>
<li>LMP: support deleting static playlists.</li>
<li>LMP: support Phonon in non-KDE installations.</li>
<li>LMP: ""clear line edit"" in collection and playlist filters.</li>
<li>LMP: background blurring in QML templates.</li>
<li>LMP: lots of small QML template fixes and improvements.</li>
</ul>"
403,story,Development digest #32,1349355908,devel-digest-32,"A month has passed since previous development digest, and LeechCraft got some huge improvements.

First of all, the [313: NetStoreManager] module now supports synchronization, watching the file system for changes to automatically upload new or changed files in watched directories. For now the file system watcher is inotify-only, so this won't work on platforms other than Linux. And, of course, this is quite an experimental feature for now — use at your own risk.

Then, [27: Poshuku CleanWeb] module was optimized and improved a lot. Particularly, its performance was increased by an order of magnitude, and it now supports using PCRE as regexp matching engine, since QRegExps are quite slow. CleanWeb now supports a much wider subset of AdBlock+ rules, including separator-based rules and selector-based element hiding.

[143: Azoth] and [144: Azoth Xoox]'s file transfer capabilities were also improved. Azoth now supports sending files both by protocol means and via modules like NetStoreManager, all from a single handy dialog. Also, drag'n'drop support for file sending was improved significantly. Azoth Xoox now supports setting a SOCKS5 file transfer proxy, and by default it autodetects the one offered by the Jabber server.

LeechCraft now also supports searching the settings: the pages and sections containing the search terms are left enabled while the rest is disabled when searching.

Also, LeechCraft now builds and runs successfully on Mac with clang, and a new plugin has been added, Pierre, which provides some basic integration with Mac OS X.

Other changes:
<ul>
<li>Core: use system style by default instead of Plastique.</li>
<li>Core: workaround for <a href=""https://bugreports.qt-project.org/browse/QTBUG-13175"">QTBUG-13175</a>.</li>
<li>[210: AdvancedNotifications]: proper notifications view height.</li>
<li>[143: Azoth]: user-visible strings are properly escaped in contact tooltips.</li>
<li>Azoth: fixed Ctrl+1 handling.</li>
<li>[163: Azoth ChatHistory]: fixed links not being clickable sometimes.</li>
<li>[214: Azoth Metacontacts]: show dummy account only if there are metacontacts.</li>
<li>[399: HotStreams]: fetch radio list from dir.xiph.org.</li>
<li>[344: LastFMScrobble]: fixed tags ordering in biography info.</li>
<li>LastFMScrobble: fixed build with Debian liblastfm snapshot.</li>
<li>[20: LMP]: playlist loading is now asynchronous.</li>
<li>LMP: autodetect and rescan changed files.</li>
<li>LMP: remember last used events/biography/etc providers.</li>
<li>LMP: clickable artist names in biography/similar/etc view.</li>
<li>LMP: choosing next track now respects play mode.</li>
<li>LMP: fixed Repeat Album play mode.</li>
<li>LMP: improved transcoding options selection: now more formats are supported and their list is dynamically obtained from FFmpeg.</li>
<li>LMP: added track move up/down buttons.</li>
<li>LMP: rescan fixes.</li>
<li>LMP DumbSync: upload album covers as well.</li>
<li>[381: Monocle]: fixed fitting ratio calculation.</li>
<li>[26: Poshuku]: menus for back/forward history navigation.</li>
<li>Poshuku: reworked bookmarks management UI.</li>
<li>TabsList: handle Enter, Return, Home and End buttons.</li>
<li>[311: TabSessManager]: tabs order is now saved as well.</li>
</ul>","A month has passed since previous development digest, and LeechCraft got some huge improvements.

First of all, the [313: NetStoreManager] module now supports synchronization, watching the file system for changes to automatically upload new or changed files in watched directories. For now the file system watcher is inotify-only, so this won't work on platforms other than Linux. And, of course, this is quite an experimental feature for now — use at your own risk.

Then, [27: Poshuku CleanWeb] module was optimized and improved a lot. Particularly, its performance was increased by an order of magnitude, and it now supports using PCRE as regexp matching engine, since QRegExps are quite slow. CleanWeb now supports a much wider subset of AdBlock+ rules, including separator-based rules and selector-based element hiding.

[143: Azoth] and [144: Azoth Xoox]'s file transfer capabilities were also improved. Azoth now supports sending files both by protocol means and via modules like NetStoreManager, all from a single handy dialog. Also, drag'n'drop support for file sending was improved significantly. Azoth Xoox now supports setting a SOCKS5 file transfer proxy, and by default it autodetects the one offered by the Jabber server.

LeechCraft now also supports searching the settings: the pages and sections containing the search terms are left enabled while the rest is disabled when searching.

Also, LeechCraft now builds and runs successfully on Mac with clang, and a new plugin has been added, Pierre, which provides some basic integration with Mac OS X.

Other changes:
<ul>
<li>Core: use system style by default instead of Plastique.</li>
<li>Core: workaround for <a href=""https://bugreports.qt-project.org/browse/QTBUG-13175"">QTBUG-13175</a>.</li>
<li>[210: AdvancedNotifications]: proper notifications view height.</li>
<li>[143: Azoth]: user-visible strings are properly escaped in contact tooltips.</li>
<li>Azoth: fixed Ctrl+1 handling.</li>
<li>[163: Azoth ChatHistory]: fixed links not being clickable sometimes.</li>
<li>[214: Azoth Metacontacts]: show dummy account only if there are metacontacts.</li>
<li>[399: HotStreams]: fetch radio list from dir.xiph.org.</li>
<li>[344: LastFMScrobble]: fixed tags ordering in biography info.</li>
<li>LastFMScrobble: fixed build with Debian liblastfm snapshot.</li>
<li>[20: LMP]: playlist loading is now asynchronous.</li>
<li>LMP: autodetect and rescan changed files.</li>
<li>LMP: remember last used events/biography/etc providers.</li>
<li>LMP: clickable artist names in biography/similar/etc view.</li>
<li>LMP: choosing next track now respects play mode.</li>
<li>LMP: fixed Repeat Album play mode.</li>
<li>LMP: improved transcoding options selection: now more formats are supported and their list is dynamically obtained from FFmpeg.</li>
<li>LMP: added track move up/down buttons.</li>
<li>LMP: rescan fixes.</li>
<li>LMP DumbSync: upload album covers as well.</li>
<li>[381: Monocle]: fixed fitting ratio calculation.</li>
<li>[26: Poshuku]: menus for back/forward history navigation.</li>
<li>Poshuku: reworked bookmarks management UI.</li>
<li>TabsList: handle Enter, Return, Home and End buttons.</li>
<li>[311: TabSessManager]: tabs order is now saved as well.</li>
</ul>"
405,image,Collection statistics,1349369296,,"",""
406,image,Transcoding parameters,1349369916,,"",""
407,image,LMP background blurring,1349371094,,"",""
408,image,Azoth Autopaste,1349371485,,"",""
409,page,Azoth Autopaste,1349371593,plugins-azoth-autopaste,"Azoth Autopaste detects long texts and suggests pasting them to a pastebin service. It allows to choose the desired syntax highlighting (if any) and the exact paste service to use.

[img_assist|nid=408|title=|desc=|link=popup|width=440]","Azoth Autopaste detects long texts and suggests pasting them to a pastebin service. It allows to choose the desired syntax highlighting (if any) and the exact paste service to use.

[img_assist|nid=408|title=|desc=|link=popup|width=440]"
411,image,Azoth file transfer,1349373022,,"",""
412,image,LeechCraft on Mac OS X,1349381453,,"",""
413,story,LeechCraft 0.5.85 is released,1349383241,leechcraft-0.5.85-is-released,"Today LeechCraft 0.5.85 ""Risen Through The Ashes"" is released!

We've released LeechCraft 0.5.80 almost two months ago, and we planned to release 0.5.85 somewhere in mid-September, but the changes are worth the delay.

First of all, it's worth saying in the very beginning that we've merged our QXmpp ""feature fork"" with <a href=""https://code.google.com/p/qxmpp"">upstream QXmpp</a>, so upstream version should be used from now on. In fact, our repo on Github is already deleted to avoid confusion. QXmpp 0.7.4 (and hopefully upper) will do for LeechCraft 0.5.85.

<h2>Mac OS X</h2>

Moreover, LeechCraft can finally be built and run on Mac OS X:
[img_assist|nid=412|title=|desc=|link=popup|width=440]

The resulting <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.85/leechcraft-0.5.85.dmg/download"" target=""_blank"">app bundle</a> is tested on a couple of Mac OS X 10.7 and 10.8 machines and seems to work, though the build is very-very experimental (but seems like it's already much more stable than Windows version). LeechCraft is built using standard toolchain coming with XCode, with the clang compiler.

A new plugin has also been added, Pierre, which deals with Mac OS X integration. For now it only adds a Mac-style menu bar and a button for maximizing LeechCraft into a separate workspace, but more stuff is to come.

And, regarding new plugins, there is [397: Launchy], a new plugin for launching applications and opening LeechCraft tabs. It is UNIX-only and fetches the list of applications from the freedesktop.org desktop files. For now it only supports visual fullscreen launcher, some say it resembles Unity a bit:
[img_assist|nid=396|title=|desc=|link=popup|width=440]

<h2>CleanWeb</h2>

Our AdBlock+-compatible ad blocker, the [27: Poshuku CleanWeb] module, was optimized and improved a lot.

First, now CleanWeb supports a much wider subset of AdBlock+ rules, including separator-based rules and selector-based element hiding for those elements that can't be blocked during load time, like textual ads.

Second, CleanWeb performance was increased by an order of magnitude, and now it optionally supports using PCRE as regexp matching engine, since QRegExps are quite slow. In fact, separator-based rules are only enabled when PCRE is used.

Here are some numbers for rutracker.org main page and EasyList + RuAdList rules, where cummulative time spent matching all rules for all issued requests is measured:
<ul>
<li>Before all optimizations: ≈1500 ms.</li>
<li>After optimizations with QRegExp engine: ≈700 ms.</li>
<li>PCRE: ≈280 ms.</li>
<li>PCRE + JIT (available with PCRE ≥8.20): ≈200 ms.</li>
</ul>
The numbers are self-explanatory.

Moreover, element hiding performance was also measured on a complex <a href=""https://plus.google.com/115250422803614415116/posts/hMT5kW8LKJk"">Google+ page</a>:
<ul>
<li>QRegExp engine: ≈5300 ms.</li>
<li>PCRE: ≈410 ms.</li>
<li>PCRE + JIT: ≈235 ms.</li>
</ul>
Here the difference is even more obvious.

<h2>LMP</h2>

The next (and possibly the biggest) part of this release is [20: LMP], our audio player module (paired with [344: LastFMScrobble] module providing Last.FM integration), which has been improved a lot.

LMP now features revamped radio support and a new plugin, [399: HotStreams], has been added to provide access to tons of radio streams from radio stations like Digitally Imported, SomaFM or from huge streams directory at <a href=""http://dir.xiph.org"">dir.xiph.org</a>:
[img_assist|nid=392|title=|desc=|link=popup|width=440]

Moreover, LMP now is even more social: paired with LastFMScrobble, it is now able to fetch personalized recommended concerts and festivals. Of course, this is location-aware, so only events near you will be shown. It's quite easy to add support for other such social events aggregators, if any.

Playlist loading is now asynchronous, so you may add all your collection to the playlist and the rest of LeechCraft will be usable while all your songs are added. To handle such huge playlists a playlist search has been added. Search is quite intellectual and also counts such fields like genre or album date. Also, playlist memory usage has been optimized: all album art pixmaps are scaled down to 48x48 in the playlist.

Regarding collection, LMP now can remove tracks from collection or erase them from disk. It also watches files and directories in collection for changes, and changed items are automatically rescanned in case, for example, tags have been changed.

Transcoding has been improved. More formats are supported now, like AAC or WMA, and user is free to choose the desired bitrate type (constant or variable). Moreover, the list of supported formats is dynamically fetched from FFmpeg at runtime, so only those formats that will actually work are displayed:
[img_assist|nid=406|title=|desc=|link=popup|width=440]
And, speaking of transcoding and device synchronization, LMP DumbSync subplugin, which is used to upload music to non-MTP and non-iThing devices, now also supports uploading album art with the music.

Collection statistics dialog is also available:
[img_assist|nid=405|title=|desc=|link=popup|width=440]

There are also lots of other fixes and improvements, like improved biography and similar artists templates, with nice effects like background blurring on photo view:
[img_assist|nid=407|title=|desc=|link=popup|width=440]

<h2>NetStoreManager</h2>

Moving on to other plugins, the [313: NetStoreManager] module now supports synchronization, watching the file system for changes to automatically upload new or changed files in watched directories. For now the file system watcher is inotify-only, so this won't work on platforms other than Linux. And, of course, this is quite an experimental feature for now — use at your own risk. 

Drag'n'drop support was also enhanced. Now files can be moved between directories using drag'n'drop, for example.

The Yandex.Narod backend module has been removed: NetStoreManager isn't an ""upload-and-forget"" kind of thing anymore, and the features of the Yandex.Narod service don't match NetStoreManager's aim anymore. Yandex.Narod will be replaced with Yandex.Disk service some time in the future.

<h2>Azoth</h2>

[143: Azoth]'s (our IM client) and [144: Azoth Xoox]'s (XMPP implementation) file transfer capabilities were also improved. Azoth now supports sending files both by protocol means and via modules like NetStoreManager, all from a single handy dialog:
[img_assist|nid=411|title=|desc=|link=popup|width=440]
That's yet one more profit from LeechCraft-style modules integration, by the way.

Also, drag'n'drop support for file sending was improved significantly. Azoth Xoox now supports setting a SOCKS5 file transfer proxy, and by default it autodetects the one offered by the Jabber server.

[409: Azoth Autopaste] module now supports selecting syntax highlighter and choosing the paste service when pasting:
[img_assist|nid=408|title=|desc=|link=popup|width=440]

[214: Azoth Metacontacts] module now shows its pseudo account in the roster only if there are metacontacts.

<h2>Other plugins</h2>

[381: Monocle], our modular document reader, got support for the DjVu format, though quite basic for now, via the Monocle Seen plugin. Seen doesn't support things like table of contents yet, but this will be implemented in next releases.

Among other significant changes:
<ul>
<li>The [310: Liznoo] power management module now supports FreeBSD platform, thanks to the contributions of a guy who chose to remain anonymous.</li>
<li>Settings tab has been cleaned up by moving subplugins' settings into their corresponding parent plugins pages. Moreover, it now supports searching, so only those pages that match the search query will remain enabled.</li>
<li>Core now supports setting startup password, though this security measure isn't recommended because it can be easily circumvented.</li>
<li>[26: Poshuku] now has menus for page history navigation under corresponding buttons, and it features a reworked bookmarks management UI.</li>
</ul>

Of course, there was a bunch of other improvements, and curious ones can see the corresponding development digests: [394: #30], [401: #31] and [403: #32].

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [6: download] page! The source archive is already <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.85/leechcraft-0.5.85.tar.xz/download"">available</a>.","Today LeechCraft 0.5.85 ""Risen Through The Ashes"" is released!

We've released LeechCraft 0.5.80 almost two months ago, and we planned to release 0.5.85 somewhere in mid-September, but the changes are worth the delay.

First of all, it's worth saying in the very beginning that we've merged our QXmpp ""feature fork"" with <a href=""https://code.google.com/p/qxmpp"">upstream QXmpp</a>, so upstream version should be used from now on. In fact, our repo on Github is already deleted to avoid confusion. QXmpp 0.7.4 (and hopefully upper) will do for LeechCraft 0.5.85.

<h2>Mac OS X</h2>

Moreover, LeechCraft can finally be built and run on Mac OS X:
[img_assist|nid=412|title=|desc=|link=popup|width=440]

The resulting <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.85/leechcraft-0.5.85.dmg/download"" target=""_blank"">app bundle</a> is tested on a couple of Mac OS X 10.7 and 10.8 machines and seems to work, though the build is very-very experimental (but seems like it's already much more stable than Windows version). LeechCraft is built using standard toolchain coming with XCode, with the clang compiler.

A new plugin has also been added, Pierre, which deals with Mac OS X integration. For now it only adds a Mac-style menu bar and a button for maximizing LeechCraft into a separate workspace, but more stuff is to come.

And, regarding new plugins, there is [397: Launchy], a new plugin for launching applications and opening LeechCraft tabs. It is UNIX-only and fetches the list of applications from the freedesktop.org desktop files. For now it only supports visual fullscreen launcher, some say it resembles Unity a bit:
[img_assist|nid=396|title=|desc=|link=popup|width=440]

<h2>CleanWeb</h2>

Our AdBlock+-compatible ad blocker, the [27: Poshuku CleanWeb] module, was optimized and improved a lot.

First, now CleanWeb supports a much wider subset of AdBlock+ rules, including separator-based rules and selector-based element hiding for those elements that can't be blocked during load time, like textual ads.

Second, CleanWeb performance was increased by an order of magnitude, and now it optionally supports using PCRE as regexp matching engine, since QRegExps are quite slow. In fact, separator-based rules are only enabled when PCRE is used.

Here are some numbers for rutracker.org main page and EasyList + RuAdList rules, where cummulative time spent matching all rules for all issued requests is measured:
<ul>
<li>Before all optimizations: ≈1500 ms.</li>
<li>After optimizations with QRegExp engine: ≈700 ms.</li>
<li>PCRE: ≈280 ms.</li>
<li>PCRE + JIT (available with PCRE ≥8.20): ≈200 ms.</li>
</ul>
The numbers are self-explanatory.

Moreover, element hiding performance was also measured on a complex <a href=""https://plus.google.com/115250422803614415116/posts/hMT5kW8LKJk"">Google+ page</a>:
<ul>
<li>QRegExp engine: ≈5300 ms.</li>
<li>PCRE: ≈410 ms.</li>
<li>PCRE + JIT: ≈235 ms.</li>
</ul>
Here the difference is even more obvious.

<h2>LMP</h2>

The next (and possibly the biggest) part of this release is [20: LMP], our audio player module (paired with [344: LastFMScrobble] module providing Last.FM integration), which has been improved a lot.

LMP now features revamped radio support and a new plugin, [399: HotStreams], has been added to provide access to tons of radio streams from radio stations like Digitally Imported, SomaFM or from huge streams directory at <a href=""http://dir.xiph.org"">dir.xiph.org</a>:
[img_assist|nid=392|title=|desc=|link=popup|width=440]

Moreover, LMP now is even more social: paired with LastFMScrobble, it is now able to fetch personalized recommended concerts and festivals. Of course, this is location-aware, so only events near you will be shown. It's quite easy to add support for other such social events aggregators, if any.

Playlist loading is now asynchronous, so you may add all your collection to the playlist and the rest of LeechCraft will be usable while all your songs are added. To handle such huge playlists a playlist search has been added. Search is quite intellectual and also counts such fields like genre or album date. Also, playlist memory usage has been optimized: all album art pixmaps are scaled down to 48x48 in the playlist.

Regarding collection, LMP now can remove tracks from collection or erase them from disk. It also watches files and directories in collection for changes, and changed items are automatically rescanned in case, for example, tags have been changed.

Transcoding has been improved. More formats are supported now, like AAC or WMA, and user is free to choose the desired bitrate type (constant or variable). Moreover, the list of supported formats is dynamically fetched from FFmpeg at runtime, so only those formats that will actually work are displayed:
[img_assist|nid=406|title=|desc=|link=popup|width=440]
And, speaking of transcoding and device synchronization, LMP DumbSync subplugin, which is used to upload music to non-MTP and non-iThing devices, now also supports uploading album art with the music.

Collection statistics dialog is also available:
[img_assist|nid=405|title=|desc=|link=popup|width=440]

There are also lots of other fixes and improvements, like improved biography and similar artists templates, with nice effects like background blurring on photo view:
[img_assist|nid=407|title=|desc=|link=popup|width=440]

<h2>NetStoreManager</h2>

Moving on to other plugins, the [313: NetStoreManager] module now supports synchronization, watching the file system for changes to automatically upload new or changed files in watched directories. For now the file system watcher is inotify-only, so this won't work on platforms other than Linux. And, of course, this is quite an experimental feature for now — use at your own risk. 

Drag'n'drop support was also enhanced. Now files can be moved between directories using drag'n'drop, for example.

The Yandex.Narod backend module has been removed: NetStoreManager isn't an ""upload-and-forget"" kind of thing anymore, and the features of the Yandex.Narod service don't match NetStoreManager's aim anymore. Yandex.Narod will be replaced with Yandex.Disk service some time in the future.

<h2>Azoth</h2>

[143: Azoth]'s (our IM client) and [144: Azoth Xoox]'s (XMPP implementation) file transfer capabilities were also improved. Azoth now supports sending files both by protocol means and via modules like NetStoreManager, all from a single handy dialog:
[img_assist|nid=411|title=|desc=|link=popup|width=440]
That's yet one more profit from LeechCraft-style modules integration, by the way.

Also, drag'n'drop support for file sending was improved significantly. Azoth Xoox now supports setting a SOCKS5 file transfer proxy, and by default it autodetects the one offered by the Jabber server.

[409: Azoth Autopaste] module now supports selecting syntax highlighter and choosing the paste service when pasting:
[img_assist|nid=408|title=|desc=|link=popup|width=440]

[214: Azoth Metacontacts] module now shows its pseudo account in the roster only if there are metacontacts.

<h2>Other plugins</h2>

[381: Monocle], our modular document reader, got support for the DjVu format, though quite basic for now, via the Monocle Seen plugin. Seen doesn't support things like table of contents yet, but this will be implemented in next releases.

Among other significant changes:
<ul>
<li>The [310: Liznoo] power management module now supports FreeBSD platform, thanks to the contributions of a guy who chose to remain anonymous.</li>
<li>Settings tab has been cleaned up by moving subplugins' settings into their corresponding parent plugins pages. Moreover, it now supports searching, so only those pages that match the search query will remain enabled.</li>
<li>Core now supports setting startup password, though this security measure isn't recommended because it can be easily circumvented.</li>
<li>[26: Poshuku] now has menus for page history navigation under corresponding buttons, and it features a reworked bookmarks management UI.</li>
</ul>

Of course, there was a bunch of other improvements, and curious ones can see the corresponding development digests: [394: #30], [401: #31] and [403: #32].

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [6: download] page! The source archive is already <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.85/leechcraft-0.5.85.tar.xz/download"">available</a>."
415,image,Hypes view in LMP,1356128294,,"",""
416,image,BitTorrent tab with peers list,1356129254,,"",""
417,image,BitTorrent tab,1356129322,,"",""
418,image,Torrents in Summary,1356129344,,"",""
419,image,Scaled SB2,1356129527,,This screenshot illustrates the seamless upscaling of SB2 contents.,This screenshot illustrates the seamless upscaling of SB2 contents.
420,image,Lemon chart,1356129583,,"",""
421,image,SB2 launcher,1356129678,,"",""
422,image,Artist biography & discography,1356130024,,[20: LMP] showing artist biography and discography (fetched via MusicBrainz plugin).,[20: LMP] showing artist biography and discography (fetched via MusicBrainz plugin).
423,image,Poshuku XML highlighting,1356130313,,"",""
424,image,Azoth datafilters search,1356130416,,"",""
425,image,Lemon indicators & clock,1356130977,,"",""
426,image,TPI,1356132048,,Task Progress Indicator plugin.,Task Progress Indicator plugin.
427,image,Zion Reversed color scheme,1356132268,,"",""
428,image,Blue Silence color scheme,1356132285,,"",""
429,page,MusicZombie,1356132872,plugins-musiczombie,"MusicZombie is the MusicBrainz service client. It allows other plugins like [20: LMP] to fetch, for example, artists' discographies.","MusicZombie is the MusicBrainz service client. It allows other plugins like [20: LMP] to fetch, for example, artists' discographies."
431,page,TouchStreams,1384854007,plugins-touchstreams,"TouchStreams it the VK.com client for streaming audio from this social network. It allows other plugins like [20: LMP] to query for available tracks given artist name, track name or a free-form string and returns the tracks available for streaming. It also provides your and your friends' audios as radio stations for streaming.

<h2>Features</h2>

<ul>
<li>Searching for audio in VKontakte.</li>
<li>Fetching your audio tracks and the tracks of your friends and offer them for streaming.</li>
</ul>

Please note this plugin doesn't offer any GUI, the features above are only available via other plugins like [20: LMP]. You'll also need a VKontakte account for the plugin to work.","TouchStreams it the VK.com client for streaming audio from this social network. It allows other plugins like [20: LMP] to query for available tracks given artist name, track name or a free-form string and returns the tracks available for streaming. It also provides your and your friends' audios as radio stations for streaming.

<h2>Features</h2>

<ul>
<li>Searching for audio in VKontakte.</li>
<li>Fetching your audio tracks and the tracks of your friends and offer them for streaming.</li>
</ul>

Please note this plugin doesn't offer any GUI, the features above are only available via other plugins like [20: LMP]. You'll also need a VKontakte account for the plugin to work."
433,page,SB2,1379105915,plugins-sb2,"SB2 is the next generation side panel for LeechCraft.

It allows one to open and navigate between tabs (highlighting active and opened tabs), it also provides tray and quick launch areas, LeechCraft menu, and it also hosts widgets from other plugins called quarks.

Quarks can be placed in arbitrary order and configured on a per-window basis.

The following quarks are available, except those bundled with SB2:
<ul>
<li>[154: GMail Notifier] for displaying emails in a mailbox.</li>
<li>[508: Krigstask] for a taskbar and desktop pager.</li>
<li>[397: Launchy] third-party application launcher.</li>
<li>[437: Lemon] for network interfaces monitoring.</li>
<li>[510: Mellonetray] for system tray.</li>
<li>[435: TPI] for tracking ongoing tasks.</li>
</ul>

Other quarks may be installed via [153: LackMan].

<h2>Screenshots</h2>
[img_assist|nid=498|title=Tab manager|desc=|link=popup|width=440]

[img_assist|nid=499|title=Task Progress Indicator quark|desc=|link=popup|width=440]","SB2 is the next generation side panel for LeechCraft.

It allows one to open and navigate between tabs (highlighting active and opened tabs), it also provides tray and quick launch areas, LeechCraft menu, and it also hosts widgets from other plugins called quarks.

Quarks can be placed in arbitrary order and configured on a per-window basis.

The following quarks are available, except those bundled with SB2:
<ul>
<li>[154: GMail Notifier] for displaying emails in a mailbox.</li>
<li>[508: Krigstask] for a taskbar and desktop pager.</li>
<li>[397: Launchy] third-party application launcher.</li>
<li>[437: Lemon] for network interfaces monitoring.</li>
<li>[510: Mellonetray] for system tray.</li>
<li>[435: TPI] for tracking ongoing tasks.</li>
</ul>

Other quarks may be installed via [153: LackMan].

<h2>Screenshots</h2>
[img_assist|nid=498|title=Tab manager|desc=|link=popup|width=440]

[img_assist|nid=499|title=Task Progress Indicator quark|desc=|link=popup|width=440]"
435,page,TPI,1378908955,plugins-tpi,"TPI (short for Task Progress Indicator) allows keeping track of ongoing tasks, be it BitTorrent downloads, XMPP file transfers or anything else.

It adds a quark to panels like [433: SB2] with a progress bar for each ongoing task, and more detailed list is shown on hover.
[img_assist|nid=499|title=|desc=|link=popup|width=440]","TPI (short for Task Progress Indicator) allows keeping track of ongoing tasks, be it BitTorrent downloads, XMPP file transfers or anything else.

It adds a quark to panels like [433: SB2] with a progress bar for each ongoing task, and more detailed list is shown on hover.
[img_assist|nid=499|title=|desc=|link=popup|width=440]"
437,page,Lemon,1356134315,plugins-lemon,"Lemon is LeechCraft Network Monitor. It provides a quark for panels like [433: SB2] and traffic graphs.

The quark displays an indicator per active network interface with a bar for upload/download activity:
[img_assist|nid=425|title=|desc=|link=popup|width=440]

A graph with RX/TX speeds is available by clicking on the corresponding indicator:
[img_assist|nid=420|title=|desc=|link=popup|width=440]","Lemon is LeechCraft Network Monitor. It provides a quark for panels like [433: SB2] and traffic graphs.

The quark displays an indicator per active network interface with a bar for upload/download activity:
[img_assist|nid=425|title=|desc=|link=popup|width=440]

A graph with RX/TX speeds is available by clicking on the corresponding indicator:
[img_assist|nid=420|title=|desc=|link=popup|width=440]"
439,image,Blogique,1356145469,,"",""
440,story,LeechCraft 0.5.90 is released,1356155715,leechcraft-0.5.90-is-released,"LeechCraft 0.5.90 ""Architect of The Apocalypse"" is released!

This is one more ""long"" milestone — more than two months have passed since LeechCraft 0.5.85, but we've done quite enormous amount of work and we are proud to present this release.

<h2>LMP</h2>

[20: LeechCraft Music Player] got some new tasty features and improvements, particularly coupled with our new plugins [429: MusicZombie] and [431: TouchStreams], providing access to MusicBrainz database and VK.com audio collection respectively.

For example, if MusicZombie plugin is present, LMP can show the discography and tracklist in biography view and in recent releases view:
[img_assist|nid=422|title=|desc=|link=popup|width=440]
[img_assist|nid=375|title=|desc=|link=popup|width=440]

Paired with TouchStreams plugin it can also automatically start streaming tracks from VK.com (but that requires an active VK.com account, at least for now) from a variety of places, like similar artists, recommendations, recent releases and hypes. Generally a loudspeaker icon appears near an item if it can be streamed:
[img_assist|nid=415|title=|desc=|link=popup|width=440]

By the way, fetching hyped artists and tracks — both most popular and most growing ones — is another new feature of LMP in this release, so you can stay tuned to all new trends with LMP!

Thanks to the modular architecture of LeechCraft, adding another music database (instead of MusicBrainz) or another stream source (instead of VK.com) is just a matter of writing corresponding MusicZombie- or TouchStreams-like plugins without ever touching LMP.

LMP was also optimized a lot:
<ul>
<li>library loading became about two orders of magnitude faster;</li>
<li>file modification time is considered now when rescanning, so collection rescans on file changes are much, much faster now, as well as collection rescans on startup.</li>
</ul>

<h2>SB2</h2>

Here we come to the greatest part of this release: the new [433: SB2] plugin, which is our next-generation sidebar. Its UI is implemented entirely in QML, which allows one to write nice, informative and fancy widgets (or, as we call the, <em>quarks</em>) with animation and runtime graphics generation, which was nearly impossible with the old QAction-based sidebar. Quarks can be written either entirely in QML or in hybrid approach, where the logic is implemented in C++ and QML is for presentation only.

SB2 offers plugin launcher (with neat indication of what tabs are already opened, and a quick switcher between those), tray and quick launch areas and almost everything that the old sidebar was capable of, and more:
[img_assist|nid=421|title=|desc=|link=popup|width=440]

There are already some quarks exclusive to SB2, like the [435: TPI] plugin, standing for Task Progress Indicator:
[img_assist|nid=426|title=|desc=|link=popup|width=440]
or [437: Lemon], which monitors traffic usage on network interfaces:
[img_assist|nid=420|title=|desc=|link=popup|width=440]

Of course, no such thing goes without analog clock, which will be available through [153: LackMan] package manager. Here it is near Lemon indicators:
[img_assist|nid=425|title=|desc=|link=popup|width=440]

TPI and Lemon have parts written in C++, but the analog clock quark is in pure QML, which allows us to deliver it via LackMan.

SB2's intrinsic vector nature also allows it to be scaled without any problems:
[img_assist|nid=419|title=|desc=|link=popup|width=440]

SB2 also lays foundation for things we'd like to implement in next versions. For example, we have plans for a Dashboard tab which will also contain quarks ranging from yet one more analog clock to, say, RSS quark, weather quark or calendar with social networks integration. This somewhat resembles KDE's Plasma (and, in fact, is partially inspired by Plasma, hence the name).

<h2>Color themes</h2>

Due to increasing usage of QML in LeechCraft, support for color themes has been added. These themes are based off KDE's ones, but also offer more colors to customize all those QML things, for example, in LMP and SB2:
[img_assist|nid=427|title=|desc=|link=popup|width=440]
[img_assist|nid=428|title=|desc=|link=popup|width=440]

<h2>Blogique</h2>

Another new plugin in this release is Blogique, a modular blogging client. For now it only works with LiveJournal via the Metida subplugin, which already supports all post fields available ranging from the post body itself to mood, location and avatar. It also supports fetching all the entries from a blog as well as local drafts and backups:

[img_assist|nid=439|title=|desc=|link=popup|width=440]

LHTR module is used for editing (potentially any other editor can be used, if written), providing WYSIWYG functionality.

Adding other blog engines is fairly easy — it's just a matter of adding another backend subplugin (much like protocols are added to Azoth or formats are added to Monocle). No post options are hardcoded into Blogique core, so the UI displays only what's supported by exact blogging engine.

<h2>BitTorrent</h2>

Only five years have passed since the introduction of the [10: BitTorrent plugin], and as many users asked we've finally moved it to a separate tab:
[img_assist|nid=416|title=|desc=|link=popup|width=440]
[img_assist|nid=417|title=|desc=|link=popup|width=440]

Only basic info is left in [25: Summary]:
[img_assist|nid=418|title=|desc=|link=popup|width=440]

Also, the code has been migrated to the new libtorrent 0.16 API where possible, but it's still compatible with libtorrent 0.15.

<h2>Data filters architecture</h2>

A new concept of data filters have been added.

Basically, a data filter plugin is everything that can eat some text, an image, or anything, and produce a meaningful result. For example, Pogooglue plugin, which takes a string and opens a web browser window for Googling that string, is conceptually a data filter. [23: SeekThru] module, which provides OpenSearch support, is a data filter as well. In this milestone this concept has been unified, and SeekThru and Pogooglue implement all the respective interfaces.

What that means for a user — there is a context menu in [143: Azoth] or [26: Poshuku] that offers to handle selected text with text-supporting data filters:
[img_assist|nid=424|title=|desc=|link=popup|width=440]

In future more data filters will be added, for example, an image filter that uploads its input to an imagebin, or another image filter that applies blur and posts the image to Instagram.

<h2>Other plugins</h2>

[381: Monocle] document reader now supports PostScript documents, and format backend selection is now content-based, not extension-based. Monocle now also supports smooth scrolling, and a few issues have been fixed.

Poshuku browser now properly formats and highlights XML instead of showing it as-is:
[img_assist|nid=423|title=|desc=|link=popup|width=440]

Among other significant changes:
<ul>
<li>[143: Azoth], our modular IM client, got a bunch of small fixes and improvements, particularly, its load time has been optimized a lot.</li>
<li>[155: Kinotify] window styles have been fixed on Mac OS X.</li>
<li>[310: Liznoo] power manager now supports Mac OS X.</li>
<li>Pierre plugin now supports displaying a badge on Mac OS X labels.</li>
<li>A bunch of .desktop-files have been added, so now you can open torrents, PDFs, and XMPP links in LeechCraft from any other application that's FreeDesktop-compliant.</li>
<li>libotr-4 compatibility in Azoth OTRoid.</li>
</ul>

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [5: download page]! The source archive is already <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.90/leechcraft-0.5.90.tar.xz/download"">available</a>.","LeechCraft 0.5.90 ""Architect of The Apocalypse"" is released!

This is one more ""long"" milestone — more than two months have passed since LeechCraft 0.5.85, but we've done quite enormous amount of work and we are proud to present this release.

<h2>LMP</h2>

[20: LeechCraft Music Player] got some new tasty features and improvements, particularly coupled with our new plugins [429: MusicZombie] and [431: TouchStreams], providing access to MusicBrainz database and VK.com audio collection respectively.

For example, if MusicZombie plugin is present, LMP can show the discography and tracklist in biography view and in recent releases view:
[img_assist|nid=422|title=|desc=|link=popup|width=440]
[img_assist|nid=375|title=|desc=|link=popup|width=440]

Paired with TouchStreams plugin it can also automatically start streaming tracks from VK.com (but that requires an active VK.com account, at least for now) from a variety of places, like similar artists, recommendations, recent releases and hypes. Generally a loudspeaker icon appears near an item if it can be streamed:
[img_assist|nid=415|title=|desc=|link=popup|width=440]

By the way, fetching hyped artists and tracks — both most popular and most growing ones — is another new feature of LMP in this release, so you can stay tuned to all new trends with LMP!

Thanks to the modular architecture of LeechCraft, adding another music database (instead of MusicBrainz) or another stream source (instead of VK.com) is just a matter of writing corresponding MusicZombie- or TouchStreams-like plugins without ever touching LMP.

LMP was also optimized a lot:
<ul>
<li>library loading became about two orders of magnitude faster;</li>
<li>file modification time is considered now when rescanning, so collection rescans on file changes are much, much faster now, as well as collection rescans on startup.</li>
</ul>

<h2>SB2</h2>

Here we come to the greatest part of this release: the new [433: SB2] plugin, which is our next-generation sidebar. Its UI is implemented entirely in QML, which allows one to write nice, informative and fancy widgets (or, as we call the, <em>quarks</em>) with animation and runtime graphics generation, which was nearly impossible with the old QAction-based sidebar. Quarks can be written either entirely in QML or in hybrid approach, where the logic is implemented in C++ and QML is for presentation only.

SB2 offers plugin launcher (with neat indication of what tabs are already opened, and a quick switcher between those), tray and quick launch areas and almost everything that the old sidebar was capable of, and more:
[img_assist|nid=421|title=|desc=|link=popup|width=440]

There are already some quarks exclusive to SB2, like the [435: TPI] plugin, standing for Task Progress Indicator:
[img_assist|nid=426|title=|desc=|link=popup|width=440]
or [437: Lemon], which monitors traffic usage on network interfaces:
[img_assist|nid=420|title=|desc=|link=popup|width=440]

Of course, no such thing goes without analog clock, which will be available through [153: LackMan] package manager. Here it is near Lemon indicators:
[img_assist|nid=425|title=|desc=|link=popup|width=440]

TPI and Lemon have parts written in C++, but the analog clock quark is in pure QML, which allows us to deliver it via LackMan.

SB2's intrinsic vector nature also allows it to be scaled without any problems:
[img_assist|nid=419|title=|desc=|link=popup|width=440]

SB2 also lays foundation for things we'd like to implement in next versions. For example, we have plans for a Dashboard tab which will also contain quarks ranging from yet one more analog clock to, say, RSS quark, weather quark or calendar with social networks integration. This somewhat resembles KDE's Plasma (and, in fact, is partially inspired by Plasma, hence the name).

<h2>Color themes</h2>

Due to increasing usage of QML in LeechCraft, support for color themes has been added. These themes are based off KDE's ones, but also offer more colors to customize all those QML things, for example, in LMP and SB2:
[img_assist|nid=427|title=|desc=|link=popup|width=440]
[img_assist|nid=428|title=|desc=|link=popup|width=440]

<h2>Blogique</h2>

Another new plugin in this release is Blogique, a modular blogging client. For now it only works with LiveJournal via the Metida subplugin, which already supports all post fields available ranging from the post body itself to mood, location and avatar. It also supports fetching all the entries from a blog as well as local drafts and backups:

[img_assist|nid=439|title=|desc=|link=popup|width=440]

LHTR module is used for editing (potentially any other editor can be used, if written), providing WYSIWYG functionality.

Adding other blog engines is fairly easy — it's just a matter of adding another backend subplugin (much like protocols are added to Azoth or formats are added to Monocle). No post options are hardcoded into Blogique core, so the UI displays only what's supported by exact blogging engine.

<h2>BitTorrent</h2>

Only five years have passed since the introduction of the [10: BitTorrent plugin], and as many users asked we've finally moved it to a separate tab:
[img_assist|nid=416|title=|desc=|link=popup|width=440]
[img_assist|nid=417|title=|desc=|link=popup|width=440]

Only basic info is left in [25: Summary]:
[img_assist|nid=418|title=|desc=|link=popup|width=440]

Also, the code has been migrated to the new libtorrent 0.16 API where possible, but it's still compatible with libtorrent 0.15.

<h2>Data filters architecture</h2>

A new concept of data filters have been added.

Basically, a data filter plugin is everything that can eat some text, an image, or anything, and produce a meaningful result. For example, Pogooglue plugin, which takes a string and opens a web browser window for Googling that string, is conceptually a data filter. [23: SeekThru] module, which provides OpenSearch support, is a data filter as well. In this milestone this concept has been unified, and SeekThru and Pogooglue implement all the respective interfaces.

What that means for a user — there is a context menu in [143: Azoth] or [26: Poshuku] that offers to handle selected text with text-supporting data filters:
[img_assist|nid=424|title=|desc=|link=popup|width=440]

In future more data filters will be added, for example, an image filter that uploads its input to an imagebin, or another image filter that applies blur and posts the image to Instagram.

<h2>Other plugins</h2>

[381: Monocle] document reader now supports PostScript documents, and format backend selection is now content-based, not extension-based. Monocle now also supports smooth scrolling, and a few issues have been fixed.

Poshuku browser now properly formats and highlights XML instead of showing it as-is:
[img_assist|nid=423|title=|desc=|link=popup|width=440]

Among other significant changes:
<ul>
<li>[143: Azoth], our modular IM client, got a bunch of small fixes and improvements, particularly, its load time has been optimized a lot.</li>
<li>[155: Kinotify] window styles have been fixed on Mac OS X.</li>
<li>[310: Liznoo] power manager now supports Mac OS X.</li>
<li>Pierre plugin now supports displaying a badge on Mac OS X labels.</li>
<li>A bunch of .desktop-files have been added, so now you can open torrents, PDFs, and XMPP links in LeechCraft from any other application that's FreeDesktop-compliant.</li>
<li>libotr-4 compatibility in Azoth OTRoid.</li>
</ul>

Packages and builds for supported distros and OSes will be available soon. Watch your package manager or our [5: download page]! The source archive is already <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.90/leechcraft-0.5.90.tar.xz/download"">available</a>."
443,book,Integrating with other plugins,1364888732,development-integrating,"This section describes how your plugin can be integrated with other LeechCraft plugins and facilities, from notifications to SB2.","This section describes how your plugin can be integrated with other LeechCraft plugins and facilities, from notifications to SB2."
444,story,Moving to Boost Software License,1366452658,moving-to-bsl,"LeechCraft is now licensed under Boost Software License. It is a lax license based on the MIT license with several <a href=""http://ideas.opensource.org/ticket/45"">improvements</a>.

Boost Software License is fully GPL-compatible, though it doesn't really matter in LeechCraft case since it doesn't use GPL libraries at all, with the only exception for now being libsensors for the HotSensors module.

We've thought about relicensing and moving from a copyleft license GPL for quite a long time already, and there are several reasons for it:
<ul>
<li>Freedom as in lax licenses is closer to our own understanding of freedom. We would have used WTFPL is it were more strict from the formal language point of view.</li>
<li>Having such a license allows us to borrow parts of our code into our other closed-source projects that we do for living, some of them being proprietary. And this way we don't have to deal with things like double-licensing.</li>
<li>Such license also in theory would allow companies who wish to use LeechCraft in their proprietary stuff to again not deal with double-licensing or GPL obligations.</li>
</ul>

The last point maybe requires a bit more explanation. LeechCraft codebase is big and complicated enough for companies who wish to use it in their products to hire LeechCraft developers instead of working on it on their own. A non-copyleft license is typically preferred by organizations, since it doesn't place a burden to open proprietary products' sources, while the original LeechCraft version can stay open and enjoy the enhancements done on organizations' funding.

Either way, it's a win-win for the community, getting more enhancements, and for developers, who can get paid for their work on LeechCraft.","LeechCraft is now licensed under Boost Software License. It is a lax license based on the MIT license with several <a href=""http://ideas.opensource.org/ticket/45"">improvements</a>.

Boost Software License is fully GPL-compatible, though it doesn't really matter in LeechCraft case since it doesn't use GPL libraries at all, with the only exception for now being libsensors for the HotSensors module.

We've thought about relicensing and moving from a copyleft license GPL for quite a long time already, and there are several reasons for it:
<ul>
<li>Freedom as in lax licenses is closer to our own understanding of freedom. We would have used WTFPL is it were more strict from the formal language point of view.</li>
<li>Having such a license allows us to borrow parts of our code into our other closed-source projects that we do for living, some of them being proprietary. And this way we don't have to deal with things like double-licensing.</li>
<li>Such license also in theory would allow companies who wish to use LeechCraft in their proprietary stuff to again not deal with double-licensing or GPL obligations.</li>
</ul>

The last point maybe requires a bit more explanation. LeechCraft codebase is big and complicated enough for companies who wish to use it in their products to hire LeechCraft developers instead of working on it on their own. A non-copyleft license is typically preferred by organizations, since it doesn't place a burden to open proprietary products' sources, while the original LeechCraft version can stay open and enjoy the enhancements done on organizations' funding.

Either way, it's a win-win for the community, getting more enhancements, and for developers, who can get paid for their work on LeechCraft."
446,image,LeechCraft on multiple monitors,1367144706,,"",""
447,image,LMP Graffiti,1367165620,,"",""
448,image,Monocle with TOC and search,1367146914,,"Monocle with a PDF document loaded, its table of contents and a pending search.","Monocle with a PDF document loaded, its table of contents and a pending search."
449,image,Thumbs in Monocle,1367146893,,"",""
450,image,A PDF documents with forms in Monocle,1367146876,,"",""
451,image,SB2 quark reordering,1367147209,,"",""
452,story,LeechCraft 0.5.95 is released,1367172793,leechcraft-0.5.95-is-released,"LeechCraft 0.5.95 ""Hate Creation"" is finally released!

It took us more than four months and more than 1400 commits to make this release happen, but it is worth it: we've implemented quite a few new tasty features, some of them being requested for quite a long time, and we've also fixed a whole bunch of things, from small annoying artifacts to nasty crashes. Moreover, this is the first release under the new Boost Software License.

<h2>Global changes</h2>

First of all, we've finally added multiple windows support to LeechCraft, so now you can have all your IM chats in one window and web pages in another one. LeechCraft has an option to open each tab class in its own window automatically, so it will throw private chats in one window, conferences in another one and, say, documents opened in Monocle into third one. Moreover, this feature is very useful for those having multiple monitors: one can put a long article to read or documentation pages on one monitor and leave primary LeechCraft window on another one:
[img_assist|nid=446|title=|desc=|link=popup|width=660]

Plugins also support this new multiple windows feature. For example, [433: SB2] will keep different settings like panel placement and quarks list for each window.

The multiple windows feature is still very experimental and may lead to segfaults. Please report any problems with it!

Dock widgets management was improved considerably. Now only one dock can be visible at a time on each side of each LeechCraft window, and the dock windows are toggled via the corresponding toolbars or SB2 if it is available.

Plugins with the most improvements are, as always, [143: Azoth], the IM client, [20: LMP], the media player, [381: Monocle], the document reader, and [433: SB2], the next-generation sidebar plugin.

<h2>Azoth</h2>

Azoth IM client became more keyboard-friendly with shortcuts for showing quick navigation list with current MUC participants or contacts from the whole roster, or for opening last detected link in a chat. It also saves whether formatted messages are enabled for separate contacts now, so you can have formatting disabled Azoth-wide and enabled for separate contacts only, so next time chat tabs with those contacts are opened, Azoth will automatically enable formatted messages. It is much faster and stable now as well.

Azoth' subplugins were also improved. For example, [145: Acetamide], the IRC protocol plugin, now supports querying the list of channels on a server. [196: AdiumStyles] was optimized a lot. [163: ChatHistory] module loads history way faster now. [191: Modnok], the LaTeX renderer, supports settings custom background colors and disabling antialiasing. [144: Xoox], the XMPP support plugin, got most fixes: it now supports properly changing account password, forwards XHTML-IM message body in Ad-Hoc commands and exposes TLS settings. It also has an option for turning off requests for VCards and versions in MUCs, considerably reducing traffic usage and server load in conferences.

And good news for some users of protocols currently not supported by Azoth: work on a new plugin, [453: VelvetBird], has been started. VelvetBird is basically a wrapper around libpurple adding support for protocols supported by it to Azoth. It is in its very early stages now, some vitally important features are still missing (working with authorization/subscription, for instance, is still somewhat experimental), but some LeechCraft users already use it as well and are generally happy with it.

<h2>LMP</h2>

LMP, the audio player for LeechCraft, has been improved a lot as well. It now has a proper album art manager, supports showing artist browser from a bunch of various places, supports previewing whole albums from sites like VKontakte (if discography if available via plugins like [344: LastFMScrobble] and [429: MusicZombie]).

LMP also has got a new subplugin, LMP Graffiti, which allows one to tag audio files, split CUE files into separate tracks and obtain tags for files from services like MusicBrainz via audio fingerprinting (if corresponding plugins are installed):
[img_assist|nid=447|title=|desc=|link=popup|width=440]

<h2>Monocle</h2>

Monocle document reader now supports a bunch of new things:
<ul>
<li>page thumbnails (with visually highlighting the currently displaying area);</li>
<li>bookmarks;</li>
<li>forms for PDF files;</li>
<li>text searching.</ul>
</ul>

[img_assist|nid=448|title=|desc=|link=popup|width=440]
[img_assist|nid=449|title=|desc=|link=popup|width=440]
[img_assist|nid=450|title=|desc=|link=popup|width=440]

Monocle also allows searching for selected text via text searchers like Pogooglue or [23: SeekThru] OpenSearch client.

A lot of behavior issues (mostly keeping state between Monocle launches) were fixed as well. Monocle FXB, the fb2 format plugin, has been optimized two-fold on a typical fb2 book.

<h2>SB2</h2>

SB2 now supports placing the panel in any window side, not only left one. It also supports removing and reordering quarks now, and the quarks can have settings as well:
[img_assist|nid=451|title=|desc=|link=popup|width=440]

Panel placement preferences, as well as quark list, order and quark settings can be different for different windows.

<h2>Other plugins</h2>

Blogique, the blog client, now supports such features as autosaving, tab unclosing and session management with the [311: TabSessManager] plugin or showing recent comments and inbox messages. It also supports keeping a local blog now.

GActs, the module for supporting global shortcuts, now bundles a patched copy of required Qxt files with it. The patches add support for assigning media keys to global shortcuts, a thing that upstream Qxt misses (and seems to not accept the proposed patch for several years already). GActs still supports building with system Qxt instead of bundled one, but in this case one misses this media keys feature.

[397: Launchy] module now supports favorites category where applications and LeechCraft tabs can be added. Favorites will be shown in quick launch area in SB2, if the corresponding quark is enabled:
[img_assist|nid=455|title=|desc=|link=popup|width=440]

Launchy now also supports keyboard navigation as well as filtering the list of applications by name, description or name of the executable.

[313: NetStoreManager] module (responsible for cloud storages support) was reworked quite a bit. For example, there were several stability improvements and older tree-based interface was replaced by a more Total Commander-like thing.

Among other changes:
<ul>
<li>[7: Aggregator] module got a major speedup.</li>
<li>LHTR visual editor plugin now supports tables and some other features.</li>
<li>[154: GMail Notifier] module now supports showing a quark with the list of mail in the mailbox.</li>
<li>[310: Liznoo] power manager has extended support for Mac OS now, with things like querying battery voltage or temperature.</li>
<li>A new module has been added which provides a quark with temperatures readings from libsensors: HotSensors. It is experimental for now and is known to crash sometimes during heavy system load in Qt internals.</li>
<li>[26: Poshuku] history widget has been fixed, supporting filtering by URL and eliminating duplicates in the same section.</li>
<li>[366: Vrooby] module now supports UDisks2 and supports building with several backends at once, trying them in order at run time.</li>
</ul>

Several old and unsupported plugins were removed, among them:
<ul>
<li>EiskaltDC++, the DirectConnect-client.</li>
<li>LCFTP, the FTP client.</li>
<li>TransparentArch, stub for easy access to archives contents.</li>
<li>VFSCore, virtual file system implementation. This module had to be removed because the functionality it relied on is unavailable in Qt 5 and there are no alternatives.</li>
<li>Tab++, being replaced by TabsList and SB2.</li>
</ul>

These plugins were extracted into separate repositories, keeping all the revisions that relate to them in case someone would take them over.

And now we are even closer to having a working LeechCraft installation on Windows. For that, we had to migrate to the MinGW toolchain, since MSVS' support for C++11 standard is pretty crappy yet.

Source tarball is already <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.95/leechcraft-0.5.95.tar.xz/download"">available</a>, so is <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.95/leechcraft-0.5.95.dmg/download"">Mac OS X build</a>. Packages for various Linux distros will be available later.

This is the last feature release in the 0.6 series, all other releases until 0.6.0 will have no new features, only bug fixes. In fact, there will be a separate branch for 0.6, and while the main development with all new tasty things will happen in master, only bugfixes will be ported to the 0.6 branch.

And now it's time for a couple of words about future plans. First of all, we won't support Qt 5 until at least Qt 5.1 is released: Qt is still to buggy, and it is insane to try to port quite a big and complex codebase like LeechCraft to such thing for now. Then, we have some awesome ideas for the upcoming 0.7 series after the feature freeze, ranging from new plugins like finance manager and data sources concept to full-blown desktop environment based on LeechCraft running out of the box and without aid of things like KDE and friends. Stay tuned!","LeechCraft 0.5.95 ""Hate Creation"" is finally released!

It took us more than four months and more than 1400 commits to make this release happen, but it is worth it: we've implemented quite a few new tasty features, some of them being requested for quite a long time, and we've also fixed a whole bunch of things, from small annoying artifacts to nasty crashes. Moreover, this is the first release under the new Boost Software License.

<h2>Global changes</h2>

First of all, we've finally added multiple windows support to LeechCraft, so now you can have all your IM chats in one window and web pages in another one. LeechCraft has an option to open each tab class in its own window automatically, so it will throw private chats in one window, conferences in another one and, say, documents opened in Monocle into third one. Moreover, this feature is very useful for those having multiple monitors: one can put a long article to read or documentation pages on one monitor and leave primary LeechCraft window on another one:
[img_assist|nid=446|title=|desc=|link=popup|width=660]

Plugins also support this new multiple windows feature. For example, [433: SB2] will keep different settings like panel placement and quarks list for each window.

The multiple windows feature is still very experimental and may lead to segfaults. Please report any problems with it!

Dock widgets management was improved considerably. Now only one dock can be visible at a time on each side of each LeechCraft window, and the dock windows are toggled via the corresponding toolbars or SB2 if it is available.

Plugins with the most improvements are, as always, [143: Azoth], the IM client, [20: LMP], the media player, [381: Monocle], the document reader, and [433: SB2], the next-generation sidebar plugin.

<h2>Azoth</h2>

Azoth IM client became more keyboard-friendly with shortcuts for showing quick navigation list with current MUC participants or contacts from the whole roster, or for opening last detected link in a chat. It also saves whether formatted messages are enabled for separate contacts now, so you can have formatting disabled Azoth-wide and enabled for separate contacts only, so next time chat tabs with those contacts are opened, Azoth will automatically enable formatted messages. It is much faster and stable now as well.

Azoth' subplugins were also improved. For example, [145: Acetamide], the IRC protocol plugin, now supports querying the list of channels on a server. [196: AdiumStyles] was optimized a lot. [163: ChatHistory] module loads history way faster now. [191: Modnok], the LaTeX renderer, supports settings custom background colors and disabling antialiasing. [144: Xoox], the XMPP support plugin, got most fixes: it now supports properly changing account password, forwards XHTML-IM message body in Ad-Hoc commands and exposes TLS settings. It also has an option for turning off requests for VCards and versions in MUCs, considerably reducing traffic usage and server load in conferences.

And good news for some users of protocols currently not supported by Azoth: work on a new plugin, [453: VelvetBird], has been started. VelvetBird is basically a wrapper around libpurple adding support for protocols supported by it to Azoth. It is in its very early stages now, some vitally important features are still missing (working with authorization/subscription, for instance, is still somewhat experimental), but some LeechCraft users already use it as well and are generally happy with it.

<h2>LMP</h2>

LMP, the audio player for LeechCraft, has been improved a lot as well. It now has a proper album art manager, supports showing artist browser from a bunch of various places, supports previewing whole albums from sites like VKontakte (if discography if available via plugins like [344: LastFMScrobble] and [429: MusicZombie]).

LMP also has got a new subplugin, LMP Graffiti, which allows one to tag audio files, split CUE files into separate tracks and obtain tags for files from services like MusicBrainz via audio fingerprinting (if corresponding plugins are installed):
[img_assist|nid=447|title=|desc=|link=popup|width=440]

<h2>Monocle</h2>

Monocle document reader now supports a bunch of new things:
<ul>
<li>page thumbnails (with visually highlighting the currently displaying area);</li>
<li>bookmarks;</li>
<li>forms for PDF files;</li>
<li>text searching.</ul>
</ul>

[img_assist|nid=448|title=|desc=|link=popup|width=440]
[img_assist|nid=449|title=|desc=|link=popup|width=440]
[img_assist|nid=450|title=|desc=|link=popup|width=440]

Monocle also allows searching for selected text via text searchers like Pogooglue or [23: SeekThru] OpenSearch client.

A lot of behavior issues (mostly keeping state between Monocle launches) were fixed as well. Monocle FXB, the fb2 format plugin, has been optimized two-fold on a typical fb2 book.

<h2>SB2</h2>

SB2 now supports placing the panel in any window side, not only left one. It also supports removing and reordering quarks now, and the quarks can have settings as well:
[img_assist|nid=451|title=|desc=|link=popup|width=440]

Panel placement preferences, as well as quark list, order and quark settings can be different for different windows.

<h2>Other plugins</h2>

Blogique, the blog client, now supports such features as autosaving, tab unclosing and session management with the [311: TabSessManager] plugin or showing recent comments and inbox messages. It also supports keeping a local blog now.

GActs, the module for supporting global shortcuts, now bundles a patched copy of required Qxt files with it. The patches add support for assigning media keys to global shortcuts, a thing that upstream Qxt misses (and seems to not accept the proposed patch for several years already). GActs still supports building with system Qxt instead of bundled one, but in this case one misses this media keys feature.

[397: Launchy] module now supports favorites category where applications and LeechCraft tabs can be added. Favorites will be shown in quick launch area in SB2, if the corresponding quark is enabled:
[img_assist|nid=455|title=|desc=|link=popup|width=440]

Launchy now also supports keyboard navigation as well as filtering the list of applications by name, description or name of the executable.

[313: NetStoreManager] module (responsible for cloud storages support) was reworked quite a bit. For example, there were several stability improvements and older tree-based interface was replaced by a more Total Commander-like thing.

Among other changes:
<ul>
<li>[7: Aggregator] module got a major speedup.</li>
<li>LHTR visual editor plugin now supports tables and some other features.</li>
<li>[154: GMail Notifier] module now supports showing a quark with the list of mail in the mailbox.</li>
<li>[310: Liznoo] power manager has extended support for Mac OS now, with things like querying battery voltage or temperature.</li>
<li>A new module has been added which provides a quark with temperatures readings from libsensors: HotSensors. It is experimental for now and is known to crash sometimes during heavy system load in Qt internals.</li>
<li>[26: Poshuku] history widget has been fixed, supporting filtering by URL and eliminating duplicates in the same section.</li>
<li>[366: Vrooby] module now supports UDisks2 and supports building with several backends at once, trying them in order at run time.</li>
</ul>

Several old and unsupported plugins were removed, among them:
<ul>
<li>EiskaltDC++, the DirectConnect-client.</li>
<li>LCFTP, the FTP client.</li>
<li>TransparentArch, stub for easy access to archives contents.</li>
<li>VFSCore, virtual file system implementation. This module had to be removed because the functionality it relied on is unavailable in Qt 5 and there are no alternatives.</li>
<li>Tab++, being replaced by TabsList and SB2.</li>
</ul>

These plugins were extracted into separate repositories, keeping all the revisions that relate to them in case someone would take them over.

And now we are even closer to having a working LeechCraft installation on Windows. For that, we had to migrate to the MinGW toolchain, since MSVS' support for C++11 standard is pretty crappy yet.

Source tarball is already <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.95/leechcraft-0.5.95.tar.xz/download"">available</a>, so is <a href=""http://sourceforge.net/projects/leechcraft/files/LeechCraft/0.5.95/leechcraft-0.5.95.dmg/download"">Mac OS X build</a>. Packages for various Linux distros will be available later.

This is the last feature release in the 0.6 series, all other releases until 0.6.0 will have no new features, only bug fixes. In fact, there will be a separate branch for 0.6, and while the main development with all new tasty things will happen in master, only bugfixes will be ported to the 0.6 branch.

And now it's time for a couple of words about future plans. First of all, we won't support Qt 5 until at least Qt 5.1 is released: Qt is still to buggy, and it is insane to try to port quite a big and complex codebase like LeechCraft to such thing for now. Then, we have some awesome ideas for the upcoming 0.7 series after the feature freeze, ranging from new plugins like finance manager and data sources concept to full-blown desktop environment based on LeechCraft running out of the box and without aid of things like KDE and friends. Stay tuned!"
453,page,Azoth VelvetBird,1367148976,plugins-azoth-velvetbird,"Azoth VelvetBird adds protocols support by the <em>libpurple</em> library to Azoth.

<h2>Features</h2>

<ul>
<li>Chat state notifications.</li>
<li>Groups management.</li>
<li>Authorization/subscription management.</li>
</ul>","Azoth VelvetBird adds protocols support by the <em>libpurple</em> library to Azoth.

<h2>Features</h2>

<ul>
<li>Chat state notifications.</li>
<li>Groups management.</li>
<li>Authorization/subscription management.</li>
</ul>"
455,image,Quick launch quark,1367168377,,"",""
457,story,LeechCraft 0.5.96 is released,1369384932,leechcraft-0.5.96-is-released," LeechCraft 0.5.96 ""Quittance"" is released.

This release is the first one after the 0.5.95 feature freeze, thus it incorporates only bug fixes:

<ul>
<li>Core: keep tab icon along tab moves between windows.</li>
<li>Core: fixed toolbar handling on tab moves between windows.</li>
<li>Core: fixed file locking threading issues.</li>
<li>Core: fixed network disk cache expiration handling.</li>
<li>Core: proper handling of forcefully closed unassociated dock widgets.</li>
<li>Core: don't show actions with empty text in popup menus.</li>
<li>[143: Azoth]: fixed autoscrolling.</li>
<li>Azoth: application-wide users list shortcut.</li>
<li>Azoth: case-insensitive users list filtering.</li>
<li>Azoth: use proper icon for voice calls.</li>
<li>[145: Azoth Acetamide]: made the channels list dialog non-modal.</li>
<li>Azoth Acetamide: allow joining to channels while the list is fetched.</li>
<li>[453: Azoth VB]: don't own conversation by the buddy, fixes multiple segfaults.</li>
<li>Blogique: fixed progress indicator.</li>
<li>Blogique Hestia: fixed autoupdating entries in local blog.</li>
<li>Monocle Postrus: fixed FindLibSpectre.cmake for upcoming CMake.</li>
<li>[20: LMP]: fix rare segfaults on queue clearing.</li>
<li>LMP: clear last song data on player clearing.</li>
<li>LMP: support drags from filesystem browser.</li>
<li>LMP: replace queue on playlist activation.</li>
<li>LMP: properly restore play mode check state.</li>
<li>[158: Popishu]: fixed caret line background color.</li>
</ul>"," LeechCraft 0.5.96 ""Quittance"" is released.

This release is the first one after the 0.5.95 feature freeze, thus it incorporates only bug fixes:

<ul>
<li>Core: keep tab icon along tab moves between windows.</li>
<li>Core: fixed toolbar handling on tab moves between windows.</li>
<li>Core: fixed file locking threading issues.</li>
<li>Core: fixed network disk cache expiration handling.</li>
<li>Core: proper handling of forcefully closed unassociated dock widgets.</li>
<li>Core: don't show actions with empty text in popup menus.</li>
<li>[143: Azoth]: fixed autoscrolling.</li>
<li>Azoth: application-wide users list shortcut.</li>
<li>Azoth: case-insensitive users list filtering.</li>
<li>Azoth: use proper icon for voice calls.</li>
<li>[145: Azoth Acetamide]: made the channels list dialog non-modal.</li>
<li>Azoth Acetamide: allow joining to channels while the list is fetched.</li>
<li>[453: Azoth VB]: don't own conversation by the buddy, fixes multiple segfaults.</li>
<li>Blogique: fixed progress indicator.</li>
<li>Blogique Hestia: fixed autoupdating entries in local blog.</li>
<li>Monocle Postrus: fixed FindLibSpectre.cmake for upcoming CMake.</li>
<li>[20: LMP]: fix rare segfaults on queue clearing.</li>
<li>LMP: clear last song data on player clearing.</li>
<li>LMP: support drags from filesystem browser.</li>
<li>LMP: replace queue on playlist activation.</li>
<li>LMP: properly restore play mode check state.</li>
<li>[158: Popishu]: fixed caret line background color.</li>
</ul>"
459,book,"Azoth howto, part 1",1387414712,user-guide-azoth-howto-part-1,"LeechCraft has a whole lot of great modules that can gain and hold their audience, but one of the most prominent plugins is possibly [143: Azoth], the IM client.

Like LeechCrat itself, concrete features in Azoth are implemented via subplugins, while Azoth core only implements the core GUI and several other things that are interesting only to programmers. One should first decide what plugins he wants. Of course, it is possible to just install all the available plugins and then disable (or just ignore) some of them, but it still may be important to consider the ones most relevant to this guide. The plugins are split into three groups according to the author's own preferences.

The most important ones are:
<ul>
<li>LeechCraft — the LeechCraft core;</li>
<li>AdvancedNotifications — the primary notification management module, for example, providing tray notification icon about unread messages; supports flexible notification rules;</li>
<li>[143: Azoth] — IM core;</li>
<li>[145: Azoth Acetamide] — IRC protocol support;</li>
<li>Azoth Autopaste — half-automatic pasting of long texts to pastebins;</li>
<li>[163: Azoth Chathistory] — plugin for storing and displaying conversations history;</li>
<li>Azoth Rosenthal — spellchecker for outgoing messages;</li>
<li>Azoth Standardstyles — support for native LeechCraft themes — simple, elegant and fast;</li>
<li>[295: Azoth Vader] — support for the mail.ru protocol;</li>
<li>[453: Azoth Velvetbird] — wrapper for supporting libpurple protocols;</li>
<li>[143: Azoth Xoox] — one of the most complete implementations of the XMPP (Jabber) protocol out there;</li>
<li>[155: Kinotify] — platform-independent visual notifications (<em>sysnotify</em> module could be installed instead for notifying via desktop environment);</li>
<li>Pogooglue — support for searching for the selected text in search engines;</li>
<li>Secman — password storage module;</li>
<li>Secman Simplestorage — one of the implementations of password storage backend;</li>
<li>[311: TabSessManager] — plugin for recovering opened tabs on startup and unclosing tabs.</li>
</ul>

One could also recommend the following:
<ul>
<li>[12: Auscrie] — plugin for making screenshots and uploading them to imagebins;</li>
<li>[196: Azoth Adiumstyles] — support for Adium chat styles;</li>
<li>[315: Azoth Astrality] — support for protocols provided by the  Telepathy framework, for now only basic IM features are supported;</li>
<li>Azoth Autoidler — automatic status changing according to user activity;</li>
<li>Azoth Depester — support for ignoring users in conferences;</li>
<li>Azoth EmbedMedia — showing images, Youtube videos etc. into chat window on link click;</li>
<li>Azoth Herbicide — SPAM filter;</li>
<li>Azoth NativeEmoticons — smiles support;</li>
<li>Dolozhee — client for LeechCraft issue tracker for submitting bug reports and feature requests in a few clicks;</li>
<li>[310: Liznoo] — integration with system services for properly supporting sleep and hibernate modes, as well as some fancy things for notebook users;</li>
<li>[22: New Life] — import settings and history from other clients;</li>
<li>[13: CSTP] — support for the http(s) protocol, is used in the Lackman plugin and similars;</li>
<li>Dumbeep — sound notifications (one could use [20: LMP] module instead if one needs a media player as well);</li>
<li>[153: Lackman] — userspace package manager for LeechCraft, allows installing additional chat themes, smiles, iconpacks, etc.</li>
</ul>

It is also worth noting these plugins:
<ul>
<li>[8: AnHero] — crash handler for KDE;</li>
<li>Azoth BirthdayNotifier — notifications about birthdays of users from the contact list;</li>
<li>Azoth HiLi — additional options for configuring highlights in conferences;</li>
<li>Azoth LastSeen — local tracker of buddies activity;</li>
<li>[161: Azoth p100q] — integration with the psto.net microblogging service;</li>
<li>Azoth SHX — shell commands executor supporting pasting command output to the chat;</li>
<li>Azoth Xtazy — publishing (unobtrusive as well) the information about current tune if the player supports MPRIS (or if [20: LMP] is used);</li>
<li>Glance — быстрый компактный обзор всех открытых вкладок;</li>
<li>[313: NetStoreManager] — provides support for cloud storage services, in Azoth context it is useful for file transfers;</li>
<li>NetStoreManager GoogleDrive — Google Drive backend for NetStoreManager (registration is required);</li>
<li>Pintab — support for tabs pinning;</li>
<li>Poshuku — LeechCraft web browser, is used in Lackman for fancy themes information displaying;</li>
<li>[433: SB2] — dock panel with support for various quarks (similar to widgets or plasmoids in other environments) like for switching between tabs, quickly enabling or disabling sound notifications or display file transfer status via the [435: TPI] module (this module may be unstable on some systems due to untested Qt features);</li>
<li>[25: Summary] — plugin for displaying background activity of other plugins, may be used instead of SB2 + [435: TPI] as it can, for example, display unread news in news aggregator as well;</li>
<li>TabsList — yet another implementation of fast tabs switching, more keyboard-oriented.</li>
</ul>

Plugins packages are usually prefixed with <em>leechcraft-</em>, like <em>leechcraft-azoth</em> or <em>leechcraft-netstoremanager-googledrive</em>.
If package manager of your distro doesn't have such a rich set of LeechCraft packages, don't worry: subplugins (<em>leechcraft-X-Y</em>) are likely bundled with the corresponding first-level plugins, like <em>leechcraft-azoth</em>.","LeechCraft has a whole lot of great modules that can gain and hold their audience, but one of the most prominent plugins is possibly [143: Azoth], the IM client.

Like LeechCrat itself, concrete features in Azoth are implemented via subplugins, while Azoth core only implements the core GUI and several other things that are interesting only to programmers. One should first decide what plugins he wants. Of course, it is possible to just install all the available plugins and then disable (or just ignore) some of them, but it still may be important to consider the ones most relevant to this guide. The plugins are split into three groups according to the author's own preferences.

The most important ones are:
<ul>
<li>LeechCraft — the LeechCraft core;</li>
<li>AdvancedNotifications — the primary notification management module, for example, providing tray notification icon about unread messages; supports flexible notification rules;</li>
<li>[143: Azoth] — IM core;</li>
<li>[145: Azoth Acetamide] — IRC protocol support;</li>
<li>Azoth Autopaste — half-automatic pasting of long texts to pastebins;</li>
<li>[163: Azoth Chathistory] — plugin for storing and displaying conversations history;</li>
<li>Azoth Rosenthal — spellchecker for outgoing messages;</li>
<li>Azoth Standardstyles — support for native LeechCraft themes — simple, elegant and fast;</li>
<li>[295: Azoth Vader] — support for the mail.ru protocol;</li>
<li>[453: Azoth Velvetbird] — wrapper for supporting libpurple protocols;</li>
<li>[143: Azoth Xoox] — one of the most complete implementations of the XMPP (Jabber) protocol out there;</li>
<li>[155: Kinotify] — platform-independent visual notifications (<em>sysnotify</em> module could be installed instead for notifying via desktop environment);</li>
<li>Pogooglue — support for searching for the selected text in search engines;</li>
<li>Secman — password storage module;</li>
<li>Secman Simplestorage — one of the implementations of password storage backend;</li>
<li>[311: TabSessManager] — plugin for recovering opened tabs on startup and unclosing tabs.</li>
</ul>

One could also recommend the following:
<ul>
<li>[12: Auscrie] — plugin for making screenshots and uploading them to imagebins;</li>
<li>[196: Azoth Adiumstyles] — support for Adium chat styles;</li>
<li>[315: Azoth Astrality] — support for protocols provided by the  Telepathy framework, for now only basic IM features are supported;</li>
<li>Azoth Autoidler — automatic status changing according to user activity;</li>
<li>Azoth Depester — support for ignoring users in conferences;</li>
<li>Azoth EmbedMedia — showing images, Youtube videos etc. into chat window on link click;</li>
<li>Azoth Herbicide — SPAM filter;</li>
<li>Azoth NativeEmoticons — smiles support;</li>
<li>Dolozhee — client for LeechCraft issue tracker for submitting bug reports and feature requests in a few clicks;</li>
<li>[310: Liznoo] — integration with system services for properly supporting sleep and hibernate modes, as well as some fancy things for notebook users;</li>
<li>[22: New Life] — import settings and history from other clients;</li>
<li>[13: CSTP] — support for the http(s) protocol, is used in the Lackman plugin and similars;</li>
<li>Dumbeep — sound notifications (one could use [20: LMP] module instead if one needs a media player as well);</li>
<li>[153: Lackman] — userspace package manager for LeechCraft, allows installing additional chat themes, smiles, iconpacks, etc.</li>
</ul>

It is also worth noting these plugins:
<ul>
<li>[8: AnHero] — crash handler for KDE;</li>
<li>Azoth BirthdayNotifier — notifications about birthdays of users from the contact list;</li>
<li>Azoth HiLi — additional options for configuring highlights in conferences;</li>
<li>Azoth LastSeen — local tracker of buddies activity;</li>
<li>[161: Azoth p100q] — integration with the psto.net microblogging service;</li>
<li>Azoth SHX — shell commands executor supporting pasting command output to the chat;</li>
<li>Azoth Xtazy — publishing (unobtrusive as well) the information about current tune if the player supports MPRIS (or if [20: LMP] is used);</li>
<li>Glance — быстрый компактный обзор всех открытых вкладок;</li>
<li>[313: NetStoreManager] — provides support for cloud storage services, in Azoth context it is useful for file transfers;</li>
<li>NetStoreManager GoogleDrive — Google Drive backend for NetStoreManager (registration is required);</li>
<li>Pintab — support for tabs pinning;</li>
<li>Poshuku — LeechCraft web browser, is used in Lackman for fancy themes information displaying;</li>
<li>[433: SB2] — dock panel with support for various quarks (similar to widgets or plasmoids in other environments) like for switching between tabs, quickly enabling or disabling sound notifications or display file transfer status via the [435: TPI] module (this module may be unstable on some systems due to untested Qt features);</li>
<li>[25: Summary] — plugin for displaying background activity of other plugins, may be used instead of SB2 + [435: TPI] as it can, for example, display unread news in news aggregator as well;</li>
<li>TabsList — yet another implementation of fast tabs switching, more keyboard-oriented.</li>
</ul>

Plugins packages are usually prefixed with <em>leechcraft-</em>, like <em>leechcraft-azoth</em> or <em>leechcraft-netstoremanager-googledrive</em>.
If package manager of your distro doesn't have such a rich set of LeechCraft packages, don't worry: subplugins (<em>leechcraft-X-Y</em>) are likely bundled with the corresponding first-level plugins, like <em>leechcraft-azoth</em>."
462,story,LeechCraft 0.5.97 is released,1372754265,leechcraft-0.5.97-is-released,"Another bugfix version is released: LeechCraft 0.5.97 ""Wormholes"".

The following bugs were fixed:
<ul>
<li>Core: fixed colors for QML buttons (mucn neater now).</li>
<li>Core: properly handle META key in shortcuts dialog.</li>
<li>Core: properly set default string codec, fixes debug messages encoding.</li>
<li>Util: fixed memory leak with QML and ColorThemeProxy.</li>
<li>Util: fixed rectangle fitting algorithm.</li>
<li>[143: Azoth]: fixed chat entry destruction on chat tab close.</li>
<li>HotSensors: take text color from the QML theme.</li>
<li>[153: LackMan]: fixed a typo in SQL query.</li>
<li>[397: Launchy]: extended known category aliases for Multimedia.</li>
<li>[381: Monocle]: keep page position on resize.</li>
<li>[313: NSM]: fixed icons for tab context menu actions.</li>
<li>[435: TPI]: update job name as well.</li>
<li>TPI: don't show internal tasks.</li>
<li>[366: Vrooby]: close the device popup on hoverout.</li>
</ul>","Another bugfix version is released: LeechCraft 0.5.97 ""Wormholes"".

The following bugs were fixed:
<ul>
<li>Core: fixed colors for QML buttons (mucn neater now).</li>
<li>Core: properly handle META key in shortcuts dialog.</li>
<li>Core: properly set default string codec, fixes debug messages encoding.</li>
<li>Util: fixed memory leak with QML and ColorThemeProxy.</li>
<li>Util: fixed rectangle fitting algorithm.</li>
<li>[143: Azoth]: fixed chat entry destruction on chat tab close.</li>
<li>HotSensors: take text color from the QML theme.</li>
<li>[153: LackMan]: fixed a typo in SQL query.</li>
<li>[397: Launchy]: extended known category aliases for Multimedia.</li>
<li>[381: Monocle]: keep page position on resize.</li>
<li>[313: NSM]: fixed icons for tab context menu actions.</li>
<li>[435: TPI]: update job name as well.</li>
<li>TPI: don't show internal tasks.</li>
<li>[366: Vrooby]: close the device popup on hoverout.</li>
</ul>"
464,story,LeechCraft 0.5.98 is released,1373131223,leechcraft-0.5.98-is-released,"LeechCraft 0.5.98 ""Homecoming"" is released today.

Again, it is a purely bugfix release, only incorporating fixes from the master development branch.  The following things were fixed:
<ul>
<li>Core: show unassociated dock widgets before showing dock widgets corresponding to the current tab.</li>
<li>Core: fixed some segfaults on tab closes.</li>
<li>Core: fixed reusing IDs for jobs, fixing a few rare bugs in plugins like CSTP.</li>
<li>[7: Aggregator]: always save provider for delegated jobs.</li>
<li>Aggregator: download the rest of the feeds after killing a stall.</li>
<li>[210: AN]: moved ""Update"" button to a saner place.</li>
<li>AN: check if current rule is modified & suggest saving.</li>
<li>AN: fixed overlay text drawing on notification icons.</li>
<li>[143: Azoth]: fixed several rare segfaults.</li>
<li>Azoth: don't send ""Paused"" typing state after sending a message.</li>
<li>Azoth: take user-entered groups into account on roster item exchange.</li>
<li>Azoth: show JIDs in all users list.</li>
<li>Azoth: show contact JID in chat tab entry info line.</li>
<li>Azoth: activate first item in users list by default.</li>
<li>Azoth: don't try sending contact ID to another on Drag-n-Drop.</li>
<li>Azoth: change tab name after entry renaming.</li>
<li>[214: Azoth MetaContacts]: don't suggest unifying with MUC entries.</li>
<li>[144: Azoth Xoox]: properly handle server errors on form fetching.</li>
<li>Azoth Xoox: fetch versions for variant-less items as well (fixes fetching versions of MUC participants).</li>
<li>[155: Kinotify]: fixed leaking state machine on each notification.</li>
<li>[20: LMP]: fixed broken synchronization symbol fixing.</li>
<li>LMP: temporary files are always removed after sync.</li>
<li>LMP: metadata is now mapped properly from the source.</li>
<li>[381: Monocle]: only render those pages that are actually visible.</li>
<li>Monocle: don't set negative scales.</li>
<li>Monocle: immediate scrolling to current page on load.</li>
<li>Monocle: menu is shown only if mouse moved with a button pressed.</li>
<li>Monocle Seen: safeguard against rendering a bunch of small images leading to memory exhaustion.</li>
<li>[311: TSM]: fixed occasional segfaults on tab closes.</li>
<li>[366: Vrooby]: proper partition naming in UDisks2 backend.</li>
</ul>","LeechCraft 0.5.98 ""Homecoming"" is released today.

Again, it is a purely bugfix release, only incorporating fixes from the master development branch.  The following things were fixed:
<ul>
<li>Core: show unassociated dock widgets before showing dock widgets corresponding to the current tab.</li>
<li>Core: fixed some segfaults on tab closes.</li>
<li>Core: fixed reusing IDs for jobs, fixing a few rare bugs in plugins like CSTP.</li>
<li>[7: Aggregator]: always save provider for delegated jobs.</li>
<li>Aggregator: download the rest of the feeds after killing a stall.</li>
<li>[210: AN]: moved ""Update"" button to a saner place.</li>
<li>AN: check if current rule is modified & suggest saving.</li>
<li>AN: fixed overlay text drawing on notification icons.</li>
<li>[143: Azoth]: fixed several rare segfaults.</li>
<li>Azoth: don't send ""Paused"" typing state after sending a message.</li>
<li>Azoth: take user-entered groups into account on roster item exchange.</li>
<li>Azoth: show JIDs in all users list.</li>
<li>Azoth: show contact JID in chat tab entry info line.</li>
<li>Azoth: activate first item in users list by default.</li>
<li>Azoth: don't try sending contact ID to another on Drag-n-Drop.</li>
<li>Azoth: change tab name after entry renaming.</li>
<li>[214: Azoth MetaContacts]: don't suggest unifying with MUC entries.</li>
<li>[144: Azoth Xoox]: properly handle server errors on form fetching.</li>
<li>Azoth Xoox: fetch versions for variant-less items as well (fixes fetching versions of MUC participants).</li>
<li>[155: Kinotify]: fixed leaking state machine on each notification.</li>
<li>[20: LMP]: fixed broken synchronization symbol fixing.</li>
<li>LMP: temporary files are always removed after sync.</li>
<li>LMP: metadata is now mapped properly from the source.</li>
<li>[381: Monocle]: only render those pages that are actually visible.</li>
<li>Monocle: don't set negative scales.</li>
<li>Monocle: immediate scrolling to current page on load.</li>
<li>Monocle: menu is shown only if mouse moved with a button pressed.</li>
<li>Monocle Seen: safeguard against rendering a bunch of small images leading to memory exhaustion.</li>
<li>[311: TSM]: fixed occasional segfaults on tab closes.</li>
<li>[366: Vrooby]: proper partition naming in UDisks2 backend.</li>
</ul>"
466,story,LeechCraft 0.5.99 is released,1373713274,leechcraft-0.5.99-is-released,"LeechCraft 0.5.99 ""Some Kind of Monster"" is released today.

This is the last pre-0.6.0 release, and again it incorporates only bug fixes from the master branch (few this time!). It is released (almost) on 12th July, the same day that <a href=""http://en.wikipedia.org/wiki/Flying_Spaghetti_Monster"">pastafarianism</a> officially became a religious group here in Russia, which is quite an important event due to general country clericalization with a strong bias towards Ortodoxy.

Enough for politics, though, here comes the list of improvements and fixes:
<ul>
<li>[210: AN]: fixed a typo in a user-visible string.</li>
<li>AN: updated English and Russian translations.</li>
<li>[143: Azoth]: auto-request logs for MUC participants as well.</li>
<li>Azoth: fixed font zooming in fixed-font MUCs.</li>
<li>[163: Azoth CH]: don't test the entry type, leave that to core.</li>
<li>[20: LMP]: fixed a segfault on removable device removal in sync widget.</li>
<li>[437: Lemon]: added Qwt 6.1 compatibility.</li>
<li>[310: Liznoo]: added Qwt 6.1 compatibility.</li>
<li>[381: Monocle] Mu: link to openjpeg and jbig2dec, required by mupdf.</li>
<li>[27: Poshuku CleanWeb]: fixed a rare segfault.</li>
</ul>","LeechCraft 0.5.99 ""Some Kind of Monster"" is released today.

This is the last pre-0.6.0 release, and again it incorporates only bug fixes from the master branch (few this time!). It is released (almost) on 12th July, the same day that <a href=""http://en.wikipedia.org/wiki/Flying_Spaghetti_Monster"">pastafarianism</a> officially became a religious group here in Russia, which is quite an important event due to general country clericalization with a strong bias towards Ortodoxy.

Enough for politics, though, here comes the list of improvements and fixes:
<ul>
<li>[210: AN]: fixed a typo in a user-visible string.</li>
<li>AN: updated English and Russian translations.</li>
<li>[143: Azoth]: auto-request logs for MUC participants as well.</li>
<li>Azoth: fixed font zooming in fixed-font MUCs.</li>
<li>[163: Azoth CH]: don't test the entry type, leave that to core.</li>
<li>[20: LMP]: fixed a segfault on removable device removal in sync widget.</li>
<li>[437: Lemon]: added Qwt 6.1 compatibility.</li>
<li>[310: Liznoo]: added Qwt 6.1 compatibility.</li>
<li>[381: Monocle] Mu: link to openjpeg and jbig2dec, required by mupdf.</li>
<li>[27: Poshuku CleanWeb]: fixed a rare segfault.</li>
</ul>"
468,image,Azoth howto figure 1,1375694496,,"",""
470,story,Donations via PayPal now available,1375777705,donations-via-paypal-now-available,"We've finally got an account on PayPal, so [302: donating] us is now a little bit easier. Previously only Yandex.Money service was available making it hard for people from countries other than Russia and some other CIS members to donate.

So, please send us a couple of bucks if you find this project useful. Though, to be honest, contributions on forms of code, translations and UI are even more welcome!","We've finally got an account on PayPal, so [302: donating] us is now a little bit easier. Previously only Yandex.Money service was available making it hard for people from countries other than Russia and some other CIS members to donate.

So, please send us a couple of bucks if you find this project useful. Though, to be honest, contributions on forms of code, translations and UI are even more welcome!"
472,page,Azoth Murm,1395159358,plugins-azoth-murm,"Azoth Murm provides support for VKontakte messaging via native API instead of XMPP.

Using native API allows Murm to support various additional features not available via XMPP API, such as displaying photos in messages (as well as other media attachments) or fetching more information about users than is available in VCards provided via XMPP. Moreover, XMPP will be closed on August 31 this year.

[img_assist|nid=553|title=|desc=|link=popup|width=440]

<h2>Feature highlights</h2>

<ul>
<li>Support for multiuser chats.</li>
<li>Photos and videos attached to messages are displayed in the chat window.</li>
<li>Audio tracks attached to messages are offered to be played or enqueued in players like [20: LMP] or downloaded.</li>
<li>Support for manipulating friends groups.</li>
<li>Emoji support.</li>
<li>All sent and received messages are displayed in Azoth, even if a message was sent from another client, VKontakte site or a mobile client.</li>
<li>Full support for OTR (if the corresponding plugin is also installed).</li>
<li>Support browsing server history.</li>
</ul>","Azoth Murm provides support for VKontakte messaging via native API instead of XMPP.

Using native API allows Murm to support various additional features not available via XMPP API, such as displaying photos in messages (as well as other media attachments) or fetching more information about users than is available in VCards provided via XMPP. Moreover, XMPP will be closed on August 31 this year.

[img_assist|nid=553|title=|desc=|link=popup|width=440]

<h2>Feature highlights</h2>

<ul>
<li>Support for multiuser chats.</li>
<li>Photos and videos attached to messages are displayed in the chat window.</li>
<li>Audio tracks attached to messages are offered to be played or enqueued in players like [20: LMP] or downloaded.</li>
<li>Support for manipulating friends groups.</li>
<li>Emoji support.</li>
<li>All sent and received messages are displayed in Azoth, even if a message was sent from another client, VKontakte site or a mobile client.</li>
<li>Full support for OTR (if the corresponding plugin is also installed).</li>
<li>Support browsing server history.</li>
</ul>"
474,image,LMP Biography,1378892986,,"Artist biography, photos and tracks in LMP.","Artist biography, photos and tracks in LMP."
475,image,LMP collection,1378893112,,"",""
476,image,LMP similar artists,1378893168,,"",""
477,image,LMP lyrics,1378893256,,"",""
478,image,LMP recommendations,1378893402,,"",""
479,image,LMP recent releases,1378893520,,"",""
480,image,LMP recommended events,1378893568,,"",""
481,image,LMP hypes,1378893612,,"",""
482,image,LMP transcoding parameters,1378893706,,"",""
483,image,LMP artist browser,1378893765,,"",""
484,image,Monocle,1378899740,,Searching in a PDF document.,Searching in a PDF document.
485,image,Monocle,1378899807,,"",""
486,image,Monocle: PDF forms,1378899839,,"",""
487,image,Monocle: DjVu document,1378899872,,"",""
488,image,NetStoreManager,1378900188,,"",""
489,image,Launchy,1378900306,,"",""
490,image,Vrooby,1378900932,,"",""
491,image,Fenet settings,1378902086,,"",""
492,page,Fenet,1378903215,plugins-fenet,"Fenet is WM and compositor manager. It allows one to choose a WM to start upon LeechCraft startup from a list of supported ones, as well as control and configure a compositing manager, if desired.

Fenet also installs a .desktop file for login managers to know about LeechCraft as a desktop environment.

Fenet is active only in desktop mode, thus there is no need to disable it if running LeechCraft as a DE isn't planned.

[img_assist|nid=491|title=|desc=|link=popup|width=440]

<h3>Supported WMs</h3>

<ul>
<li>Awesome</li>
<li>KWin</li>
<li>Openbox</li>
</ul>

<h3>Supported compositors</h3>

<ul>
<li>compton</li>
</ul>

For other compositors a file like <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/compositing/compton.json"">this</a> should be written.

<h3>Adding new WMs</h3>

Adding another window manager is a matter of writing a description file in JSON and a shell script to start the WM.

Here are examples for openbox: <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/openbox.json"">description</a> and <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/openbox.sh"">script</a> and for Awesome: <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/awesome.json"">description</a> and <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/awesome.sh"">script</a>.

The script and the JSON description file should have the same base name and <code>sh</code> and <code>json</code> extensions respectively.","Fenet is WM and compositor manager. It allows one to choose a WM to start upon LeechCraft startup from a list of supported ones, as well as control and configure a compositing manager, if desired.

Fenet also installs a .desktop file for login managers to know about LeechCraft as a desktop environment.

Fenet is active only in desktop mode, thus there is no need to disable it if running LeechCraft as a DE isn't planned.

[img_assist|nid=491|title=|desc=|link=popup|width=440]

<h3>Supported WMs</h3>

<ul>
<li>Awesome</li>
<li>KWin</li>
<li>Openbox</li>
</ul>

<h3>Supported compositors</h3>

<ul>
<li>compton</li>
</ul>

For other compositors a file like <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/compositing/compton.json"">this</a> should be written.

<h3>Adding new WMs</h3>

Adding another window manager is a matter of writing a description file in JSON and a shell script to start the WM.

Here are examples for openbox: <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/openbox.json"">description</a> and <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/openbox.sh"">script</a> and for Awesome: <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/awesome.json"">description</a> and <a href=""https://github.com/0xd34df00d/leechcraft/blob/master/src/plugins/fenet/share/fenet/wms/awesome.sh"">script</a>.

The script and the JSON description file should have the same base name and <code>sh</code> and <code>json</code> extensions respectively."
494,image,KBSwitch general settings,1378903759,,"",""
495,image,KBSwitch layout list,1378903786,,"",""
496,page,KBSwitch,1378904105,plugins-kbswitch,"KBSwitch is a plugin for configuring keyboard layouts and options. It also provides a quark with current layout flag and name.

[img_assist|nid=494|title=KBSwitch options|desc=|link=popup|width=440]
[img_assist|nid=495|title=Layout list|desc=|link=popup|width=440]","KBSwitch is a plugin for configuring keyboard layouts and options. It also provides a quark with current layout flag and name.

[img_assist|nid=494|title=KBSwitch options|desc=|link=popup|width=440]
[img_assist|nid=495|title=Layout list|desc=|link=popup|width=440]"
498,image,SB2 launch quark,1378904405,,"",""
499,image,TPI,1378908921,,"",""
500,image,Desktop mode,1379109545,,"",""
501,image,Blogique,1378911760,,"",""
502,image,Liznoo on Mac OS X,1378913562,,"",""
503,page,Blogique,1388389918,plugins-blogique,"Blogique is the blogging client.

It supports various platforms via different modules, for now LiveJournal and local blogging only.

[img_assist|nid=501|title=|desc=|link=popup|width=440]

<h2>Features</h2>

<ul>
<li>Drafts.</li>
<li>Autosaving.</li>
<li>WYSIWYG editor (via the LHTR plugin) with full support for platform-specific tags.</li>
<li>Exporting blogs.</li>
<li>Post previews.</li>
<li>Messaging support.</li>
</ul>

<h2>Platforms</h2>

<h3>LiveJournal</h3>

Supported via the Metida plugin.

Features:
<ul>
<li>Full support for custom fields like mood, location and current music.</li>
<li>Managing friends lists and communities.</li>
<li>Current music autodetection via MPRIS or from [20: LMP].</li>
<li>Polls support.</li>
<li>Automatic addition of Like buttons.</li>
<li>Incoming messages checking.</li>
<li>Recent comments checking.</li>
<li>Support for LJ-specific tags.</li>
<li>Support for messaging between LJ users.</li>
</ul>

<h3>Local blogging</h3>

Supported via the Hesita plugin.

Features:
<ul>
<li>Exporting entries to other accounts.</li>
<li>Tagging support.</li>
</ul>","Blogique is the blogging client.

It supports various platforms via different modules, for now LiveJournal and local blogging only.

[img_assist|nid=501|title=|desc=|link=popup|width=440]

<h2>Features</h2>

<ul>
<li>Drafts.</li>
<li>Autosaving.</li>
<li>WYSIWYG editor (via the LHTR plugin) with full support for platform-specific tags.</li>
<li>Exporting blogs.</li>
<li>Post previews.</li>
<li>Messaging support.</li>
</ul>

<h2>Platforms</h2>

<h3>LiveJournal</h3>

Supported via the Metida plugin.

Features:
<ul>
<li>Full support for custom fields like mood, location and current music.</li>
<li>Managing friends lists and communities.</li>
<li>Current music autodetection via MPRIS or from [20: LMP].</li>
<li>Polls support.</li>
<li>Automatic addition of Like buttons.</li>
<li>Incoming messages checking.</li>
<li>Recent comments checking.</li>
<li>Support for LJ-specific tags.</li>
<li>Support for messaging between LJ users.</li>
</ul>

<h3>Local blogging</h3>

Supported via the Hesita plugin.

Features:
<ul>
<li>Exporting entries to other accounts.</li>
<li>Tagging support.</li>
</ul>"
504,story,LeechCraft 0.6.0 is released!,1379164969,leechcraft-0.6.0-is-released,"Today is a great day for LeechCraft: version 0.6.0 ""Surreal State of Enlightenment"" is released!

We won't list the bugfixes since the 0.5.99 release candidate (well, we will, but in the very end of this article), but rather describe what has been added since previous major release, 0.5.0. And there is really quite a lot of new things to talk about.

The screenshots for this article are taken from the development branch for the upcoming 0.6.60 version, but there isn't really much difference except for a few new things here or there.
","Today is a great day for LeechCraft: version 0.6.0 ""Surreal State of Enlightenment"" is released!

We won't list the bugfixes since the 0.5.99 release candidate (well, we will, but in the very end of this article), but rather describe what has been added since previous major release, 0.5.0. And there is really quite a lot of new things to talk about.

The screenshots for this article are taken from the development branch for the upcoming 0.6.60 version, but there isn't really much difference except for a few new things here or there.
<!--break-->
<h2>LMP</h2>

[20: LMP], the LeechCraft Music Player, is possibly the plugin we invested most time and effort in since Azoth. As you can guess from the name, it is an audio player:

Well, we had a plugin that could play music for quite some time, but it was rather a stub. Now we have a proper collection- and social-oriented player having everything you would expect from an audio player today and that is ready to compete with monsters like Amarok:
[img_assist|nid=474|title=|desc=|link=popup|width=440]

It is based on music collections concept:
[img_assist|nid=475|title=|desc=|link=popup|width=440]

gets even better if you have a Last.FM account (and [344: LastFMScrobble] module):
[img_assist|nid=478|title=|desc=|link=popup|width=440]
[img_assist|nid=480|title=|desc=|link=popup|width=440]

allowing you to stay on the front edge of the new or hyped music:
[img_assist|nid=481|title=|desc=|link=popup|width=440]

as well as to discover what you may also like:
[img_assist|nid=478|title=|desc=|link=popup|width=440]

fetches lyrics automatically:
[img_assist|nid=477|title=|desc=|link=popup|width=440]

supports transcoding to removable devices (dumb flash-like in 0.6.0, but full MTP support is already implemented in master development branch and will be present in 0.6.60):
[img_assist|nid=482|title=|desc=|link=popup|width=440]

can fetch artists discographies (from MusicBrainz via [429: MusicZombie] module, for example) and preview them from VKontakte, and allow one to just browse information about artists:
[img_assist|nid=483|title=|desc=|link=popup|width=440]

The player integrates with the rest of LeechCraft, so that Azoth can automatically announce what tune you are listening to via XMPP User Tune extension or similar means for other protocols.

It also has some other cool features, like MPRIS on *NIX systems or support for cloud services like MP3Tunes and a general catalogue of Icecast/Shoutcast streams via the HotStreams module.

LMP also has a subplugin, Graffiti, for tag manipulation, CUE files splitting:
[img_assist|nid=512|title=|desc=|link=popup|width=440]

LMP Graffiti also supports renaming files according to a mask and fetching tags from MusicBrainz/AcoustID by the means of acoustic fingerprinting:

Support  for all the external services is implemented via separate plugins, so integrating with Jamendo, Grooveshark, Google Music or analogs of MusicBrainz is a matter of writing another plugin completely separate from LMP's code.

In the upcoming 0.6.60 LMP will be based on GStreamer instead of Phonon in 0.6.0, and the transition is already made. The switch allowed us to implement a proper and always-working gapless playback and gives us an opportunity to add support for nice features like ReplayGain or a proper equalizer later.

<h2>SB2</h2>

We had a sidebar panel in the 0.5.0 release, and this is a complete rewrite of it: meet Sidebar 2.0, or just [433: SB2]. The panel on the bottom of all other screenshots in this announce is the SB2, so we won't provide yet one more screenshot here.

SB2 is written in QML (though with C++ logic backend, of course), thus much more flexible and extensible: a lot of things can be easily achieved which were nearly impossible (if possible at all) with the old widgets/actions-based sidebar, which it replaces.

SB2 operates around the concept of quarks which are similar to KDE Plasma's plasmoids. A quark is a small more-or-less self-contained visual element placed on SB2 (or a hypothetical similar desktop plugin) which may be written entirely in QML or backed by a full-blown native C++ plugin. There are quite a few quarks already:
<ul>
<li>tab switcher and opener with highlighting for active and opened tabs and a handy tab switcher:
[img_assist|nid=498|title=|desc=|link=popup|width=440]
</li>
<li>[397: third-party application launcher];</li>
<li>[437: network activity monitor];</li>
<li>[154: new mail notificator];</li>
<li>[435: task progress indicator] for monitoring progress of everything from pending torrents to audio transcoding process:
[img_assist|nid=499|title=|desc=|link=popup|width=440]
</li>
<li>and a bunch of others.</li>
</ul>

The SB2 panel supports the multiwindow support introduced in this release (more on this later), allowing to have different panel orientations, quark lists and individual quark settings for each window.

For now quarks can be placed only on the SB2 panel, but we are thinking of writing another plugin, some kind of a dashboard, serving as a standard desktop screen, where quarks can also be placed. Moreover, the same quark can provide different look and feel in different contexts. For example, a hypothetical weather quark will display just a weather icon and a couple of digits for the temperature on the SB2 panel, turning into a big and fancy widget with a week-long weather forecast on the dashboard.

Unfortunately QML is known to crash on some systems: all such distinctive reports were got were from Ubuntu and openSUSE users. For now we couldn't find a better workaround than suggesting disabling the plugin if you experience strange random segfaults when interacting with SB2.

<h2>Monocle</h2>

Another big new plugin is [381: Monocle], the document reader:
[img_assist|nid=484|title=|desc=|link=popup|width=440]

Monocle is modular, and different formats are supported by different modules. The following are supported: PDF, FB2, DjVu and PostScript (0.6.60 also will add support for MOBI).

It's quite feature-rich and surely can compete with Okular and the likes. It supports tables of contents, forms (in PDF), thumbnails, bookmarks, one- or two-pages layouts, fullscreen mode, links and some other features:
[img_assist|nid=486|title=|desc=|link=popup|width=440]

Monocle integrates with the rest of LeechCraft, so, for example, a just downloaded document will automatically be opened in Monocle.

<h2>Blogique</h2>

One more new thing in this release is [503: Blogique], the blogging platform client plugin:
[img_assist|nid=501|title=|desc=|link=popup|width=440]

For now only local blog and Livejournal.com is supported, though support for more platforms is planned. Like Azoth and Monocle, Blogique is modular, and adding a new platform is a matter of writing another plugin.

Blogique is primarily aimed at creating (with a WYSIWYG editor), updating and keeping blog entries on remote blog platforms (via Metida plugin for Livejournal) or locally (through Hestia plugin). Blogique supports drafts, autosaves and allows viewing last comments in blogs. There is also a calendar to ease navigating through the blog.

Hestia subplugin for local blogging supports sending its posts into any other accounts of any other blogging system. We plan on adding this crossposting feature to other platform plugins in next releases.

Metida subplugin for Livejournal has quite some features to offer. It supports all of LJ's post parameters, from access rights to mood, geolocation and current music (with autofetching from MPRIS or LMP plugin). It can also add Like and Repost buttons, create polls and put parts of the post into cut. By the way as far as we know, it's the only blog client (on Linux, at least) supporting LJ-specific tags.

We think of implementing blog backup/exporting, viewing friends' posts and commenting through the client without browser use. Tell us what you think about this!

<h2>NetStoreManager</h2>

Most changes in [313: NetStoreManager] correspond to its appearance and usability.

Most LeechCraft users are accustomed two-panel file managers like Krusader, Midnight Commander or Total Commander, so we decided to change NSM's UI from a tree view to something similar to these file managers (one panel for now, though):
[img_assist|nid=488|title=|desc=|link=popup|width=440]

There are some new features. More files and directories actions are supported, like copying, moving, erasing and moving to trash. There is also a ""silent mode"" for previewing files: a file is automatically downloaded to a temporary directory and opened after it finishes.

Google Drive plugin now supports exporting some file types supported by Google Docs, to various formats that differ from the original format of the file.

There are also usability improvements, for example, accessing trash is now easier via a special toolbar button, and each file has an icon according to its MIME type.

<h2>Other new plugins</h2>

We have a bunch of new smaller plugins as well.

<h3>Liznoo</h3>

A [310: power manager], using UPower on Linux, native ioctls on FreeBSD and native APIs on Mac OS X. It supports reporting battery level, status and statistics, notifying other plugins about suspend/hibernate events (so that Azoth can gracefully disconnect from the servers, for example) and drawing nice power consumption graphs:
[img_assist|nid=502|title=|desc=|link=popup|width=440]

<h3>Launchy</h3>

Third-party [397: application launcher] based on FreeDesktop.Org specifications. It provides a quark for SB2 and a full-screen launch panel:
[img_assist|nid=489|title=|desc=|link=popup|width=440]

In master branch it also fully supports keyboard navigation and launching arbitrary applications (not only those providing a .desktop file).

<h3>Vrooby</h3>

[366: Removable storage devices manager], currently available only for Linux and using the UDisks daemon. It also provides data about removable storages to other plugins, so that LMP, for example, can know about such devices and sync with them.
[img_assist|nid=490|title=|desc=|link=popup|width=440]

<h3>Dolozhee</h3>

[335: Issue reporting tool], allows one to submit bug reports and feature requests easily even without being registered on LeechCraft issue tracker.

<h2>Other improvements</h2>

<h3>Multiple windows</h3>

We got complaints about LeechCraft being single-windows almost from the inception of the project, and people generally refused to try it out because they didn't like the idea of everything being in a single window. Well, this reason is not valid anymore: LeechCraft finally supports multiple windows. The support is quite experimental for now, bugs and crashes are possible, but seems like it's already quite stable for general usage scenarios.

For now there are two modes of multiwindowing: either manual, where new windows are created upon user's explicit request (like pressing a <em>New window</em> button) and new tabs appear in the currently active window, or semiautomatic, where tabs of different kinds appear in different windows and new windows are created automatically if needed. The later mode somewhat mimicks traditional multiapplication approach, where browser tabs are in one window, private chats are in another, conferences and channels in the third and all opened documents in the fourth. Both modes support moving tabs between windows as user wishes.

<h3>New IM protocols</h3>

[143: Azoth], our IM client, now also supports MRIM and Windows Messenger protocol (though seems like the latter protocol is already deprecated itself by the time of the release). The support is quite basic: for example, multiuser chatrooms aren't supported for the MRIM protocol yet, but it is already quite usable for day-to-day usage.

And, moreover, support for the native VKontakte API is already implemented in the master branch and will be available in the soon-to-be-released 0.6.60 version. This is quite important since VKontakte has already shut down its XMPP servers. Moreover, this native API plugin already supports more than VKontakte provides through the older XMPP API.

<h3>Mac OS X support</h3>

Yes, LeechCraft is now available for Mac OS X 10.7 (and upper), thanks to the awesome clang compiler and the UNIX environment. In fact, you can see it on the Liznoo screenshot.

Several platform-specific things are also supported, ranging from the maximization icon in the upper right corner of LeechCraft windows to proper support for its power management APIs in the Liznoo module, for example.

<h3>Bugs fixed since 0.5.99</h3>

Time for the list of issues fixed in this release compared to the 0.5.99 beta, as promised in the beginning of this post:

<ul>
<li>Core: fixed showing toolbar after last tab is closed.</li>
<li>Core: fixed reapplying color theme, explicitly setting palette on all widgets.</li>
<li>Core: check if there is a tab before activating it on DnD.</li>
<li>Core: set default locale according to language settings.</li>
<li>Util: fixed a possible use-after-free error in ResourceLoader on large pixmaps.</li>
<li>XSD: don't count an item with just set datasource as changed.</li>
<li>[210: AN]: fixed three bugs that led to rules being considered modified when they weren't.</li>
<li>[7: Aggregator]: feed URL string can already be encoded, check for it.</li>
<li>Aggregator: fixed tooltip cleanup code, removing tags like font, span, div, p, h{1,2,3,4,5,6} tags.</li>
<li>Aggregator: don't notify about zero something.</li>
<li>[143: Azoth]: fixed a rare XML parsing issue.</li>
<li>Azoth: cancel roster search on Esc or as soon as search text is empty.</li>
<li>Azoth AdiumStyles: don't segfault on unknown entries.</li>
<li>Azoth Autoidler: handle only Online and Free to Chat statuses.</li>
<li>[161: Azoth p100q]: fixed bookmarks label in settings.</li>
<li>[295: Azoth Vader]: fixed compatibility with crappy clients not knowing about BOM.</li>
<li>Azoth Vader: fixed microblog status encoding.</li>
<li>[144: Azoth Xoox]: fixed restoring file logging settings.</li>
<li>Azoth Xoox: fixed cancelling connecting to the server if there is a network error.</li>
<li>Azoth Xoox: added *.jpeg and *.bmp masks to avatar filter.</li>
<li>[335: Dolozhee]: set proper stretch on widgets.</li>
<li>[344: LastFMScrobble]: fixed leaking attend markers.</li>
<li>LastFMScrobble: fixed leaking recent releases.</li>
<li>[397: Launchy]: use own settings instead of messing with LMP.</li>
<li>[310: Liznoo]: try autostarting UPower if it's unavailable.</li>
<li>[20: LMP]: properly handle playlists on DnD.</li>
<li>LMP: similarity label now is always under artist name.</li>
<li>LMP: consider arbitrary-named album art if it's a single image.</li>
<li>LMP: album-art autofetching now made optional.</li>
<li>LMP: format datetimes according to locale settings.</li>
<li>LMP Graffiti: fixed CUE splitting.</li>
<li>LMP Graffiti: fixed linking issues with primary LMP library.</li>
<li>LMP Graffiti: fixed garbage in plugin icon.</li>
<li>[26: Poshuku]: set target=""_blank"" on links in widgets requested by other plugins.</li>
<li>Poshuku: fixed freezing on garbage collection with large history databases.</li>
<li>[27: Poshuku CW]: don't complain about unsupported filters.</li>
<li>[25: Summary]: fixed leaking context menu actions.</li>
</ul>

<h2>Towards DE</h2>

Yes, jokes aside, we actually think of turning LeechCraft into a desktop environment. Of course, according to LeechCraft spirit it is purely optional and implemented via different plugins, but some required changes are already implemented, like the multiwindows support, power manager or app launcher.

The upcoming 0.6.60 version will have a special [513: desktop mode], where LeechCraft window automatically becomes desktop window, and SB2 widget is created as a top-level panel, visible even when other apps are active:
[img_assist|nid=500|title=|desc=|link=popup|width=440]

0.6.60 will also feature some new related plugins, like [492: Fenet] for controlling window and compositing managers:
[img_assist|nid=491|title=|desc=|link=popup|width=440]
[496: KBSwitch] for configuring keyboard layouts:
[img_assist|nid=494|title=|desc=|link=popup|width=440]
[img_assist|nid=495|title=|desc=|link=popup|width=440]
as well as [508: Krigstask] (the taskbar and pager), [510: Mellonetray] (well, the tray) and Laughty, the libnotify notification server."
505,story,New builds for Windows,1378938944,new-builds-for-windows,"Hey there!

While we're in preparation for the 0.6.0 release, we've also managed to build almost whole LeechCraft from master branch for Windows, and <a href=""http://dist.leechcraft.org/LeechCraft/0.6.60/leechcraft-0.5.95-2370-g0459329.msi"">the package</a> is publicly available!

This version is built with gcc (MinGW) first time since quite long ago, because MSVS's support for C++11 isn't good enough for LeechCraft, and, moreover, WebKit built with recent enough MSVS has some issues from subtle bugs to crashes.

Moreover, this is the first time LeechCraft is packaged with MSI via WiX, and the corresponding <a href=""https://github.com/0xd34df00d/leechcraft/pull/252"">pull request</a> has just been merged. Because of MSI some new fancy features should be available, like the often-requested remembering what plugins you've chosen.

LeechCraft has so many changes overall, so please try out this package and tell us what you like or don't like. Though we still don't support Windows as good as we support Linux or even Mac OS X, but it's still worth knowing.

And you may also have noticed that we've moved our distfiles from SourceForge to our server. Well, that's basically because of <a href=""http://www.gluster.org/2013/08/how-far-the-once-mighty-sourceforge-has-fallen/"">this</a>. Just read the article if you're interested, I don't think I have anything to add.","Hey there!

While we're in preparation for the 0.6.0 release, we've also managed to build almost whole LeechCraft from master branch for Windows, and <a href=""http://dist.leechcraft.org/LeechCraft/0.6.60/leechcraft-0.5.95-2370-g0459329.msi"">the package</a> is publicly available!

This version is built with gcc (MinGW) first time since quite long ago, because MSVS's support for C++11 isn't good enough for LeechCraft, and, moreover, WebKit built with recent enough MSVS has some issues from subtle bugs to crashes.

Moreover, this is the first time LeechCraft is packaged with MSI via WiX, and the corresponding <a href=""https://github.com/0xd34df00d/leechcraft/pull/252"">pull request</a> has just been merged. Because of MSI some new fancy features should be available, like the often-requested remembering what plugins you've chosen.

LeechCraft has so many changes overall, so please try out this package and tell us what you like or don't like. Though we still don't support Windows as good as we support Linux or even Mac OS X, but it's still worth knowing.

And you may also have noticed that we've moved our distfiles from SourceForge to our server. Well, that's basically because of <a href=""http://www.gluster.org/2013/08/how-far-the-once-mighty-sourceforge-has-fallen/"">this</a>. Just read the article if you're interested, I don't think I have anything to add."
508,page,Krigstask,1379105184,plugins-krigstask,"Krigstask provides a taskbar and pager quark for [433: SB2], allowing to control third-party applications' windows and switching desktops.

It can be seen on the following screenshot on the bottom of the window:
[img_assist|nid=474|title=|desc=|link=popup|width=440]","Krigstask provides a taskbar and pager quark for [433: SB2], allowing to control third-party applications' windows and switching desktops.

It can be seen on the following screenshot on the bottom of the window:
[img_assist|nid=474|title=|desc=|link=popup|width=440]"
510,page,Mellonetray,1379105364,plugins-mellonetray,"Mellonetray provides a system tray quark for [433: SB2], so that third-party applications can embed their tray icons into LeechCraft.

This is an X11-only plugin. Moreover, it's only active in desktop mode, and since only one tray can be active at a time, make sure you don't have other tray applications if you want to use this one.","Mellonetray provides a system tray quark for [433: SB2], so that third-party applications can embed their tray icons into LeechCraft.

This is an X11-only plugin. Moreover, it's only active in desktop mode, and since only one tray can be active at a time, make sure you don't have other tray applications if you want to use this one."
512,image,LMP Graffiti,1379108913,,"",""
513,book,Desktop mode,1385669553,user-guide-desktop-mode,"This page documents desktop mode available in LeechCraft starting from somewhere around 0.6.60 version. It is available only on X11.

<h2>Plugins</h2>

Desktop mode is activated by adding <code>--desktop</code> switch to the LeechCraft command line. This switch affects both LeechCraft core (how main windows are created) and several plugins. Particularly, [492: Fenet], [496: KBSwitch] and [510: Mellonetray] aren't activated without <code>--desktop</code> even if they are loaded.

[492: Fenet] plugin is responsible for autostarting window manager and possibly a compositing manager. It also installs a <code>.desktop</code> file for login managers to use to properly start LC.

[496: KBSwitch] serves as keyboard layout configurator. It allows configuring the list of keyboard layouts as well as various options, like the button for groups switching, the compose key, etc.

[508: Krigstask] provides a taskbar and pager quark for [433: SB2].

[510: Mellonetray] provides a system tray area quark for [433: SB2].

<h2>Screenshots</h2>

LeechCraft running in desktop mode:
[img_assist|nid=500|title=|desc=|link=popup|width=440]

[492: Fenet] settings:
[img_assist|nid=491|title=|desc=|link=popup|width=440]
[496: KBSwitch] settings:
[img_assist|nid=494|title=|desc=|link=popup|width=440]
[img_assist|nid=495|title=|desc=|link=popup|width=440]","This page documents desktop mode available in LeechCraft starting from somewhere around 0.6.60 version. It is available only on X11.

<h2>Plugins</h2>

Desktop mode is activated by adding <code>--desktop</code> switch to the LeechCraft command line. This switch affects both LeechCraft core (how main windows are created) and several plugins. Particularly, [492: Fenet], [496: KBSwitch] and [510: Mellonetray] aren't activated without <code>--desktop</code> even if they are loaded.

[492: Fenet] plugin is responsible for autostarting window manager and possibly a compositing manager. It also installs a <code>.desktop</code> file for login managers to use to properly start LC.

[496: KBSwitch] serves as keyboard layout configurator. It allows configuring the list of keyboard layouts as well as various options, like the button for groups switching, the compose key, etc.

[508: Krigstask] provides a taskbar and pager quark for [433: SB2].

[510: Mellonetray] provides a system tray area quark for [433: SB2].

<h2>Screenshots</h2>

LeechCraft running in desktop mode:
[img_assist|nid=500|title=|desc=|link=popup|width=440]

[492: Fenet] settings:
[img_assist|nid=491|title=|desc=|link=popup|width=440]
[496: KBSwitch] settings:
[img_assist|nid=494|title=|desc=|link=popup|width=440]
[img_assist|nid=495|title=|desc=|link=popup|width=440]"
514,image,LackMan,1379195736,,"",""
515,book,Having settings in your plugin,1405531914,development-having-settings-in-your-plugin,"<h2>Basic description</h2>

Having settings in your plugin boils down to implementing the <a href=""http://doc.leechcraft.org/core/class_i_have_settings.html"">IHaveSettings</a> interface and writing an XML file with the description of the settings. The XML file defines the settings that your plugin exposes to the user via the XmlSettingsDialog (further referred as XSD) system.

<h2>C++ side</h2>

<h3>Implementing IHaveSettings</h3>

Implementing <code>IHaveSettings</code> typically consists of the following steps:
<ol>
<li>creating a class that is responsible for keeping settings' values, derived from BaseSettingsManager and typically called XmlSettingsManager (see the example below);</li>
<li>instantiating a <code>XmlSettingsDialog</code> class;</li>
<li>registering your settings file and settings manager in the just instantiated <code>XmlSettingsDialog</code> object via <code>RegisterObject</code>;</li>
<li>returning the instantiated object of <code>XmlSettingsDialog</code> from the <code>IHaveSettings::GetSettingsDialog ()</code> method.</li>
</ol>

<h3>XmlSettingsManager example</h3>

<code type=""bash"">xmlsettingsmanager.h</code>:
<code>
#pragma once

#include <xmlsettingsdialog/basesettingsmanager.h>

namespace LeechCraft
{
namespace LMP
{
	class XmlSettingsManager : public Util::BaseSettingsManager
	{
		Q_OBJECT

		XmlSettingsManager ();
	public:
		static XmlSettingsManager& Instance ();
	protected:
		virtual QSettings* BeginSettings () const;
		virtual void EndSettings (QSettings*) const;
	};
}
}
</code>

<code type=""bash"">xmlsettingsmanager.h</code>:
<code>
#include ""xmlsettingsmanager.h""
#include <QCoreApplication>

namespace LeechCraft
{
namespace LMP
{
	XmlSettingsManager::XmlSettingsManager ()
	{
		Util::BaseSettingsManager::Init ();
	}

	XmlSettingsManager& XmlSettingsManager::Instance ()
	{
		static XmlSettingsManager manager;
		return manager;
	}

	QSettings* XmlSettingsManager::BeginSettings () const
	{
		QSettings *settings = new QSettings (QCoreApplication::organizationName (),
				QCoreApplication::applicationName () + ""_LMP"");
		return settings;
	}

	void XmlSettingsManager::EndSettings (QSettings*) const
	{
	}
}
}
</code>

Don't forget to include the license header!

<h3>Manipulating settings values</h3>

Getting a value of a setting is a matter of calling the <code>property ()</code> method on your settings manager object, like this:
<code>
const bool isScrobblingEnabled = XmlSettingsManager::Instance ().property (""ShouldScrobble"").toBool ();
const auto& username = XmlSettingsManager::Instance ().property (""Username"").toString ();
</code>

You can also update the settings from your C++ code, and the GUI will update itself, though that's rarely needed. For that, just call <code>setProperty</code>, for example:
<code>
if (UsernameConflict (username))
    XmlSettingsManager::Instance ().setProperty (""Username"", username + ""_lc"");
</code>

<h3>Subscribing to property changes</h3>

One calls the <code>BaseSettingsManager::RegisterObject</code> method to register a metamethod to be invoked when a property changes. The metamethod must have no parameters and return nothing. Please note that it isn't invoked upon registration, so you should do that yourself if you need to.

For example:
<code>
XmlSettingsManager::Instance ().RegisterObject (""TransitionTime"",
		this, ""setTransitionTime"");
setTransitionTime ();
</code>
and the <code>setTransitionTime ()</code> body:
<code>
void Player::setTransitionTime ()
{
	const int time = XmlSettingsManager::Instance ()
			.property (""TransitionTime"").toInt ();
	Source_->SetTransitionTime (time);
}
</code>

<h2>XML description</h2>

XML description file defines a tree of settings items and their types, like a string, an integer, a real number, a local path or a color.

The basic element of the settings file is <code type=""xml""><item></code>. This is the exact element that defines a single option, its type, default value, human-readable name and sometimes a tooltip. The <code type=""xml""><item></code> must have three attributes:
<dl>
<dt><code type=""xml"">type</code></dt>
<dd>Defines the type of the item, like a checkbox for boolean options, a line edit for strings, etc. The full list of available types is given in the end of this page.</dd>
<dt><code type=""xml"">property</code></dt>
<dd>The identifier of this option. It is used to manipulate the value of this option via the <code>XmlSettingsManager</code> class from the C++ side.</dd>
<dt><code type=""xml"">default</code></dt>
<dd>The default value of this option. The possible values depend on the option <code>type</code>, for example, a <code type=""xml""><item type=""checkbox""></code> only accepts <code>""true""</code> or <code>""false""</code> values, while an <code><item type=""lineedit""></code> can accept literally everything.</dd>
</dl>

Some option types may have additional attributes, they are documented later on.

For example (please note it's not a full XML, just a tiny bit of it):
<code type=""xml"">
<item type=""checkbox"" property=""ShowTrayIcon"" default=""false"">
	<label value=""Show tray icon"" />
</item>
</code>

The items are organized in pages (defined by the <code type=""xml""><page></code> element), which can be further divided into tabs (defined by the <code type=""xml""><tab></code> element). There are also two containers, a <code type=""xml""><groupbox></code> element, which just visually groups its children in UI, and <code type=""xml""><item type=""groupbox"" checkable=""true""></code>, which is an item itself and also groups its children but also has a checkbox near its label, and the children are unavailable if the checkbox is in the disabled state.

Most items ranging from pages and tabs to every tiny spinbox out there support labels — human-readable pieces of texts that name the option for the user. Labels are defined by a <code type=""xml""><item></code>'s subelement <code type=""xml""><label></code>.

For example, KBSwitch has the following XML setting file:
<code type=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<settings>
	<page>
		<label value=""KBSwitch"" />
		<tab>
			<label value=""General settings"" />
			<item type=""combobox"" property=""SwitchingPolicy"">
				<label value=""Keboard layout switching policy (LeechCraft window):"" />
				<option name=""global"" default=""true"">
					<label value=""Use system layout"" />
				</option>
				<option name=""plugin"">
					<label value=""Keyboard layout per plugin"" />
				</option>
				<option name=""tab"">
					<label value=""Keyboard layout per tab"" />
				</option>
			</item>
			<item type=""groupbox"" checkable=""true"" property=""ManageSystemWide"" default=""false"">
				<label value=""Manage keyboard layouts system-wide"" />
				<item type=""combobox"" property=""KeyboardModel"" mayHaveDataSource=""true"">
					<label value=""Keyboard model:"" />
				</item>
			</item>
		</tab>
		<tab>
			<label value=""Layouts"" />
			<item type=""customwidget"" name=""LayoutsConfigWidget"" label=""own"" />
		</tab>
		<tab>
			<label value=""Options"" />
			<item type=""customwidget"" name=""OptionsConfigWidget"" label=""own"" />
		</tab>
	</page>
</settings>
</code>

LMP module has the following:
<code type=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<settings>
	<page>
		<label value=""Appearance"" />
		<item type=""checkbox"" property=""ShowTrayIcon"" default=""false"">
			<label value=""Show tray icon"" />
		</item>
		<item type=""checkbox"" property=""UseNavTabBar"" default=""false"">
			<label value=""Use tabs for switching pages"" />
		</item>
		<item type=""checkbox"" property=""AutocenterCurrentTrack"" default=""true"">
			<label value=""Automatically center on current track"" />
		</item>
		<item type=""lineedit"" property=""SingleTrackDisplayMask"" default=""$artist - $album - $title"">
			<label value=""Format for single tracks in playlist:"" />
			<tooltip>The following variables are allowed: &lt;em>$artist&lt;/em>, &lt;em>$year&lt;/em>, &lt;em>$album&lt;/em>, &lt;em>$trackNumber&lt;/em>, &lt;em>$title&lt;/em>.</tooltip>
		</item>
	</page>
	<page>
		<label value=""Behavior"" />
		<item type=""checkbox"" property=""EnableNotifications"" default=""true"">
			<label value=""Enable notifications"" />
		</item>
		<item type=""checkbox"" property=""EnableScrobbling"" default=""true"">
			<label value=""Enable scrobbling"" />
			<tooltip>This option requires at least one other scrobbler plugin, like LastFMScrobble, for example.</tooltip>
		</item>
		<item type=""checkbox"" property=""RequestLyrics"" default=""true"">
			<label value=""Request lyrics"" />
		</item>
		<item type=""checkbox"" property=""AutoFetchAlbumArt"" default=""true"">
			<label value=""Automatically fetch missing album art"" />
		</item>
		<item type=""checkbox"" property=""RememberUsedProviders"" default=""true"">
			<label value=""Remember used data providers"" />
		</item>
		<item type=""checkbox"" property=""SortWithThe"" default=""true"">
			<label value=""Take 'The' into account when sorting"" />
		</item>
		<item type=""checkbox"" property=""FollowSymLinks"" default=""false"">
			<label value=""Follow symbolic links"" />
		</item>
		<item type=""checkbox"" property=""AutoContinuePlayback"" default=""false"">
			<label value=""Continue playback automatically"" />
		</item>
		<item type=""path"" property=""CoversStoragePath"" default=""{LCDIR}/lmp/covers"">
			<label value=""Album art storage path:"" />
		</item>
		<item type=""spinbox"" property=""TransitionTime"" default=""0"" step=""100"" minimum=""-10000"" maximum=""10000"">
			<label value=""Transition time between tracks:"" />
			<suffix value="" ms"" />
			<tooltip value=""Setting this to positive values introduces a gap between tracks. Negative values enable crossfade. Zero requests gapless playback."" />
		</item>
	</page>
	<page>
		<label value=""Collection"" />
		<groupbox>
			<label value=""Root paths"" />
			<item type=""dataview"" property=""RootPathsView"" />
		</groupbox>
	</page>
	<page>
		<label value=""Plugin communication"" />
		<item type=""groupbox"" property=""TestOnly"" state=""on"" checkable=""true"">
			<label value=""Test only these extensions"" />
			<item type=""lineedit"" property=""TestExtensions"" default=""avi flac flv mkv mp3 mp4 ogg"">
				<label value=""Extenstions list:"" />
			</item>
		</item>
	</page>
</settings>
</code>

<h3>Item types</h3>

<h4>checkbox</h4>

<code type=""xml""><item type=""checkbox""></code> defines a boolean option that can be toggled. It has no additional options.

Example:
<code type=""xml"">
<item type=""checkbox"" property=""ShowTrayIcon"" default=""false"">
	<label value=""Show tray icon"" />
</item>
</code>

<h4>combobox</h4>

<code type=""xml""><item type=""combobox""></code> defines a combobox with a list of options, one of which can be chosen. The list may be either static or dynamic.

In case of static option lists, each option is defined by an <code type=""xml""><option></code> element, which should have a <code type=""xml"">name=""value""</code> attribute. The <code>value</code> string is returned by the <code>BaseSettingsManager::property()</code> method.

An option can be marked as default by having the <code type=""xml"">default=""true""</code> attribute.

Static options list example:
<code type=""xml"">
<item type=""combobox"" property=""SelectionBehavior"">
	<label value=""Tab selection behavior: "" />
	<option name=""PreviousActive"" default=""true"">
		<label value=""Select the previously selected tab"" />
	</option>
	<option name=""NextIndex"">
		<label value=""Select the tab to the right of the one being removed"" />
	</option>
	<option name=""PreviousIndex"">
		<label value=""Select the tab to the left of the one being removed"" />
	</option>
</item>
</code>

If the user selects, for example, the second option, the corresponding <code>property (""SelectionBehavior"").toString ()</code> call will return the <code>QString (""NextIndex"")</code> value.

<h4>dataview</h4>

<code>dataview</code> item defines a view for a C++ model exposed from the plugin and registered via the <code>XmlSettingsDialog::SetDataSource(const QString& propertyName, QAbstractItemModel *model)</code> method.

<code type=""xml""><item type=""dataview""></code> supports the following attributes:
<dl>
<dt><code>addEnabled</code></dt>
<dd>If <code>""false""</code>, adding to the model via XSD isn't allowed (for example, the <em>Add</em> button is inactive).</dd>
<dt><code>modifyEnabled</code></dt>
<dd>If <code>""false""</code>, modifying model data via XSD isn't allowed (for example, the <em>Modify</em> button is inactive).</dd>
<dt><code>removeEnabled</code></dt>
<dd>If <code>""false""</code>, removing data from the model via XSD isn't allowed (for example, the <em>Remove</em> button is inactive).</dd>
</dl>

Please note that dataviews don't have any labels, thus the <code type=""xml""><label></code> subelement is ignored.

The exposed model must have the exact and constant number of columns. Hierarchical models aren't supported. It must also have data for the following roles on its horizontal header items:

<dl>
<dt>Qt::DisplayRole</dt>
<dd>The human-readable name of the setting.</dd>
<dt>LeechCraft::DataSources::DataSourceRole::FieldType</dt>
<dd>Must contain an <code>int</code> value equal to a member of the <code>LeechCraft::DataSources::DataFieldType</code> enumeration.</dd>
<dt>LeechCraft::DataSources::DataSourceRole::FieldValues</dt>
<dd>A <code>QVariantList</code> of <code>QVariantMap</code>s with the possible values of the type corresponding to the <code>FieldType</code> of the item. Currently only used for <code>DataFieldType::Enum</code> items. The maps should contain the following keys:
<ul>
<li><em>Icon</em> with a value of type <code>QIcon</code>.</li>
<li><em>Name</em> with a value of type <code>QString</code>.</li>
<li><em>ID</em> with a vlaue of any type, it will be passed back in <code>addRequested</code> function.</li>
</ul></dd>
</dl>

Stuff in the <code>LeechCraft::DataSources</code> namespace is defined in <code>xmlsettingsdialog/datasourceroles.h</code> header.

The model columns are expected to contain values of types corresponding to the <code>DataSourceRole::FieldType</code>.

Moreover, the exposed model must have a parent, and the parent must have the following methods for adding, modifying and removing of rows to work correctly:
<dl>
<dt><code>void addRequested (const QString& propertyName, const QVariantList& datas)</code></dl>
<dd><ul>
<li><code>const QString& propertyName</code> is the value of the <em>property</em> attribute of the <code>dataview</code> item. It is used to distinguish between different <code>dataview</code>s having models with the same parent.</li>
<li><code>const QVariant& datas</code> is the variant list with the data of the row to append. one variant per column.</li>
</ul>
</dd>
<dt><code>void modifyRequested (const QString& propertyName, int row, const QVariantList& datas)</code></dl>
<dd><ul>
<li><code>const QString& propertyName</code> is the value of the <em>property</em> attribute of the <code>dataview</code> item. It is used to distinguish between different <code>dataview</code>s having models with the same parent.</li>
<li><code>int row</code> is the index of the row to modify.</li>
<li><code>const QVariant& datas</code> is the variant list with the data of the row to append. one variant per column.</li>
</ul>
</dd>
<dt><code>void removeRequested (const QString& propertyName, const QModelIndexList& rows)</code></dl>
<dd><ul>
<li><code>const QString& propertyName</code> is the value of the <em>property</em> attribute of the <code>dataview</code> item. It is used to distinguish between different <code>dataview</code>s having models with the same parent.</li>
<li><code>const QModelIndexList& rows</code> is the list of the rows to remove. The list is sorted in reverse order so you can just iterate over it and remove the indexes from the model.</li>
</ul>
</dd>
</dl>

Example:
<code type=""xml"">
<item type=""dataview"" property=""RootPathsView"" />
</code>","<h2>Basic description</h2>

Having settings in your plugin boils down to implementing the <a href=""http://doc.leechcraft.org/core/class_i_have_settings.html"">IHaveSettings</a> interface and writing an XML file with the description of the settings. The XML file defines the settings that your plugin exposes to the user via the XmlSettingsDialog (further referred as XSD) system.

<h2>C++ side</h2>

<h3>Implementing IHaveSettings</h3>

Implementing <code>IHaveSettings</code> typically consists of the following steps:
<ol>
<li>creating a class that is responsible for keeping settings' values, derived from BaseSettingsManager and typically called XmlSettingsManager (see the example below);</li>
<li>instantiating a <code>XmlSettingsDialog</code> class;</li>
<li>registering your settings file and settings manager in the just instantiated <code>XmlSettingsDialog</code> object via <code>RegisterObject</code>;</li>
<li>returning the instantiated object of <code>XmlSettingsDialog</code> from the <code>IHaveSettings::GetSettingsDialog ()</code> method.</li>
</ol>

<h3>XmlSettingsManager example</h3>

<code type=""bash"">xmlsettingsmanager.h</code>:
<code>
#pragma once

#include <xmlsettingsdialog/basesettingsmanager.h>

namespace LeechCraft
{
namespace LMP
{
	class XmlSettingsManager : public Util::BaseSettingsManager
	{
		Q_OBJECT

		XmlSettingsManager ();
	public:
		static XmlSettingsManager& Instance ();
	protected:
		virtual QSettings* BeginSettings () const;
		virtual void EndSettings (QSettings*) const;
	};
}
}
</code>

<code type=""bash"">xmlsettingsmanager.h</code>:
<code>
#include ""xmlsettingsmanager.h""
#include <QCoreApplication>

namespace LeechCraft
{
namespace LMP
{
	XmlSettingsManager::XmlSettingsManager ()
	{
		Util::BaseSettingsManager::Init ();
	}

	XmlSettingsManager& XmlSettingsManager::Instance ()
	{
		static XmlSettingsManager manager;
		return manager;
	}

	QSettings* XmlSettingsManager::BeginSettings () const
	{
		QSettings *settings = new QSettings (QCoreApplication::organizationName (),
				QCoreApplication::applicationName () + ""_LMP"");
		return settings;
	}

	void XmlSettingsManager::EndSettings (QSettings*) const
	{
	}
}
}
</code>

Don't forget to include the license header!

<h3>Manipulating settings values</h3>

Getting a value of a setting is a matter of calling the <code>property ()</code> method on your settings manager object, like this:
<code>
const bool isScrobblingEnabled = XmlSettingsManager::Instance ().property (""ShouldScrobble"").toBool ();
const auto& username = XmlSettingsManager::Instance ().property (""Username"").toString ();
</code>

You can also update the settings from your C++ code, and the GUI will update itself, though that's rarely needed. For that, just call <code>setProperty</code>, for example:
<code>
if (UsernameConflict (username))
    XmlSettingsManager::Instance ().setProperty (""Username"", username + ""_lc"");
</code>

<h3>Subscribing to property changes</h3>

One calls the <code>BaseSettingsManager::RegisterObject</code> method to register a metamethod to be invoked when a property changes. The metamethod must have no parameters and return nothing. Please note that it isn't invoked upon registration, so you should do that yourself if you need to.

For example:
<code>
XmlSettingsManager::Instance ().RegisterObject (""TransitionTime"",
		this, ""setTransitionTime"");
setTransitionTime ();
</code>
and the <code>setTransitionTime ()</code> body:
<code>
void Player::setTransitionTime ()
{
	const int time = XmlSettingsManager::Instance ()
			.property (""TransitionTime"").toInt ();
	Source_->SetTransitionTime (time);
}
</code>

<h2>XML description</h2>

XML description file defines a tree of settings items and their types, like a string, an integer, a real number, a local path or a color.

The basic element of the settings file is <code type=""xml""><item></code>. This is the exact element that defines a single option, its type, default value, human-readable name and sometimes a tooltip. The <code type=""xml""><item></code> must have three attributes:
<dl>
<dt><code type=""xml"">type</code></dt>
<dd>Defines the type of the item, like a checkbox for boolean options, a line edit for strings, etc. The full list of available types is given in the end of this page.</dd>
<dt><code type=""xml"">property</code></dt>
<dd>The identifier of this option. It is used to manipulate the value of this option via the <code>XmlSettingsManager</code> class from the C++ side.</dd>
<dt><code type=""xml"">default</code></dt>
<dd>The default value of this option. The possible values depend on the option <code>type</code>, for example, a <code type=""xml""><item type=""checkbox""></code> only accepts <code>""true""</code> or <code>""false""</code> values, while an <code><item type=""lineedit""></code> can accept literally everything.</dd>
</dl>

Some option types may have additional attributes, they are documented later on.

For example (please note it's not a full XML, just a tiny bit of it):
<code type=""xml"">
<item type=""checkbox"" property=""ShowTrayIcon"" default=""false"">
	<label value=""Show tray icon"" />
</item>
</code>

The items are organized in pages (defined by the <code type=""xml""><page></code> element), which can be further divided into tabs (defined by the <code type=""xml""><tab></code> element). There are also two containers, a <code type=""xml""><groupbox></code> element, which just visually groups its children in UI, and <code type=""xml""><item type=""groupbox"" checkable=""true""></code>, which is an item itself and also groups its children but also has a checkbox near its label, and the children are unavailable if the checkbox is in the disabled state.

Most items ranging from pages and tabs to every tiny spinbox out there support labels — human-readable pieces of texts that name the option for the user. Labels are defined by a <code type=""xml""><item></code>'s subelement <code type=""xml""><label></code>.

For example, KBSwitch has the following XML setting file:
<code type=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<settings>
	<page>
		<label value=""KBSwitch"" />
		<tab>
			<label value=""General settings"" />
			<item type=""combobox"" property=""SwitchingPolicy"">
				<label value=""Keboard layout switching policy (LeechCraft window):"" />
				<option name=""global"" default=""true"">
					<label value=""Use system layout"" />
				</option>
				<option name=""plugin"">
					<label value=""Keyboard layout per plugin"" />
				</option>
				<option name=""tab"">
					<label value=""Keyboard layout per tab"" />
				</option>
			</item>
			<item type=""groupbox"" checkable=""true"" property=""ManageSystemWide"" default=""false"">
				<label value=""Manage keyboard layouts system-wide"" />
				<item type=""combobox"" property=""KeyboardModel"" mayHaveDataSource=""true"">
					<label value=""Keyboard model:"" />
				</item>
			</item>
		</tab>
		<tab>
			<label value=""Layouts"" />
			<item type=""customwidget"" name=""LayoutsConfigWidget"" label=""own"" />
		</tab>
		<tab>
			<label value=""Options"" />
			<item type=""customwidget"" name=""OptionsConfigWidget"" label=""own"" />
		</tab>
	</page>
</settings>
</code>

LMP module has the following:
<code type=""xml"">
<?xml version=""1.0"" encoding=""UTF-8""?>
<settings>
	<page>
		<label value=""Appearance"" />
		<item type=""checkbox"" property=""ShowTrayIcon"" default=""false"">
			<label value=""Show tray icon"" />
		</item>
		<item type=""checkbox"" property=""UseNavTabBar"" default=""false"">
			<label value=""Use tabs for switching pages"" />
		</item>
		<item type=""checkbox"" property=""AutocenterCurrentTrack"" default=""true"">
			<label value=""Automatically center on current track"" />
		</item>
		<item type=""lineedit"" property=""SingleTrackDisplayMask"" default=""$artist - $album - $title"">
			<label value=""Format for single tracks in playlist:"" />
			<tooltip>The following variables are allowed: &lt;em>$artist&lt;/em>, &lt;em>$year&lt;/em>, &lt;em>$album&lt;/em>, &lt;em>$trackNumber&lt;/em>, &lt;em>$title&lt;/em>.</tooltip>
		</item>
	</page>
	<page>
		<label value=""Behavior"" />
		<item type=""checkbox"" property=""EnableNotifications"" default=""true"">
			<label value=""Enable notifications"" />
		</item>
		<item type=""checkbox"" property=""EnableScrobbling"" default=""true"">
			<label value=""Enable scrobbling"" />
			<tooltip>This option requires at least one other scrobbler plugin, like LastFMScrobble, for example.</tooltip>
		</item>
		<item type=""checkbox"" property=""RequestLyrics"" default=""true"">
			<label value=""Request lyrics"" />
		</item>
		<item type=""checkbox"" property=""AutoFetchAlbumArt"" default=""true"">
			<label value=""Automatically fetch missing album art"" />
		</item>
		<item type=""checkbox"" property=""RememberUsedProviders"" default=""true"">
			<label value=""Remember used data providers"" />
		</item>
		<item type=""checkbox"" property=""SortWithThe"" default=""true"">
			<label value=""Take 'The' into account when sorting"" />
		</item>
		<item type=""checkbox"" property=""FollowSymLinks"" default=""false"">
			<label value=""Follow symbolic links"" />
		</item>
		<item type=""checkbox"" property=""AutoContinuePlayback"" default=""false"">
			<label value=""Continue playback automatically"" />
		</item>
		<item type=""path"" property=""CoversStoragePath"" default=""{LCDIR}/lmp/covers"">
			<label value=""Album art storage path:"" />
		</item>
		<item type=""spinbox"" property=""TransitionTime"" default=""0"" step=""100"" minimum=""-10000"" maximum=""10000"">
			<label value=""Transition time between tracks:"" />
			<suffix value="" ms"" />
			<tooltip value=""Setting this to positive values introduces a gap between tracks. Negative values enable crossfade. Zero requests gapless playback."" />
		</item>
	</page>
	<page>
		<label value=""Collection"" />
		<groupbox>
			<label value=""Root paths"" />
			<item type=""dataview"" property=""RootPathsView"" />
		</groupbox>
	</page>
	<page>
		<label value=""Plugin communication"" />
		<item type=""groupbox"" property=""TestOnly"" state=""on"" checkable=""true"">
			<label value=""Test only these extensions"" />
			<item type=""lineedit"" property=""TestExtensions"" default=""avi flac flv mkv mp3 mp4 ogg"">
				<label value=""Extenstions list:"" />
			</item>
		</item>
	</page>
</settings>
</code>

<h3>Item types</h3>

<h4>checkbox</h4>

<code type=""xml""><item type=""checkbox""></code> defines a boolean option that can be toggled. It has no additional options.

Example:
<code type=""xml"">
<item type=""checkbox"" property=""ShowTrayIcon"" default=""false"">
	<label value=""Show tray icon"" />
</item>
</code>

<h4>combobox</h4>

<code type=""xml""><item type=""combobox""></code> defines a combobox with a list of options, one of which can be chosen. The list may be either static or dynamic.

In case of static option lists, each option is defined by an <code type=""xml""><option></code> element, which should have a <code type=""xml"">name=""value""</code> attribute. The <code>value</code> string is returned by the <code>BaseSettingsManager::property()</code> method.

An option can be marked as default by having the <code type=""xml"">default=""true""</code> attribute.

Static options list example:
<code type=""xml"">
<item type=""combobox"" property=""SelectionBehavior"">
	<label value=""Tab selection behavior: "" />
	<option name=""PreviousActive"" default=""true"">
		<label value=""Select the previously selected tab"" />
	</option>
	<option name=""NextIndex"">
		<label value=""Select the tab to the right of the one being removed"" />
	</option>
	<option name=""PreviousIndex"">
		<label value=""Select the tab to the left of the one being removed"" />
	</option>
</item>
</code>

If the user selects, for example, the second option, the corresponding <code>property (""SelectionBehavior"").toString ()</code> call will return the <code>QString (""NextIndex"")</code> value.

<h4>dataview</h4>

<code>dataview</code> item defines a view for a C++ model exposed from the plugin and registered via the <code>XmlSettingsDialog::SetDataSource(const QString& propertyName, QAbstractItemModel *model)</code> method.

<code type=""xml""><item type=""dataview""></code> supports the following attributes:
<dl>
<dt><code>addEnabled</code></dt>
<dd>If <code>""false""</code>, adding to the model via XSD isn't allowed (for example, the <em>Add</em> button is inactive).</dd>
<dt><code>modifyEnabled</code></dt>
<dd>If <code>""false""</code>, modifying model data via XSD isn't allowed (for example, the <em>Modify</em> button is inactive).</dd>
<dt><code>removeEnabled</code></dt>
<dd>If <code>""false""</code>, removing data from the model via XSD isn't allowed (for example, the <em>Remove</em> button is inactive).</dd>
</dl>

Please note that dataviews don't have any labels, thus the <code type=""xml""><label></code> subelement is ignored.

The exposed model must have the exact and constant number of columns. Hierarchical models aren't supported. It must also have data for the following roles on its horizontal header items:

<dl>
<dt>Qt::DisplayRole</dt>
<dd>The human-readable name of the setting.</dd>
<dt>LeechCraft::DataSources::DataSourceRole::FieldType</dt>
<dd>Must contain an <code>int</code> value equal to a member of the <code>LeechCraft::DataSources::DataFieldType</code> enumeration.</dd>
<dt>LeechCraft::DataSources::DataSourceRole::FieldValues</dt>
<dd>A <code>QVariantList</code> of <code>QVariantMap</code>s with the possible values of the type corresponding to the <code>FieldType</code> of the item. Currently only used for <code>DataFieldType::Enum</code> items. The maps should contain the following keys:
<ul>
<li><em>Icon</em> with a value of type <code>QIcon</code>.</li>
<li><em>Name</em> with a value of type <code>QString</code>.</li>
<li><em>ID</em> with a vlaue of any type, it will be passed back in <code>addRequested</code> function.</li>
</ul></dd>
</dl>

Stuff in the <code>LeechCraft::DataSources</code> namespace is defined in <code>xmlsettingsdialog/datasourceroles.h</code> header.

The model columns are expected to contain values of types corresponding to the <code>DataSourceRole::FieldType</code>.

Moreover, the exposed model must have a parent, and the parent must have the following methods for adding, modifying and removing of rows to work correctly:
<dl>
<dt><code>void addRequested (const QString& propertyName, const QVariantList& datas)</code></dl>
<dd><ul>
<li><code>const QString& propertyName</code> is the value of the <em>property</em> attribute of the <code>dataview</code> item. It is used to distinguish between different <code>dataview</code>s having models with the same parent.</li>
<li><code>const QVariant& datas</code> is the variant list with the data of the row to append. one variant per column.</li>
</ul>
</dd>
<dt><code>void modifyRequested (const QString& propertyName, int row, const QVariantList& datas)</code></dl>
<dd><ul>
<li><code>const QString& propertyName</code> is the value of the <em>property</em> attribute of the <code>dataview</code> item. It is used to distinguish between different <code>dataview</code>s having models with the same parent.</li>
<li><code>int row</code> is the index of the row to modify.</li>
<li><code>const QVariant& datas</code> is the variant list with the data of the row to append. one variant per column.</li>
</ul>
</dd>
<dt><code>void removeRequested (const QString& propertyName, const QModelIndexList& rows)</code></dl>
<dd><ul>
<li><code>const QString& propertyName</code> is the value of the <em>property</em> attribute of the <code>dataview</code> item. It is used to distinguish between different <code>dataview</code>s having models with the same parent.</li>
<li><code>const QModelIndexList& rows</code> is the list of the rows to remove. The list is sorted in reverse order so you can just iterate over it and remove the indexes from the model.</li>
</ul>
</dd>
</dl>

Example:
<code type=""xml"">
<item type=""dataview"" property=""RootPathsView"" />
</code>"
516,story,Maillist moved,1381761069,maillist-moved,"Hi there.

Our maillist previously hosted on SourceForge has moved to <a href=""https://groups.google.com/forum/#!forum/leechcraft"">Google Groups</a> primarily due to the insane amount of spam on the former.

The maillist is both for users and devs, and we see it as a way to discuss stuff that requires more concern and time to think about than what's typically discussed in our XMPP room. It also compensates somewhat the lack of forums on our site.","Hi there.

Our maillist previously hosted on SourceForge has moved to <a href=""https://groups.google.com/forum/#!forum/leechcraft"">Google Groups</a> primarily due to the insane amount of spam on the former.

The maillist is both for users and devs, and we see it as a way to discuss stuff that requires more concern and time to think about than what's typically discussed in our XMPP room. It also compensates somewhat the lack of forums on our site."
518,story,Autobuilds service,1382830242,autobuilds-service,"We've finally managed to set up a continious integration server: meet our <a href=""http://leechcraft.org:8080"">Jenkins instance</a>!

For now it only uses a Debian Unstable build node to test as full plugins set as the distro supports, but we think of adding a couple of other build nodes to test builds on common distros like recent openSUSE and Ubuntu versions. Seems like we can also perform test builds of GitHub pull requests automatically as well, but that requires some more elaboration.

A CI server also allowed me to migrate to clang as a primary compiler instead of gcc, leading to faster compile times, better error messages and more issues caught in the code thanks to the warnings. If I'd migrate to clang without anything like a CI system I'd have to manually run gcc over the code quite often since gcc has its own quirks. Or maintainers would have quite a lot of build failures.

Less pain for the maintainers, more fun!","We've finally managed to set up a continious integration server: meet our <a href=""http://leechcraft.org:8080"">Jenkins instance</a>!

For now it only uses a Debian Unstable build node to test as full plugins set as the distro supports, but we think of adding a couple of other build nodes to test builds on common distros like recent openSUSE and Ubuntu versions. Seems like we can also perform test builds of GitHub pull requests automatically as well, but that requires some more elaboration.

A CI server also allowed me to migrate to clang as a primary compiler instead of gcc, leading to faster compile times, better error messages and more issues caught in the code thanks to the warnings. If I'd migrate to clang without anything like a CI system I'd have to manually run gcc over the code quite often since gcc has its own quirks. Or maintainers would have quite a lot of build failures.

Less pain for the maintainers, more fun!"
520,story,XMPP conference moved,1384088650,xmpp-conference-moved,"The jabber.ru server has some stability issues lately, so we've decided to move our XMPP discussion to the <a href=""xmpp:leechcraft@conference.leechcraft.org?join"">leechcraft@conference.leechcraft.org</a> conference. Please update your bookmarks!

Well, not moved, actually. We still will be available at the old jabber.ru server, but all the discussion (hopefully) will happen on the leechcraft.org.","The jabber.ru server has some stability issues lately, so we've decided to move our XMPP discussion to the <a href=""xmpp:leechcraft@conference.leechcraft.org?join"">leechcraft@conference.leechcraft.org</a> conference. Please update your bookmarks!

Well, not moved, actually. We still will be available at the old jabber.ru server, but all the discussion (hopefully) will happen on the leechcraft.org."
522,page,Blasq,1395159254,plugins-blasq,"Blasq is the client for various cloud image storage services, like Flickr or Picasa. The exact storage services, which are listed below, are implemented via subplugins.

Blasq supports both fetching image collections and the images themselves and uploading images to remote services (where applicable). Other plugins like [503: Blogique] may also use Blasq for inserting images into blog posts, for example.

<h2>Screenshots</h2>

[img_assist|nid=554|title=|desc=|link=popup|width=440]
[img_assist|nid=555|title=|desc=|link=popup|width=440]

<h2>Features</h2>

<ul>
<li>Fetch image collections.</li>
<li>Display and download images.</li>
<li>Upload images to the cloud image storages (including mass upload).</li>
<li>Delete images.</li>
<li>Support for the [529: data filter] concept for uploading images from other plugins.</li>
</ul>

Please note the list of supported features may differ from service to service.

<h2>Supported services</h2>

<dl>
<dt>Flickr</dt>
<dd>Via the Spegnersi subplugin. Image uploads aren't supported yet.</dd>
<dt>LiveJournal FotoBilder</dt>
<dd>Via the DeathNote subplugin.</dd>
<dt>Picasa</dt>
<dd>Via the Vangog subplugin.</dd>
<dt>VKontakte</dt>
<dd>Via the Rappor subplugin.</dd>
</dl>","Blasq is the client for various cloud image storage services, like Flickr or Picasa. The exact storage services, which are listed below, are implemented via subplugins.

Blasq supports both fetching image collections and the images themselves and uploading images to remote services (where applicable). Other plugins like [503: Blogique] may also use Blasq for inserting images into blog posts, for example.

<h2>Screenshots</h2>

[img_assist|nid=554|title=|desc=|link=popup|width=440]
[img_assist|nid=555|title=|desc=|link=popup|width=440]

<h2>Features</h2>

<ul>
<li>Fetch image collections.</li>
<li>Display and download images.</li>
<li>Upload images to the cloud image storages (including mass upload).</li>
<li>Delete images.</li>
<li>Support for the [529: data filter] concept for uploading images from other plugins.</li>
</ul>

Please note the list of supported features may differ from service to service.

<h2>Supported services</h2>

<dl>
<dt>Flickr</dt>
<dd>Via the Spegnersi subplugin. Image uploads aren't supported yet.</dd>
<dt>LiveJournal FotoBilder</dt>
<dd>Via the DeathNote subplugin.</dd>
<dt>Picasa</dt>
<dd>Via the Vangog subplugin.</dd>
<dt>VKontakte</dt>
<dd>Via the Rappor subplugin.</dd>
</dl>"
524,page,Devmon,1386589759,plugins-devmon,Devmon is udev-based non-storage USB device monitor. Other plugins like LMP MTPSync use it to get notifications about new or removed USB devices like modern smartphones based on Android 4.x.,Devmon is udev-based non-storage USB device monitor. Other plugins like LMP MTPSync use it to get notifications about new or removed USB devices like modern smartphones based on Android 4.x.
526,page,Imgaste,1386591474,plugins-imgaste,"Imgaste uploads images from other plugins to image pastebins like imagebin.ca or dump.bitcheese.net. For example, [12: Auscrie] and [26: Poshuku] use it to upload screenshots and web page shots, respectively.

It is an implementation of the image [529: data filters] concept.

<h2>Supported services</h2>

<ul>
<li>dump.bitcheese.net</li>
<li>imagebin.ca</li>
<li>savepic.ru</li>
</ul>","Imgaste uploads images from other plugins to image pastebins like imagebin.ca or dump.bitcheese.net. For example, [12: Auscrie] and [26: Poshuku] use it to upload screenshots and web page shots, respectively.

It is an implementation of the image [529: data filters] concept.

<h2>Supported services</h2>

<ul>
<li>dump.bitcheese.net</li>
<li>imagebin.ca</li>
<li>savepic.ru</li>
</ul>"
528,book,LeechCraft concepts,1386590791,concepts,LeechCraft has quite a few concepts that relate rather to interaction and communication between plugins then to separate plugins. This book is about these concepts.,LeechCraft has quite a few concepts that relate rather to interaction and communication between plugins then to separate plugins. This book is about these concepts.
529,book,Data filters,1387720648,concepts-data-filters,"Data filters are plugins that consume some data like text or images from other plugins. They may be the end point of processing or pass it further to other plugins.

<h3>Example</h3>

A [12: screenshot tool] may save or upload the screenshots itself, or it may just pass this duty to the image data filters. The filters could then upload the image to a dumb imagebin, or to a collection on Flickr, or perform arbitrary modifications to the image (like applying Instagram-like filters) and pass it along to other data filters.

A [381: document reader] can pass the selected text to text data filters for [23: searching in Opensearch engines] or uploading it to a pastebin. The following screenshot illustrates this:
[img_assist|nid=532|title=Data filters in Monocle|desc=|link=popup|width=440]

The exact functionality of the data filters doesn't matter to the plugin producing the data. Moreover, data filter plugins are ""passive"" — that is, data is fed to them by data producers. The producer plugins can choose between different data filters, with or without user interaction.

<h2>Data filter types</h2>

<h3>Image data filters</h3>

<ul>
<li>[526: Imgaste]</li>
</ul>

<h3>Text data filters</h3>

<ul>
<li>Pogooglue</li>
<li>[23: SeekThru]</li>
</ul>

<h2>Modules using data filters</h2>

<h3>Image filters</h3>

<ul>
<li>[12: Auscrie] for handling screenshots.</li>
<li>[381: Monocle] for handling selected parts of a document as images.</li>
<li>[26: Poshuku] for handling full-length web page shots.</li>
</ul>

<h3>Text data filters</h3>
<ul>
<li>[143: Azoth] for handling selected chat text.</li>
<li>[381: Monocle] for handling selected document text.</li>
<li>[26: Poshuku] for handling selected text on web pages.</li>
</ul>","Data filters are plugins that consume some data like text or images from other plugins. They may be the end point of processing or pass it further to other plugins.

<h3>Example</h3>

A [12: screenshot tool] may save or upload the screenshots itself, or it may just pass this duty to the image data filters. The filters could then upload the image to a dumb imagebin, or to a collection on Flickr, or perform arbitrary modifications to the image (like applying Instagram-like filters) and pass it along to other data filters.

A [381: document reader] can pass the selected text to text data filters for [23: searching in Opensearch engines] or uploading it to a pastebin. The following screenshot illustrates this:
[img_assist|nid=532|title=Data filters in Monocle|desc=|link=popup|width=440]

The exact functionality of the data filters doesn't matter to the plugin producing the data. Moreover, data filter plugins are ""passive"" — that is, data is fed to them by data producers. The producer plugins can choose between different data filters, with or without user interaction.

<h2>Data filter types</h2>

<h3>Image data filters</h3>

<ul>
<li>[526: Imgaste]</li>
</ul>

<h3>Text data filters</h3>

<ul>
<li>Pogooglue</li>
<li>[23: SeekThru]</li>
</ul>

<h2>Modules using data filters</h2>

<h3>Image filters</h3>

<ul>
<li>[12: Auscrie] for handling screenshots.</li>
<li>[381: Monocle] for handling selected parts of a document as images.</li>
<li>[26: Poshuku] for handling full-length web page shots.</li>
</ul>

<h3>Text data filters</h3>
<ul>
<li>[143: Azoth] for handling selected chat text.</li>
<li>[381: Monocle] for handling selected document text.</li>
<li>[26: Poshuku] for handling selected text on web pages.</li>
</ul>"
532,image,Monocle with data filters,1386594722,,Monocle with the selected part of a PDF document ready to be processed by [529: data filters]. Both text and image data filters are illustrated.,Monocle with the selected part of a PDF document ready to be processed by [529: data filters]. Both text and image data filters are illustrated.
533,page,Laughty,1386941272,plugins-laughty,"Laughty is a simple D-Bus user session daemon for desktop notifications. It listens for notifications from other applications via the libnotify D-Bus protocol and uses standard LeechCraft modules like [210: AdvancedNotifications] or [155: Kinotify] to display the notifications.

<h2>Features</h2>

The following features from the D-Bus protocol are supported:
<ul>
<li>Actions in notifications.</li>
<li>HTML markup in notifications text.</li>
<li>Images in notifications text.</li>
<li>Persistent notifications (with [210: AdvancedNotifications]).</li>
</ul>

Additionally, the [210: AdvancedNotifications] module can be used to better configure notification parameters for different notifications depending on their categories, text, etc.","Laughty is a simple D-Bus user session daemon for desktop notifications. It listens for notifications from other applications via the libnotify D-Bus protocol and uses standard LeechCraft modules like [210: AdvancedNotifications] or [155: Kinotify] to display the notifications.

<h2>Features</h2>

The following features from the D-Bus protocol are supported:
<ul>
<li>Actions in notifications.</li>
<li>HTML markup in notifications text.</li>
<li>Images in notifications text.</li>
<li>Persistent notifications (with [210: AdvancedNotifications]).</li>
</ul>

Additionally, the [210: AdvancedNotifications] module can be used to better configure notification parameters for different notifications depending on their categories, text, etc."
535,page,Scroblibre,1386942231,plugins-scroblibre,"Scroblibre is a scrobbling plugin for modules like [20: LMP] allowing to scrobble to services supporting the Submissions API 1.2.

Scroblibre doesn't offer all the features of [344: LastFMScrobble] and supports only the scrobbling, while the latter also supports all nice social features of Last.FM, like similar artists, recommendations or recent releases.

<h2>Supported services</h2>

<ul>
<li>libre.fm</li>
</ul>

Let us know if you are aware about more scrobbling services!","Scroblibre is a scrobbling plugin for modules like [20: LMP] allowing to scrobble to services supporting the Submissions API 1.2.

Scroblibre doesn't offer all the features of [344: LastFMScrobble] and supports only the scrobbling, while the latter also supports all nice social features of Last.FM, like similar artists, recommendations or recent releases.

<h2>Supported services</h2>

<ul>
<li>libre.fm</li>
</ul>

Let us know if you are aware about more scrobbling services!"
537,image,Azoth user guide image 1,1387216025,,"",""
538,image,Azoth user guide image 2,1387216341,,"",""
539,image,Azoth user guide image 3,1387216520,,"",""
540,book,"Azoth howto, part 2",1387573793,user-guide-azoth-howto-part-2,"If you managed to get through the issues of constructing your set of modules and decided to bring up the client, you'll be greeted with the welcome screen, and the application window itself. A notification about hundreds of user packages in Lackman also appears (here and below all beforementioned modules are assumed to be active). We'll get back to them alter.

You could note the rubber band with the word <em>Azoth</em> on top of the contact list (also called as <em>roster</em>, by default placed on the right part of the window). Dragging this rubber band (1 on pic. 1) widgets can be moved and attached to different parts of the window. I prefer keeping the roster on the left part to keep most of the information in the same part of the screen, as long messages don't get over the half of the screen. I also keep the sb2 panel at the bottom. Pressing the configuration button on sb2 (2 on pic. 1) will bring up settings mode with the element (3 on pic. 1) for moving panel between different window sides. Other quarks will also get a red minus sign (4 on pic. 1) which can be used to hide the quarks. A hidden quark can be brought back by pressing a green plus sign (5 on pic. 1), appearing near the configuration button.

[img_assist|nid=537|title=Picture 1|desc=|link=popup|width=440]

Let's get to our trip into LeechCraft world and add a few IM accounts to start chatting! Press the first button in the roster (1 on pic. 2), then ""Add account…"" (2 on pic. 2). It's worth noting that native IRC implementation is in the beginning of the protocol list, while native XMPP is in the end. It is recommended to use native implementations as they have the widest features set.

[img_assist|nid=538|title=Picture 2|desc=|link=popup|width=440]

After adding the accounts we can change the global status by the button above the roster (1 on pic. 3) or for each account separately by right-clicking the account in the roster (2 on pic. 3). Then we enter the password. After coming online I immediately turn off displaying offline contacts by pressing the corresponding button on top of the roster (3 on pic. 3).

[img_assist|nid=539|title=Picture 3|desc=|link=popup|width=440]

After that we click the LC button (1 on pic. 4) to get to the settings (2 on pic. 4) of the Azoth (3 on pic. 4) module. There are a few settings worth noting on the <em>Behavior</em> page (1 on pic. 5). The <em>Roster</em> tab (2 on pic. 5) has an option to activate contacts by double click (3 on pic. 5). If you feel like using multiuser chats, you may also activate automatic contact list mode switching (4 on pic. 5) and hiding conferences participants in common contact list (5 on pic. 5). Please note the buttons to apply (6 on pic. 5) the settings (don't forget to press it!) or cancel (7 on pic. 5) changes, or to go back (8 on pic. 5).

[img_assist|nid=541|title=Picture 4|desc=|link=popup|width=440]
[img_assist|nid=542|title=Picture 5|desc=|link=popup|width=440]

If your account has bookmarked multiuser chats with autojoin turned on, you can toggle automatic chat tabs opening (3 on pic. 6) in tabs (2 on pic. 6) behavior (1 on pic. 6) options group. Bookmarked conferences can be joined manually via the account (4 on pic. 6) context menu (5 on pic. 6). After joining conferences are added as roster entries (6 on pic. 6), and their participants all reside in a single contact list group. You can use the line edit above the roster (7 on pic. 6) to search for an entry in the contact list. Roster display mode can be toggled between full view and conference view by the rightest button above the roster (8 on pic. 6), which also has a configurable shortcut.

[img_assist|nid=543|title=Picture 6|desc=|link=popup|width=440]

Meanwhile one can go to the <em>Appearance</em> page (1 on pic. 7), then to the <em>Chat windows</em> tab to disable formatted messages (3 on pic. 7) to avoid some Pidgin-related issues, for example. Minimal message edit height (4 on pic. 7) can also be configured there (I prefer two lines). Moreover, here resides the font size option (5 on pic. 7). The fonts themselves can be configured (3 on pic. 8)  on the corresponding tab (2 on pic. 8) of the <em>Appearance</em> tab again (1 on pic. 8).

[img_assist|nid=544|title=Picture 7|desc=|link=popup|width=440]
[img_assist|nid=545|title=Picture 8|desc=|link=popup|width=440]

Next, we can configure the height of a single roster entry (3 on pic. 9) in <em>Contact list</em> tab (2 on pic. 9) of <em>Appearance</em> page (1 on pic. 9). On the same page (1 on pic. 10) we can go to <em>Chat windows</em> tab (2 on pic. 10) and configure chat styles (3 on pic. 10). Changing a complex Adium theme can take some time if you have a dozen of opened chat windows, so it's recommended to close (almost all of) them before changing the styles. The various iconsets can be also changes on the same page.

[img_assist|nid=546|title=Picture 9|desc=|link=popup|width=440]
[img_assist|nid=547|title=Picture 10|desc=|link=popup|width=440]

You can change the global LeechCraft color scheme in the settings (1 on pic. 11) of the LeechCraft core (2 on pic. 11), particularly on the <em>Appearance</em> page (1 on pic. 12), choosing the proper color theme (2 on pic. 12). There you can also set the default system iconset or choose another icon theme (3 on pic. 12).

[img_assist|nid=548|title=Picture 11|desc=|link=popup|width=440]
[img_assist|nid=549|title=Picture 12|desc=|link=popup|width=440]

As the final part of our preliminary configuration we can set the default status texts (2 on pic. 13) in status settings (1 on pic. 13). We can also create custom predefined statuses (2 on pic. 13) and entering arbitrary text on the fly via the <em>Custom</em> action (4 on pic. 13) of the status change button above the roster (5 on pic. 13). Similarly, custom statuses can also be defined on the per-account basis via the accounts context menu.

[img_assist|nid=550|title=Picture 13|desc=|link=popup|width=440]

<em>This guide is originally written by DarkneSS in Russian. Translated to English by 0xd34df00d with minor stylistic and contextual changes.</em>","If you managed to get through the issues of constructing your set of modules and decided to bring up the client, you'll be greeted with the welcome screen, and the application window itself. A notification about hundreds of user packages in Lackman also appears (here and below all beforementioned modules are assumed to be active). We'll get back to them alter.

You could note the rubber band with the word <em>Azoth</em> on top of the contact list (also called as <em>roster</em>, by default placed on the right part of the window). Dragging this rubber band (1 on pic. 1) widgets can be moved and attached to different parts of the window. I prefer keeping the roster on the left part to keep most of the information in the same part of the screen, as long messages don't get over the half of the screen. I also keep the sb2 panel at the bottom. Pressing the configuration button on sb2 (2 on pic. 1) will bring up settings mode with the element (3 on pic. 1) for moving panel between different window sides. Other quarks will also get a red minus sign (4 on pic. 1) which can be used to hide the quarks. A hidden quark can be brought back by pressing a green plus sign (5 on pic. 1), appearing near the configuration button.

[img_assist|nid=537|title=Picture 1|desc=|link=popup|width=440]

Let's get to our trip into LeechCraft world and add a few IM accounts to start chatting! Press the first button in the roster (1 on pic. 2), then ""Add account…"" (2 on pic. 2). It's worth noting that native IRC implementation is in the beginning of the protocol list, while native XMPP is in the end. It is recommended to use native implementations as they have the widest features set.

[img_assist|nid=538|title=Picture 2|desc=|link=popup|width=440]

After adding the accounts we can change the global status by the button above the roster (1 on pic. 3) or for each account separately by right-clicking the account in the roster (2 on pic. 3). Then we enter the password. After coming online I immediately turn off displaying offline contacts by pressing the corresponding button on top of the roster (3 on pic. 3).

[img_assist|nid=539|title=Picture 3|desc=|link=popup|width=440]

After that we click the LC button (1 on pic. 4) to get to the settings (2 on pic. 4) of the Azoth (3 on pic. 4) module. There are a few settings worth noting on the <em>Behavior</em> page (1 on pic. 5). The <em>Roster</em> tab (2 on pic. 5) has an option to activate contacts by double click (3 on pic. 5). If you feel like using multiuser chats, you may also activate automatic contact list mode switching (4 on pic. 5) and hiding conferences participants in common contact list (5 on pic. 5). Please note the buttons to apply (6 on pic. 5) the settings (don't forget to press it!) or cancel (7 on pic. 5) changes, or to go back (8 on pic. 5).

[img_assist|nid=541|title=Picture 4|desc=|link=popup|width=440]
[img_assist|nid=542|title=Picture 5|desc=|link=popup|width=440]

If your account has bookmarked multiuser chats with autojoin turned on, you can toggle automatic chat tabs opening (3 on pic. 6) in tabs (2 on pic. 6) behavior (1 on pic. 6) options group. Bookmarked conferences can be joined manually via the account (4 on pic. 6) context menu (5 on pic. 6). After joining conferences are added as roster entries (6 on pic. 6), and their participants all reside in a single contact list group. You can use the line edit above the roster (7 on pic. 6) to search for an entry in the contact list. Roster display mode can be toggled between full view and conference view by the rightest button above the roster (8 on pic. 6), which also has a configurable shortcut.

[img_assist|nid=543|title=Picture 6|desc=|link=popup|width=440]

Meanwhile one can go to the <em>Appearance</em> page (1 on pic. 7), then to the <em>Chat windows</em> tab to disable formatted messages (3 on pic. 7) to avoid some Pidgin-related issues, for example. Minimal message edit height (4 on pic. 7) can also be configured there (I prefer two lines). Moreover, here resides the font size option (5 on pic. 7). The fonts themselves can be configured (3 on pic. 8)  on the corresponding tab (2 on pic. 8) of the <em>Appearance</em> tab again (1 on pic. 8).

[img_assist|nid=544|title=Picture 7|desc=|link=popup|width=440]
[img_assist|nid=545|title=Picture 8|desc=|link=popup|width=440]

Next, we can configure the height of a single roster entry (3 on pic. 9) in <em>Contact list</em> tab (2 on pic. 9) of <em>Appearance</em> page (1 on pic. 9). On the same page (1 on pic. 10) we can go to <em>Chat windows</em> tab (2 on pic. 10) and configure chat styles (3 on pic. 10). Changing a complex Adium theme can take some time if you have a dozen of opened chat windows, so it's recommended to close (almost all of) them before changing the styles. The various iconsets can be also changes on the same page.

[img_assist|nid=546|title=Picture 9|desc=|link=popup|width=440]
[img_assist|nid=547|title=Picture 10|desc=|link=popup|width=440]

You can change the global LeechCraft color scheme in the settings (1 on pic. 11) of the LeechCraft core (2 on pic. 11), particularly on the <em>Appearance</em> page (1 on pic. 12), choosing the proper color theme (2 on pic. 12). There you can also set the default system iconset or choose another icon theme (3 on pic. 12).

[img_assist|nid=548|title=Picture 11|desc=|link=popup|width=440]
[img_assist|nid=549|title=Picture 12|desc=|link=popup|width=440]

As the final part of our preliminary configuration we can set the default status texts (2 on pic. 13) in status settings (1 on pic. 13). We can also create custom predefined statuses (2 on pic. 13) and entering arbitrary text on the fly via the <em>Custom</em> action (4 on pic. 13) of the status change button above the roster (5 on pic. 13). Similarly, custom statuses can also be defined on the per-account basis via the accounts context menu.

[img_assist|nid=550|title=Picture 13|desc=|link=popup|width=440]

<em>This guide is originally written by DarkneSS in Russian. Translated to English by 0xd34df00d with minor stylistic and contextual changes.</em>"
541,image,Azoth guide image 4,1387414451,,"",""
542,image,Azoth guide image 5,1387414468,,"",""
543,image,Azoth guide image 6,1387572514,,"",""
544,image,Azoth guide image 7,1387573000,,"",""
545,image,Azoth guide image 8,1387573018,,"",""
546,image,Azoth guide image 9,1387573694,,"",""
547,image,Azoth guide image 10,1387573713,,"",""
548,image,Azoth guide image 11,1387573728,,"",""
549,image,Azoth guide image 12,1387573746,,"",""
550,image,Azoth guide image 13,1387573762,,"",""
553,image,Azoth Murm,1387792824,,Azoth with a media-rich VKontakte message.,Azoth with a media-rich VKontakte message.
554,image,Blasq,1387793206,,"",""
555,image,"Blasq, single photo",1387793228,,"",""
557,story,LeechCraft 0.6.60 is released!,1388400770,leechcraft-0.6.60-is-released,"After more than half a year and 4000 commits after previous feature release, 0.5.95, we are proud to announce LeechCraft 0.6.60 ""Accelerated Evolution""!

This version introduces a lot of new plugins, new features in existing plugins and, of course, bugfixes. Well, even the brief changelog omitting non-significant changes is around 300 lines long, and this version has 297 tasks on our tracker (<a href=""http://dev.leechcraft.org/versions/36"">stats included</a>), which is almost three times more than the previous record! So let's see what's new.

<h2>Desktop mode</h2>

LeechCraft already had quite a few plugins offering features that are usually a part of a desktop environment, like a [310: power manager] or [366: removable storage manager], so we decided to take one step further and turn it into a proper Desktop Environment. This day has finally come, jokes aside!

[513: Desktop mode] is a new special mode of LeechCraft which basically turns it into a full-featured desktop environment. For example, the [433: SB2] sidebar (which contains elements like a taskbar or app launcher) turns into a separate always-visible dock panel that covers other applications:
[img_assist|nid=500|title=|desc=|link=popup|width=440]

Desktop mode is activated via the <code>--desktop</code> command line switch, and there are already session files for login managers to offer LeechCraft as a desktop environment.

But desktop mode is not only comprised from customized behavior of existing plugins with hte <code>--desktop</code> switch, it also relies heavily on a few plugins added in this release, like:
<ul>
<li>[492: Fenet] plugin is responsible for autostarting a window manager and possibly a compositing manager. It also installs a <code>.desktop</code> file for login managers to use to properly start LC.</li>
<li>[496: KBSwitch] serves as keyboard layout configurator. It allows configuring the list of keyboard layouts as well as various options, like the button for groups switching, the compose key, etc.</li>
<li>[508: Krigstask] provides a taskbar and a pager quark for [433: SB2].</li>
<li>[510: Mellonetray] provides a system tray area quark for [433: SB2].</li>
<li>[533: Laughty] is a system-wide desktop notifications daemon fetching event notifications from third-party applications and displaying them via LeechCraft plugins like [155: Kinotify].</li>
</ul>

Of course, other plugins like [366: Vrooby], [310: Liznoo] or [397: Launchy] may also be found useful in the desktop mode.

Desktop mode is very experimental for now and in its early stages, some things are known to not work, and we are hoping for some feedback about what should be added or changed.

<h2>LMP improvements</h2>

[20: LMP], our social collection-oriented audio player, migrated from Phonon to pure GStreamer, getting proper gapless playback support and compatibility with GStreamer 1.x. Mac OS X builds can also properly play various files now, while LMP on Mac was dumb during Phonon times.

Some other features are now possible because of the migration, like a proper equalizer, ReplayGain support or visualization. They are planned for future releases, though.

LMP now also supports instant queues when one can schedule some tracks in the playlist to be played right after the current one. This is useful, for example, to finish playback of the current album and then move to completely different artist.

There are a lot of smaller changes and improvements, among them:
<ul>
<li>Automatic tags recoding.</li>
<li>Handling power events to automatically pause playback when going to sleep and continue playback on resume.</li>
<li>Media info is now fetched from the collection (if available) instead of being resolved from the disk, leading to much a couple orders of magnitude faster playlist manipulations.</li>
<li>LMP now supports notifying the user about the progress of operations like transcoding or tags fetching via Job Holder API thus plugins like [435: TPI] or [25: Summary].</li>
<li>Volume change exponent can be configured now.</li>
<li>Images in widgets like biography view or similar artists are now cached.</li>
</ul>

Using LMP as a sound notification backend is broken now, though, and will be fixed shortly after this release. Consider using Dumbeep module for now.

<h2>VK messaging support</h2>

This release also adds support for VKontakte messaging via the new [143: Azoth] subplugin, [472: Azoth Murm].

Murm supports quite a few VKontakte features like friends groups, multiuser chats, and it automatically fetches media content embedded in messages like attached photos, audios, videos and reposts. Murm also offers the audios to be played or queued in media players like LMP:
[img_assist|nid=553|title=|desc=|link=popup|width=440]

The messages can also be encrypted via OTR if the corresponding plugin is installed and if the other chat participant supports OTR encryption.

<h2>Blasq</h2>

[522: Blasq] is our new plugin for cloud image photo albums like Picasa. The exact services are implemented via subplugins, and there are already four of them for Flickr, LiveJournal, Picasa and VKontakte.

[img_assist|nid=554|title=|desc=|link=popup|width=440]

The plugin supports collections of photos, uploading (and mass-uploading) new photos and deleting them. Other plugins like [503: Blogique] may also use Blasq as the source of images to be inserted into blog posts.

<h2>Other new plugins</h2>

A few other plugins have also been added in this release, among them:
<ul>
<li>[524: Devmon] for managing non-mass storage USB devices for plugins like LMP MTPSync (since MTP devices aren't generally mass storage ones).</li>
<li>[526: Imgaste] for uploading images to imagebins. This was previously a part of [12: Auscrie] but has moved out to its separate plugin so that other modules like [26: Poshuku] or [381: Monocle] could [520: benefit] from it.</li>
<li>Xtazy for fetching currently playing tune from MPRIS-compatible players or plugins like LMP. Again, it was a part of Azoth Xtazy before, but has moved out to its own plugin so that, for example, Blogique could also autodetect the current tune.</li>
<li>Sysnotify, a LeechCraft notification backend using the libnotify D-Bus protocol.</li>
<li>[535: Scroblibre], a Submissions API 1.2-compliant scrobbler for services like libre.fm supporting this API.</li>
<li>LMP MTPSync, LMP subplugin for uploading music to devices implementing the MTP protocol.</li>
<li>VtyuLC, experimental VLC-based video player.</li>
</ul>

<h2>Core and existing plugins</h2>

<h3>Azoth and subplugins</h3>

<ul>
<li>Azoth now shows a message in chat log whenever current date changes (at around 00:00).</li>
<li>Shortcuts for erasing text from cursor to begin/end of line or beginning of the current word were added.</li>
<li>It is now possible to change permissions of a room participant in all multiuser chat rooms.</li>
<li>Support for multiple items selection in roster. Some actions like opening a chat or items removal can now be applied to all selected items.</li>
<li>Old messages separator now appears for messages shown from history or before tab opening as well.</li>
<li>Azoth Autopaste now supports hastebin.org and paste.org.ru services, and also remembers last used service and highlighting per each entry.</li>
<li>Azoth StandardStyles now creates hash-based nick colors based on theme background color instead of global application palette leading to way better and more readable nick coloring.</li>
</ul>

<h3>Blogique</h3>

<ul>
<li>Blogique now supports service-specific tags in its WYSIWYG editor, like <code type=""html""><lj-cut /></code> or <code type=""html""><lj user=""someuser""/></code> for LiveJournal, properly displaying them in view mode as well.</li>
<li>Added support for previewing posts.</li>
<li>Blogs can now be exported to various formats like pdf or fb2.</li>
<li>Blogique Metida (LiveJournal support submodule) now supports fetching and modifying friends lists as well as sending and receiving messages.</li>
</ul>

<h3>Poshuku</h3>

[26: Poshuku], our web browser module, now supports [529: data filters] for handling page screenshots, allowing the user to automatically upload them to imagebins, for example.

History handling has been optimized a lot. Particularly, it doesn't make LeechCraft freeze for a few seconds each 15 minutes if the history is quite big now.

[27: Poshuku CleanWeb], the ad blocker, has also been heavily optimized. Particularly, filters parsing and loading is now asynchronous and threaded, greatly reducing module load time. Filtering itself is also threaded now, utlizing all available CPU cores, so page loading is much faster now as well. Filters handling has been improved as well, particularly the element hiding logic which now catches more garbage.

<h3>Error handling</h3>

AnHero depended on KDE's crash handling system before this release, and we've finally rewrote it to avoid this dependency. Now it has its own KDE-free crash handler:
[img_assist|nid=35|title=|desc=|link=popup|width=440]

It is also able now to automatically save crash logs and backtraces as a bonus. On the other hand, [335: Dolozhee] now supports attaching files to the reports and automatically checks for any files left by AnHero upon startup. So, installing both these modules makes crash reporting quite easy: it's enough to just start LeechCraft after a crash, and Dolozhee will automatically pick AnHero's traces and offer the user to create a bugreport. All that's left for the user is to fill in the <em>Steps to reproduce</em> field.

Moreover, AnHero now also works under Mac OS X! If you want to leave crash handling to the default Mac OS X handler, you could just deactivate this plugin.

<h3>Other plugins</h3>

<ul>
<li>Rules in [210: AdvancedNotifications] can now be created from other plugins. For example, contact menu in Azoth now contains actions for creating a notification rule about the contact changing state or going online in one click.</li>
<li>[7: Aggregator] has finally got shortcuts for easy navigation to previous/next item (or unread item).</li>
<li>Cookies management has improved a lot in Core. Such features were added as whitelisting, blacklisting and cookies removal on application exit.</li>
<li>Tabs now have adaptive width, so scroll buttons never appear in the tab bar.</li>
<li>[56: Deadlyrics] now supports more search engines with better handling of non-unicode encodings and various patterns.</li>
<li>[310: Liznoo] now supports prohibiting the screensaver if other plugins (like a video player) request it.</li>
<li>[381: Monocle] now supports arbitrarily rotating document pages, both all pages in a document and each single page. It has also been optimized quite a lot, especially when navigating by several pages.</li>
<li>[313: NetStoreManager] notifies about upload/download progress via Job Holder API plugins like [435: TPI] just like LMP.</li>
<li>[433: SB2] now supports different per-window and per-launch-mode (desktop or normal) settings. A few issues have also been fixed.</li>
<li>[431: TouchStreams] can now automatically fetch the list of friends and their tracks and offer them as radio stations in [20: LMP]. Unfortunately due to VKontakte policies CAPTCHA would occasionally appear in this case.</li>
</ul>

Probably the most notable issue fixed in this release is a race condition in Qt network disk cache code leading to frequent crashes on some systems. A crash in QML caused by HotSensors under load on some systems is also fixed.

LeechCraft is also quite faster now, particularly during startup, as all plugin checks and initial loading is threaded now, utilizing all available CPU cores. Plugins initialization has also been moved to separate threads where possible. A few algorithmic optimizations have also been performed on loading process.

Saving settings has also been optimized and moved into its own thread, so huge system IO doesn't block LeechCraft if it has to save its state after, say, <a href=""http://dev.leechcraft.org/issues/1435"">a group in Azoth roster has been folded or unfolded</a>.

The source package is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.60/leechcraft-0.6.60.tar.xz"">already available</a>, so is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.60/leechcraft-0.6.60.dmg"">Mac OS X build</a>. Packages for other operating systems and distros will be available soon.","After more than half a year and 4000 commits after previous feature release, 0.5.95, we are proud to announce LeechCraft 0.6.60 ""Accelerated Evolution""!

This version introduces a lot of new plugins, new features in existing plugins and, of course, bugfixes. Well, even the brief changelog omitting non-significant changes is around 300 lines long, and this version has 297 tasks on our tracker (<a href=""http://dev.leechcraft.org/versions/36"">stats included</a>), which is almost three times more than the previous record! So let's see what's new.

<h2>Desktop mode</h2>

LeechCraft already had quite a few plugins offering features that are usually a part of a desktop environment, like a [310: power manager] or [366: removable storage manager], so we decided to take one step further and turn it into a proper Desktop Environment. This day has finally come, jokes aside!

[513: Desktop mode] is a new special mode of LeechCraft which basically turns it into a full-featured desktop environment. For example, the [433: SB2] sidebar (which contains elements like a taskbar or app launcher) turns into a separate always-visible dock panel that covers other applications:
[img_assist|nid=500|title=|desc=|link=popup|width=440]

Desktop mode is activated via the <code>--desktop</code> command line switch, and there are already session files for login managers to offer LeechCraft as a desktop environment.

But desktop mode is not only comprised from customized behavior of existing plugins with hte <code>--desktop</code> switch, it also relies heavily on a few plugins added in this release, like:
<ul>
<li>[492: Fenet] plugin is responsible for autostarting a window manager and possibly a compositing manager. It also installs a <code>.desktop</code> file for login managers to use to properly start LC.</li>
<li>[496: KBSwitch] serves as keyboard layout configurator. It allows configuring the list of keyboard layouts as well as various options, like the button for groups switching, the compose key, etc.</li>
<li>[508: Krigstask] provides a taskbar and a pager quark for [433: SB2].</li>
<li>[510: Mellonetray] provides a system tray area quark for [433: SB2].</li>
<li>[533: Laughty] is a system-wide desktop notifications daemon fetching event notifications from third-party applications and displaying them via LeechCraft plugins like [155: Kinotify].</li>
</ul>

Of course, other plugins like [366: Vrooby], [310: Liznoo] or [397: Launchy] may also be found useful in the desktop mode.

Desktop mode is very experimental for now and in its early stages, some things are known to not work, and we are hoping for some feedback about what should be added or changed.

<h2>LMP improvements</h2>

[20: LMP], our social collection-oriented audio player, migrated from Phonon to pure GStreamer, getting proper gapless playback support and compatibility with GStreamer 1.x. Mac OS X builds can also properly play various files now, while LMP on Mac was dumb during Phonon times.

Some other features are now possible because of the migration, like a proper equalizer, ReplayGain support or visualization. They are planned for future releases, though.

LMP now also supports instant queues when one can schedule some tracks in the playlist to be played right after the current one. This is useful, for example, to finish playback of the current album and then move to completely different artist.

There are a lot of smaller changes and improvements, among them:
<ul>
<li>Automatic tags recoding.</li>
<li>Handling power events to automatically pause playback when going to sleep and continue playback on resume.</li>
<li>Media info is now fetched from the collection (if available) instead of being resolved from the disk, leading to much a couple orders of magnitude faster playlist manipulations.</li>
<li>LMP now supports notifying the user about the progress of operations like transcoding or tags fetching via Job Holder API thus plugins like [435: TPI] or [25: Summary].</li>
<li>Volume change exponent can be configured now.</li>
<li>Images in widgets like biography view or similar artists are now cached.</li>
</ul>

Using LMP as a sound notification backend is broken now, though, and will be fixed shortly after this release. Consider using Dumbeep module for now.

<h2>VK messaging support</h2>

This release also adds support for VKontakte messaging via the new [143: Azoth] subplugin, [472: Azoth Murm].

Murm supports quite a few VKontakte features like friends groups, multiuser chats, and it automatically fetches media content embedded in messages like attached photos, audios, videos and reposts. Murm also offers the audios to be played or queued in media players like LMP:
[img_assist|nid=553|title=|desc=|link=popup|width=440]

The messages can also be encrypted via OTR if the corresponding plugin is installed and if the other chat participant supports OTR encryption.

<h2>Blasq</h2>

[522: Blasq] is our new plugin for cloud image photo albums like Picasa. The exact services are implemented via subplugins, and there are already four of them for Flickr, LiveJournal, Picasa and VKontakte.

[img_assist|nid=554|title=|desc=|link=popup|width=440]

The plugin supports collections of photos, uploading (and mass-uploading) new photos and deleting them. Other plugins like [503: Blogique] may also use Blasq as the source of images to be inserted into blog posts.

<h2>Other new plugins</h2>

A few other plugins have also been added in this release, among them:
<ul>
<li>[524: Devmon] for managing non-mass storage USB devices for plugins like LMP MTPSync (since MTP devices aren't generally mass storage ones).</li>
<li>[526: Imgaste] for uploading images to imagebins. This was previously a part of [12: Auscrie] but has moved out to its separate plugin so that other modules like [26: Poshuku] or [381: Monocle] could [520: benefit] from it.</li>
<li>Xtazy for fetching currently playing tune from MPRIS-compatible players or plugins like LMP. Again, it was a part of Azoth Xtazy before, but has moved out to its own plugin so that, for example, Blogique could also autodetect the current tune.</li>
<li>Sysnotify, a LeechCraft notification backend using the libnotify D-Bus protocol.</li>
<li>[535: Scroblibre], a Submissions API 1.2-compliant scrobbler for services like libre.fm supporting this API.</li>
<li>LMP MTPSync, LMP subplugin for uploading music to devices implementing the MTP protocol.</li>
<li>VtyuLC, experimental VLC-based video player.</li>
</ul>

<h2>Core and existing plugins</h2>

<h3>Azoth and subplugins</h3>

<ul>
<li>Azoth now shows a message in chat log whenever current date changes (at around 00:00).</li>
<li>Shortcuts for erasing text from cursor to begin/end of line or beginning of the current word were added.</li>
<li>It is now possible to change permissions of a room participant in all multiuser chat rooms.</li>
<li>Support for multiple items selection in roster. Some actions like opening a chat or items removal can now be applied to all selected items.</li>
<li>Old messages separator now appears for messages shown from history or before tab opening as well.</li>
<li>Azoth Autopaste now supports hastebin.org and paste.org.ru services, and also remembers last used service and highlighting per each entry.</li>
<li>Azoth StandardStyles now creates hash-based nick colors based on theme background color instead of global application palette leading to way better and more readable nick coloring.</li>
</ul>

<h3>Blogique</h3>

<ul>
<li>Blogique now supports service-specific tags in its WYSIWYG editor, like <code type=""html""><lj-cut /></code> or <code type=""html""><lj user=""someuser""/></code> for LiveJournal, properly displaying them in view mode as well.</li>
<li>Added support for previewing posts.</li>
<li>Blogs can now be exported to various formats like pdf or fb2.</li>
<li>Blogique Metida (LiveJournal support submodule) now supports fetching and modifying friends lists as well as sending and receiving messages.</li>
</ul>

<h3>Poshuku</h3>

[26: Poshuku], our web browser module, now supports [529: data filters] for handling page screenshots, allowing the user to automatically upload them to imagebins, for example.

History handling has been optimized a lot. Particularly, it doesn't make LeechCraft freeze for a few seconds each 15 minutes if the history is quite big now.

[27: Poshuku CleanWeb], the ad blocker, has also been heavily optimized. Particularly, filters parsing and loading is now asynchronous and threaded, greatly reducing module load time. Filtering itself is also threaded now, utlizing all available CPU cores, so page loading is much faster now as well. Filters handling has been improved as well, particularly the element hiding logic which now catches more garbage.

<h3>Error handling</h3>

AnHero depended on KDE's crash handling system before this release, and we've finally rewrote it to avoid this dependency. Now it has its own KDE-free crash handler:
[img_assist|nid=35|title=|desc=|link=popup|width=440]

It is also able now to automatically save crash logs and backtraces as a bonus. On the other hand, [335: Dolozhee] now supports attaching files to the reports and automatically checks for any files left by AnHero upon startup. So, installing both these modules makes crash reporting quite easy: it's enough to just start LeechCraft after a crash, and Dolozhee will automatically pick AnHero's traces and offer the user to create a bugreport. All that's left for the user is to fill in the <em>Steps to reproduce</em> field.

Moreover, AnHero now also works under Mac OS X! If you want to leave crash handling to the default Mac OS X handler, you could just deactivate this plugin.

<h3>Other plugins</h3>

<ul>
<li>Rules in [210: AdvancedNotifications] can now be created from other plugins. For example, contact menu in Azoth now contains actions for creating a notification rule about the contact changing state or going online in one click.</li>
<li>[7: Aggregator] has finally got shortcuts for easy navigation to previous/next item (or unread item).</li>
<li>Cookies management has improved a lot in Core. Such features were added as whitelisting, blacklisting and cookies removal on application exit.</li>
<li>Tabs now have adaptive width, so scroll buttons never appear in the tab bar.</li>
<li>[56: Deadlyrics] now supports more search engines with better handling of non-unicode encodings and various patterns.</li>
<li>[310: Liznoo] now supports prohibiting the screensaver if other plugins (like a video player) request it.</li>
<li>[381: Monocle] now supports arbitrarily rotating document pages, both all pages in a document and each single page. It has also been optimized quite a lot, especially when navigating by several pages.</li>
<li>[313: NetStoreManager] notifies about upload/download progress via Job Holder API plugins like [435: TPI] just like LMP.</li>
<li>[433: SB2] now supports different per-window and per-launch-mode (desktop or normal) settings. A few issues have also been fixed.</li>
<li>[431: TouchStreams] can now automatically fetch the list of friends and their tracks and offer them as radio stations in [20: LMP]. Unfortunately due to VKontakte policies CAPTCHA would occasionally appear in this case.</li>
</ul>

Probably the most notable issue fixed in this release is a race condition in Qt network disk cache code leading to frequent crashes on some systems. A crash in QML caused by HotSensors under load on some systems is also fixed.

LeechCraft is also quite faster now, particularly during startup, as all plugin checks and initial loading is threaded now, utilizing all available CPU cores. Plugins initialization has also been moved to separate threads where possible. A few algorithmic optimizations have also been performed on loading process.

Saving settings has also been optimized and moved into its own thread, so huge system IO doesn't block LeechCraft if it has to save its state after, say, <a href=""http://dev.leechcraft.org/issues/1435"">a group in Azoth roster has been folded or unfolded</a>.

The source package is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.60/leechcraft-0.6.60.tar.xz"">already available</a>, so is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.60/leechcraft-0.6.60.dmg"">Mac OS X build</a>. Packages for other operating systems and distros will be available soon."
559,page,Rosenthal,1394091832,plugins-rosenthal,"Rosenthal is a spellchecker plugin for other plugins to use.

Rosenthal is based on Hunspell and uses its dictionaries which are automatically found in their standard locations under *NIX systems. Dictionaries can also be installed via [153: LackMan].","Rosenthal is a spellchecker plugin for other plugins to use.

Rosenthal is based on Hunspell and uses its dictionaries which are automatically found in their standard locations under *NIX systems. Dictionaries can also be installed via [153: LackMan]."
561,image,Server history browser,1396463027,,"",""
562,image,Monocle: annotations,1396463499,,"",""
563,image,Aggregator WebAccess,1396465152,,"",""
564,image,CertMgr,1396465353,,"",""
565,image,CPU load quark,1396465579,,"",""
566,image,LHTR image uploading: selecting the service,1396466162,,"",""
567,image,LHTR image uploading: selecting images,1396466181,,"",""
568,image,LHTR image uploading: image parameters,1396466215,,"",""
569,image,LHTR image uploading: the result,1396466249,,"",""
570,image,Azoth: text search,1396467441,,"",""
571,page,Aggregator WebAccess,1396467664,plugins-aggregator-webaccess,"Aggregator WebAccess provides a basic web interface for the Aggregator feed reader, so one can read news articles from a mobile device or another machine.

[img_assist|nid=563|title=|desc=|link=popup|width=440]","Aggregator WebAccess provides a basic web interface for the Aggregator feed reader, so one can read news articles from a mobile device or another machine.

[img_assist|nid=563|title=|desc=|link=popup|width=440]"
573,page,CertMgr,1396467864,plugins-certmgr,"CertMgr is the SSL manager module. It allows one to manage the SSL exceptions (like ignored or rejected SSL certificate errors), as well as disable system-wide certificates and load custom ones.

[img_assist|nid=564|title=|desc=|link=popup|width=440]","CertMgr is the SSL manager module. It allows one to manage the SSL exceptions (like ignored or rejected SSL certificate errors), as well as disable system-wide certificates and load custom ones.

[img_assist|nid=564|title=|desc=|link=popup|width=440]"
577,page,Rosenthal,1396468251,plugins-rosenthal,Rosenthal provides a spell checker for other plugins like Azoth Rosenthal to use.,Rosenthal provides a spell checker for other plugins like Azoth Rosenthal to use.
578,book,Image sources,1396469671,concepts-image-source,"Image source is a plugin providing (possibly hierarchical) image collection to other plugins. The images should have a public URL and a few other attributes.

For example, the [522: Blasq] module provides images from the cloud services, while the [579: LHTR] editor module can embed them into the document being edited. Firstly the user selects the service to embed images from:

[img_assist|nid=566|title=|desc=|link=popup|width=440]

Then one chooses the images to add (on Blasq side):

[img_assist|nid=567|title=|desc=|link=popup|width=440]

Then one can configure parameters like previews size, alt text, alignment and so on (now on the LHTR side):

[img_assist|nid=568|title=|desc=|link=popup|width=440]

And finally (on the [503: Blogique] side, in which LHTR embeds):

[img_assist|nid=569|title=|desc=|link=popup|width=440]","Image source is a plugin providing (possibly hierarchical) image collection to other plugins. The images should have a public URL and a few other attributes.

For example, the [522: Blasq] module provides images from the cloud services, while the [579: LHTR] editor module can embed them into the document being edited. Firstly the user selects the service to embed images from:

[img_assist|nid=566|title=|desc=|link=popup|width=440]

Then one chooses the images to add (on Blasq side):

[img_assist|nid=567|title=|desc=|link=popup|width=440]

Then one can configure parameters like previews size, alt text, alignment and so on (now on the LHTR side):

[img_assist|nid=568|title=|desc=|link=popup|width=440]

And finally (on the [503: Blogique] side, in which LHTR embeds):

[img_assist|nid=569|title=|desc=|link=popup|width=440]"
579,page,LHTR,1396469798,plugins-lhtr,"LHTR is the LeechCraft Hypertext Editor. It is used by modules like [503: Blogique] to provide HTML editing capabilities.

<h2>Features</h2>

<ul>
<li>Webkit-powered WISYWIG editor.</li>
<li>Support for direct HTML editing.</li>
<li>Support for dirty and broken HTML via libtidy.</li>
<li>Support for custom tags defined by application domain (like Blogique defines its own tags for the LJ service).</li>
<li>Image insertion from [578: image source] plugins.</li>
<li>HTML syntax highlighting.</li>
</ul>","LHTR is the LeechCraft Hypertext Editor. It is used by modules like [503: Blogique] to provide HTML editing capabilities.

<h2>Features</h2>

<ul>
<li>Webkit-powered WISYWIG editor.</li>
<li>Support for direct HTML editing.</li>
<li>Support for dirty and broken HTML via libtidy.</li>
<li>Support for custom tags defined by application domain (like Blogique defines its own tags for the LJ service).</li>
<li>Image insertion from [578: image source] plugins.</li>
<li>HTML syntax highlighting.</li>
</ul>"
582,page,CPU Load,1396470796,plugins-cpuload,"CPU Load provides a quark that shows current IO/nice/user/system load in the [433: sidebar] and displays a tooltip with the load graphs for each CPU core.

[img_assist|nid=565|title=|desc=|link=popup|width=440]

Currently only Linux and Mac OS X are supported.","CPU Load provides a quark that shows current IO/nice/user/system load in the [433: sidebar] and displays a tooltip with the load graphs for each CPU core.

[img_assist|nid=565|title=|desc=|link=popup|width=440]

Currently only Linux and Mac OS X are supported."
584,story,LeechCraft 0.6.65 is released!,1396552579,leechcraft-0.6.65-is-released,"Today we are proud to announce the release of LeechCraft 0.6.65 ""Facepalm Mute""!

Some new tasty features and plugins were introduced in this release, and lot of things were changed under the hood, as well as lots of small behavioral issues were fixed or improved in many different plugins. So, let's get straight to all the new tasty things!

<h2>New plugins</h2>

Five new plugins have been added in this release.

<h3>Aggregator WebAccess</h3>

This module has seen its inception quite long ago, but only now it became somewhat ready. [571: WebAccess] provides a basic web interface for the [7: Aggregator] feed reader, so one can read news articles from a mobile device or another machine:

[img_assist|nid=563|title=|desc=|link=popup|width=440]

The module is still extremely experimental, but it is already used by some in some scenarios.

<h3>CertMgr</h3>

[573: CertMgr] is the new SSL manager. It supports both managing the SSL exceptions (like accepted or rejected SSL errors), as well as disabling system-wide SSL certificates and loading custom ones:1

[img_assist|nid=564|title=|desc=|link=popup|width=440]

<h3>CPU Load</h3>

CPU load monitoring quark that shows current IO/nice/user/system load in the [433: sidebar] and displays a tooltip with the load graphs for each core on hover:

[img_assist|nid=565|title=|desc=|link=popup|width=440]

It only supports Linux and Mac OS X systems for now.

<h3>Ooronee</h3>

A small quark for handling images and text dropped onto it via plugins supporting the [529: data filters concept].

<h3>Rosenthal</h3>

The spell check core has been moved from Azoth Rosenthal to a first-level plugin, losing the <em>Azoth</em> prefix on the way. Now it can be used by any plugin wishing to check spelling, and it also supports multiple dictionaries now.

<h2>LMP</h2>

Most significant change in this release of the [20: LMP] audio player is the support for ReplayGain. Now LMP understands the ReplayGain metadata in audio files and adjusts the volume accordingly. Of course, album mode is supported.

We are aware that ReplayGain information is very rarely met in nature, so another ReplayGain-related feature is automatic analysis and RG metadata calculation for audio files in your collection. The calculated metadata is stored in local collection, leaving your files intact, so you can safely continue seeding them in a bittorrent client, for example. One more reason to use collection in LMP, and one more reason to use LMP — as far as we know, almost no other audio players support this.

LMP's internals were upgraded in this release to support various audio filters, so get ready for various equalizers, visual effects and so on in next release!

Also, LMP now works properly on Mac OS X, and the Mac package now contains all required gstreamer plugins, so one can play FLAC or MP3 files or listen to internet radio on Macs now as well. Moreover, proper support for files watching was added: it was impossible to add a directory containing more than 256 files to collection before that. Now the watching backend explicitly uses FSEvents on Mac, supporting unlimited number of files in collection.

The Graffiti submodule for audio tags manipulation now supports canceling directory iteration and has got a few fixes regarding CUE support. We plan to move to <code>shntool</code> in next releases though.

Among other improvements and fixed issues:
<ul>
<li>Played tracks history is now collected (though not available in the UI yet).</li>
<li>Total duration of selected playlist tracks is now displayed.</li>
<li>Fixed memory leaks with GStreamer tags messages.</li>
<li>Fixed interaction of MPRIS implementation with KDE.</li>
<li>Fixed transcoding of audio files containing embedded album art.</li>
<li>Added support for Drag-n-Drop of radio items to playlist.</li>
</ul>

<h2>Azoth</h2>

[143: Azoth], the IM client, is probably the most widely-used module and most mature one, but it still gets tons of new features and improvements. For example, Azoth now supports server history (for the protocols that support this concept). So, if you had a conversation on another device or client you still can access it from Azoth and view the messages stored on server. Only XMPP and VKontakte protocols support this feature for now, and <a href=""http://xmpp.org/extensions/xep-0313.html"">XEP-0313</a> is chosen for XMPP instead of older but way more clumsy <a href=""http://xmpp.org/extensions/xep-0136.html"">XEP-0136</a>. XEP-0313 requires support both from client and server, and as far as we know only Prosody supports it.

[img_assist|nid=561|title=|desc=|link=popup|width=440]

The [144: Xoox] submodule implementing the XMPP protocol gained support for <a href=""http://xmpp.org/extensions/xep-0280.html"">Message Carbons</a>. That is, a resource may now optionally get all messages from all other resources, including the sent ones. This helps maintaining the conversation flow across different devices somewhat similarly to Skype. Message Carbons are forcefully disabled for some types of messages, though, for example for OTR messages. Of course, this is strictly optional and, moreover, opt-in feature.

A few other smaller fixes and improvements are available in the Xoox module:
<ul>
<li>The roster cache now isn't cleared if Xoox haven't managed to fetch the roster during application run time at least once.</li>
<li>Organization VCard fields are now supported on newer QXmpp.</li>
<li>VCards and versions requests can now be disabled globally.</li>
</ul>

VKontakte support (by the [472: Murm] module) has been improved as well. Besides supporting server history, Azoth Murm now can rename multiuser chats and invite contacts to multiuser chats. A few issues have been fixed as well, like sending messages containing the <em>&lt;</em> symbol or crashes on some slow connections.

Azoth now also supports sending images via the [529: image data filter] plugins, like [526: Imgaste] or [522: Blasq]. In this case an image is uploaded to an imagebin or a cloud image hosting service respectively, and a link to it is sent to the chat.

Just as with LMP, quite a few improvements were done and issues have been fixed as well:
<ul>
<li>Support for text search in chat window has been added:
[img_assist|nid=570|title=|desc=|link=popup|width=440].</li>
<li>A workaround has been found for a long-standing bug in Qt leading to crashes on startup.</li>
<li>Fixed Drag-n-Drop behavior: now dropping entries to other entries and to chat tabs is handled properly. For example, dropping a user to a conference tab (or vice versa) now suggests inviting the user to the conference.</li>
<li>Text does not disappear now from the message edit if autopasting has been canceled.</li>
<li>Better handling for network connectivity issues in [145: Acetamide].</li>
<li>Depester module now shows a ""muted"" icon near the ignored contacts in the roster.</li>
<li>Fixed horizontal scrolling appearing in standard styles on long words.</li>
<li>Fixed some memory issues in OTR support plugin.</li>
</ul>

<h2>Monocle</h2>

[381: Monocle], the document reader, now supports annotated documents. For now annotations are only supported for PDF documents, and only basic textual annotations are recognized. They are displayed both inline in the document and in a special side panel:

[img_assist|nid=562|title=|desc=|link=popup|width=440]

Creating annotations is not supported yet.

By the way, you can help by sending us a few documents containing graphical or sound annotations. You can attach them to a <a href=""http://dev.leechcraft.org/projects/leechcraft/issues"">bug report</a> or a mail to the <a href=""https://groups.google.com/forum/#!forum/leechcraft"">mailing list</a>.

PDF backend now also supports threaded rendering if built with Poppler 0.24.0 is newer. Threaded rendering allows both seamless scrolling without freezing the UI and scrolling process as well as uniform CPU cores utilization if multiple pages are shown at once.

<h2>LHTR</h2>

The [579: LHTR] visual hypertext editor component used primarily by the [503: Blogique] module now gained support for the image sources plugins (that Blasq also became in this release), so that images can be inserted easily. First we select the service we want to insert images from:
[img_assist|nid=566|title=|desc=|link=popup|width=440]

Then we select the images we want to add (of course, multiple selection is supported):
[img_assist|nid=567|title=|desc=|link=popup|width=440]

Then we choose image parameters, like the size of the previews, the alt text for each image, the alignment and so on:
[img_assist|nid=568|title=|desc=|link=popup|width=440]

And finally:
[img_assist|nid=569|title=|desc=|link=popup|width=440]

Also, the HTML editor now supports syntax highlighting.

<h2>Other plugins</h2>

<ul>
<li>[7: Aggregator] now supports renaming feeds.</li>
<li>[496: KBSwitch] now shows a menu with all the available layouts after right-clicking the quark.</li>
<li>[153: LackMan] now supports vim-style navigation and using Space key to toggle packages.</li>
<li>[429: MusicZombie] now fetches all information about a single artist in one request instead of issuing one request per each album.</li>
<li>[22: New Life] now supports importing history from Opera.</li>
<li>[158: Popishu] text editor now supports the recoverable tabs concept, so its tabs can be unclosed or saved between restarts now.</li>
<li>[433: SB2] now supports hiding quarks by default unless user explicitly adds them, so network monitor, CPU load and several other quarks are now hidden by default.</li>
</ul>

<h2>Other fixes</h2>

Among significant ones:
<ul>
<li>[8: AnHero], the crash handler, now restarts LeechCraft via the <code type=""bash"">leechcraft --restart</code> switch instead of an ugly shell kludge.</li>
<li>A serious bug in [13: CSTP] has been fixed that may lead to crashes on some systems on each erroneously finished download.</li>
<li>Fixed a memory leak in XDG handling code.</li>
<li><code type=""bash"">/etc/os-release</code> is now properly parsed.</li>
</ul>

Other than that, a lot of smaller issues and rare crashes were fixed in this release.

Also, some Mac OS X-specific issues were fixed. Besides what's been mentioned for LMP:
<ul>
<li>Native key symbols like ⌘ or ⌥ are shown in shortcuts manager instead of textual representation, avoiding confusion when configuring shortcuts.</li>
<li>A memory leak in the [310: Liznoo] module has been fixed.</li>
<li>A crash in the Liznoo module has been fixed on systems that don't have any batteries like desktop iMacs.</li>
<li>Fixed font drawing on Mac OS X 10.9.</li>
<li>LeechCraft now supports installing in the standard UNIX layout (with <code type=""bash"">$PREFIX/bin</code>, <code type=""bash"">$PREFIX/lib</code>, <code type=""bash"">$PREFIX/share</code> and all the likes) instead of the installation in the layout suitable for app bundles.</li>
</ul>

Source package is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.65/leechcraft-0.6.65.tar.xz"">already available</a>, so is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.65/LeechCraft-0.6.65.dmg"">Mac OS X package</a>. Packages for other supported OS and distros will be available a bit later.","Today we are proud to announce the release of LeechCraft 0.6.65 ""Facepalm Mute""!

Some new tasty features and plugins were introduced in this release, and lot of things were changed under the hood, as well as lots of small behavioral issues were fixed or improved in many different plugins. So, let's get straight to all the new tasty things!

<h2>New plugins</h2>

Five new plugins have been added in this release.

<h3>Aggregator WebAccess</h3>

This module has seen its inception quite long ago, but only now it became somewhat ready. [571: WebAccess] provides a basic web interface for the [7: Aggregator] feed reader, so one can read news articles from a mobile device or another machine:

[img_assist|nid=563|title=|desc=|link=popup|width=440]

The module is still extremely experimental, but it is already used by some in some scenarios.

<h3>CertMgr</h3>

[573: CertMgr] is the new SSL manager. It supports both managing the SSL exceptions (like accepted or rejected SSL errors), as well as disabling system-wide SSL certificates and loading custom ones:1

[img_assist|nid=564|title=|desc=|link=popup|width=440]

<h3>CPU Load</h3>

CPU load monitoring quark that shows current IO/nice/user/system load in the [433: sidebar] and displays a tooltip with the load graphs for each core on hover:

[img_assist|nid=565|title=|desc=|link=popup|width=440]

It only supports Linux and Mac OS X systems for now.

<h3>Ooronee</h3>

A small quark for handling images and text dropped onto it via plugins supporting the [529: data filters concept].

<h3>Rosenthal</h3>

The spell check core has been moved from Azoth Rosenthal to a first-level plugin, losing the <em>Azoth</em> prefix on the way. Now it can be used by any plugin wishing to check spelling, and it also supports multiple dictionaries now.

<h2>LMP</h2>

Most significant change in this release of the [20: LMP] audio player is the support for ReplayGain. Now LMP understands the ReplayGain metadata in audio files and adjusts the volume accordingly. Of course, album mode is supported.

We are aware that ReplayGain information is very rarely met in nature, so another ReplayGain-related feature is automatic analysis and RG metadata calculation for audio files in your collection. The calculated metadata is stored in local collection, leaving your files intact, so you can safely continue seeding them in a bittorrent client, for example. One more reason to use collection in LMP, and one more reason to use LMP — as far as we know, almost no other audio players support this.

LMP's internals were upgraded in this release to support various audio filters, so get ready for various equalizers, visual effects and so on in next release!

Also, LMP now works properly on Mac OS X, and the Mac package now contains all required gstreamer plugins, so one can play FLAC or MP3 files or listen to internet radio on Macs now as well. Moreover, proper support for files watching was added: it was impossible to add a directory containing more than 256 files to collection before that. Now the watching backend explicitly uses FSEvents on Mac, supporting unlimited number of files in collection.

The Graffiti submodule for audio tags manipulation now supports canceling directory iteration and has got a few fixes regarding CUE support. We plan to move to <code>shntool</code> in next releases though.

Among other improvements and fixed issues:
<ul>
<li>Played tracks history is now collected (though not available in the UI yet).</li>
<li>Total duration of selected playlist tracks is now displayed.</li>
<li>Fixed memory leaks with GStreamer tags messages.</li>
<li>Fixed interaction of MPRIS implementation with KDE.</li>
<li>Fixed transcoding of audio files containing embedded album art.</li>
<li>Added support for Drag-n-Drop of radio items to playlist.</li>
</ul>

<h2>Azoth</h2>

[143: Azoth], the IM client, is probably the most widely-used module and most mature one, but it still gets tons of new features and improvements. For example, Azoth now supports server history (for the protocols that support this concept). So, if you had a conversation on another device or client you still can access it from Azoth and view the messages stored on server. Only XMPP and VKontakte protocols support this feature for now, and <a href=""http://xmpp.org/extensions/xep-0313.html"">XEP-0313</a> is chosen for XMPP instead of older but way more clumsy <a href=""http://xmpp.org/extensions/xep-0136.html"">XEP-0136</a>. XEP-0313 requires support both from client and server, and as far as we know only Prosody supports it.

[img_assist|nid=561|title=|desc=|link=popup|width=440]

The [144: Xoox] submodule implementing the XMPP protocol gained support for <a href=""http://xmpp.org/extensions/xep-0280.html"">Message Carbons</a>. That is, a resource may now optionally get all messages from all other resources, including the sent ones. This helps maintaining the conversation flow across different devices somewhat similarly to Skype. Message Carbons are forcefully disabled for some types of messages, though, for example for OTR messages. Of course, this is strictly optional and, moreover, opt-in feature.

A few other smaller fixes and improvements are available in the Xoox module:
<ul>
<li>The roster cache now isn't cleared if Xoox haven't managed to fetch the roster during application run time at least once.</li>
<li>Organization VCard fields are now supported on newer QXmpp.</li>
<li>VCards and versions requests can now be disabled globally.</li>
</ul>

VKontakte support (by the [472: Murm] module) has been improved as well. Besides supporting server history, Azoth Murm now can rename multiuser chats and invite contacts to multiuser chats. A few issues have been fixed as well, like sending messages containing the <em>&lt;</em> symbol or crashes on some slow connections.

Azoth now also supports sending images via the [529: image data filter] plugins, like [526: Imgaste] or [522: Blasq]. In this case an image is uploaded to an imagebin or a cloud image hosting service respectively, and a link to it is sent to the chat.

Just as with LMP, quite a few improvements were done and issues have been fixed as well:
<ul>
<li>Support for text search in chat window has been added:
[img_assist|nid=570|title=|desc=|link=popup|width=440].</li>
<li>A workaround has been found for a long-standing bug in Qt leading to crashes on startup.</li>
<li>Fixed Drag-n-Drop behavior: now dropping entries to other entries and to chat tabs is handled properly. For example, dropping a user to a conference tab (or vice versa) now suggests inviting the user to the conference.</li>
<li>Text does not disappear now from the message edit if autopasting has been canceled.</li>
<li>Better handling for network connectivity issues in [145: Acetamide].</li>
<li>Depester module now shows a ""muted"" icon near the ignored contacts in the roster.</li>
<li>Fixed horizontal scrolling appearing in standard styles on long words.</li>
<li>Fixed some memory issues in OTR support plugin.</li>
</ul>

<h2>Monocle</h2>

[381: Monocle], the document reader, now supports annotated documents. For now annotations are only supported for PDF documents, and only basic textual annotations are recognized. They are displayed both inline in the document and in a special side panel:

[img_assist|nid=562|title=|desc=|link=popup|width=440]

Creating annotations is not supported yet.

By the way, you can help by sending us a few documents containing graphical or sound annotations. You can attach them to a <a href=""http://dev.leechcraft.org/projects/leechcraft/issues"">bug report</a> or a mail to the <a href=""https://groups.google.com/forum/#!forum/leechcraft"">mailing list</a>.

PDF backend now also supports threaded rendering if built with Poppler 0.24.0 is newer. Threaded rendering allows both seamless scrolling without freezing the UI and scrolling process as well as uniform CPU cores utilization if multiple pages are shown at once.

<h2>LHTR</h2>

The [579: LHTR] visual hypertext editor component used primarily by the [503: Blogique] module now gained support for the image sources plugins (that Blasq also became in this release), so that images can be inserted easily. First we select the service we want to insert images from:
[img_assist|nid=566|title=|desc=|link=popup|width=440]

Then we select the images we want to add (of course, multiple selection is supported):
[img_assist|nid=567|title=|desc=|link=popup|width=440]

Then we choose image parameters, like the size of the previews, the alt text for each image, the alignment and so on:
[img_assist|nid=568|title=|desc=|link=popup|width=440]

And finally:
[img_assist|nid=569|title=|desc=|link=popup|width=440]

Also, the HTML editor now supports syntax highlighting.

<h2>Other plugins</h2>

<ul>
<li>[7: Aggregator] now supports renaming feeds.</li>
<li>[496: KBSwitch] now shows a menu with all the available layouts after right-clicking the quark.</li>
<li>[153: LackMan] now supports vim-style navigation and using Space key to toggle packages.</li>
<li>[429: MusicZombie] now fetches all information about a single artist in one request instead of issuing one request per each album.</li>
<li>[22: New Life] now supports importing history from Opera.</li>
<li>[158: Popishu] text editor now supports the recoverable tabs concept, so its tabs can be unclosed or saved between restarts now.</li>
<li>[433: SB2] now supports hiding quarks by default unless user explicitly adds them, so network monitor, CPU load and several other quarks are now hidden by default.</li>
</ul>

<h2>Other fixes</h2>

Among significant ones:
<ul>
<li>[8: AnHero], the crash handler, now restarts LeechCraft via the <code type=""bash"">leechcraft --restart</code> switch instead of an ugly shell kludge.</li>
<li>A serious bug in [13: CSTP] has been fixed that may lead to crashes on some systems on each erroneously finished download.</li>
<li>Fixed a memory leak in XDG handling code.</li>
<li><code type=""bash"">/etc/os-release</code> is now properly parsed.</li>
</ul>

Other than that, a lot of smaller issues and rare crashes were fixed in this release.

Also, some Mac OS X-specific issues were fixed. Besides what's been mentioned for LMP:
<ul>
<li>Native key symbols like ⌘ or ⌥ are shown in shortcuts manager instead of textual representation, avoiding confusion when configuring shortcuts.</li>
<li>A memory leak in the [310: Liznoo] module has been fixed.</li>
<li>A crash in the Liznoo module has been fixed on systems that don't have any batteries like desktop iMacs.</li>
<li>Fixed font drawing on Mac OS X 10.9.</li>
<li>LeechCraft now supports installing in the standard UNIX layout (with <code type=""bash"">$PREFIX/bin</code>, <code type=""bash"">$PREFIX/lib</code>, <code type=""bash"">$PREFIX/share</code> and all the likes) instead of the installation in the layout suitable for app bundles.</li>
</ul>

Source package is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.65/leechcraft-0.6.65.tar.xz"">already available</a>, so is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.65/LeechCraft-0.6.65.dmg"">Mac OS X package</a>. Packages for other supported OS and distros will be available a bit later."
586,image,Eleeminator tab,1402918101,,"",""
587,image,Closing a tab with processes running,1402918275,,"",""
588,page,Eleeminator,1402918457,plugins-eleeminator,"Eleeminator is the LeechCraft Embedded Terminal. Currently this plugin is Linux-only.

<h2>Features</h2>

<ul>
<li>Multitabbed interface.</li>
<li>Automatic highlighting of links in terminal output.</li>
<li>Configurable color themes, fonts and other appearance.</li>
<li>Detection of running processes on tab close.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=586|title=Eleeminator tab|desc=|link=popup|width=440]

[img_assist|nid=587|title=Closing tabs with running processes|desc=|link=popup|width=440]","Eleeminator is the LeechCraft Embedded Terminal. Currently this plugin is Linux-only.

<h2>Features</h2>

<ul>
<li>Multitabbed interface.</li>
<li>Automatic highlighting of links in terminal output.</li>
<li>Configurable color themes, fonts and other appearance.</li>
<li>Detection of running processes on tab close.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=586|title=Eleeminator tab|desc=|link=popup|width=440]

[img_assist|nid=587|title=Closing tabs with running processes|desc=|link=popup|width=440]"
590,image,LMP BrainSlugz,1402918837,,"",""
591,page,LMP BrainSlugz,1402919129,plugins-lmp-brainslugz,"LMP BrainSlugz is the discography completeness checker.

BrainSlugz uses other plugins like [429: MusicZombie] to fetch up-to-date discographies of artists in your music collection, and shows what albums, EPs and other types of releases are lacking. It also fetches the tracks information for the missing releases, so you can easily preview them by clicking a single button.

[img_assist|nid=590|title=|desc=|link=popup|width=440]","LMP BrainSlugz is the discography completeness checker.

BrainSlugz uses other plugins like [429: MusicZombie] to fetch up-to-date discographies of artists in your music collection, and shows what albums, EPs and other types of releases are lacking. It also fetches the tracks information for the missing releases, so you can easily preview them by clicking a single button.

[img_assist|nid=590|title=|desc=|link=popup|width=440]"
593,image,LMP FrAdj,1402919425,,"",""
594,page,LMP FrAdj,1402920159,plugins-lmp-fradj,"LMP FrAdj provides a 10-band equalizer effect to LMP with support for presets.

[img_assist|nid=593|title=|desc=|link=popup|width=440]","LMP FrAdj provides a 10-band equalizer effect to LMP with support for presets.

[img_assist|nid=593|title=|desc=|link=popup|width=440]"
596,image,LMP HttStream,1402920531,,"",""
597,page,LMP HttStream,1402920978,plugins-lmp-httstream," LMP HttStream adds HTTP streaming capabilities to the LMP player.

HttStream encodes the currently playing audio into Ogg Vorbis and streams it to the clients connected (if any). HttStream supports multiple different servers on different addresses and ports with configurable encoding quality.

<h2>Features</h2>

<ul>
<li>Configurable streaming quality for different addresses.</li>
<li>Automatic starting of the audio playback on first client connect.</li>
<li>Automatic stopping of recoding when there are no clients connected.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=596|title=|desc=|link=popup|width=440]"," LMP HttStream adds HTTP streaming capabilities to the LMP player.

HttStream encodes the currently playing audio into Ogg Vorbis and streams it to the clients connected (if any). HttStream supports multiple different servers on different addresses and ports with configurable encoding quality.

<h2>Features</h2>

<ul>
<li>Configurable streaming quality for different addresses.</li>
<li>Automatic starting of the audio playback on first client connect.</li>
<li>Automatic stopping of recoding when there are no clients connected.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=596|title=|desc=|link=popup|width=440]"
599,image,Poshuku SpeedDial,1402921672,,"",""
600,page,Poshuku SpeedDial,1402921955,plugins-poshuku-speeddial,"Poshuku SpeedDial provides the Speed Dial start page for the Poshuku browser.

SpeedDial shows a separate list for most visited sites, so if you visit, say, separate stackoverflow.com pages quite often, the site will be shown in the list as well, though each page isn't visited often enough to be shown in the pages list.

<h2>Features</h2>

<ul>
<li>Two separate lists for most visited pages and most visited sites.</li>
<li>Manual mode, when only a list of predefined URLs is shown.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=599|title=|desc=|link=popup|width=440]","Poshuku SpeedDial provides the Speed Dial start page for the Poshuku browser.

SpeedDial shows a separate list for most visited sites, so if you visit, say, separate stackoverflow.com pages quite often, the site will be shown in the list as well, though each page isn't visited often enough to be shown in the pages list.

<h2>Features</h2>

<ul>
<li>Two separate lists for most visited pages and most visited sites.</li>
<li>Manual mode, when only a list of predefined URLs is shown.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=599|title=|desc=|link=popup|width=440]"
602,image,Poshuku certificates dialog,1404490911,,"",""
603,image,Poshuku certificates dialog,1404490932,,"",""
604,image,Otlozhu hierarchical tasks,1404491867,,"",""
605,image,Azoth OTRoid: authentication,1404492522,,"",""
606,image,Azoth OTRoid: managing private keys,1404492693,,"",""
607,image,Azoth OTRoid: managing known public keys,1404492717,,"",""
608,image,Azoth tooltip,1404495065,,"",""
609,image,Azoth ChatHistory,1404495309,,"",""
610,image,Creating rules from LMP,1404495968,,"",""
611,image,Creating notification rules from LMP,1404496025,,"",""
612,image,Modifying notification rules from LMP,1404496067,,"",""
613,image,Poshuku DC/AC,1404496233,,"",""
614,page,Poshuku DC/AC,1404565186,plugins-poshuku-dcac,"Color invertor mode for Poshuku. It works on any site without any custom CSS.

DC/AC also supports a somewhat smart mode where colors are inverted only if average brightness of the web page is bigger than some given threshold.

<h2>Screenshots</h2>
[img_assist|nid=613|title=|desc=|link=popup|width=440]","Color invertor mode for Poshuku. It works on any site without any custom CSS.

DC/AC also supports a somewhat smart mode where colors are inverted only if average brightness of the web page is bigger than some given threshold.

<h2>Screenshots</h2>
[img_assist|nid=613|title=|desc=|link=popup|width=440]"
616,page,Azoth OTRoid,1404502620,plugins-azoth-otroid,"Azoth OTRoid provides support for OTR deniable encryption to Azoth. It supports any protocol implemented in Azoth, ranging from [144: XMPP] to [472: VKontakte].

<h2>Features</h2>
<ul>
<li>Standard OTR encryption.</li>
<li>Question-based and shared secret authentication (with libotr-4).</li>
<li>Support for both libotr-3 and libotr-4.</li>
<li>Centralized UI for private keys and fingerprints management.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=605|title=Authentication dialog|desc=|link=popup|width=440]

[img_assist|nid=607|title=Managing known fingerprints|desc=|link=popup|width=440]

[img_assist|nid=606|title=Managing account keys|desc=|link=popup|width=440]","Azoth OTRoid provides support for OTR deniable encryption to Azoth. It supports any protocol implemented in Azoth, ranging from [144: XMPP] to [472: VKontakte].

<h2>Features</h2>
<ul>
<li>Standard OTR encryption.</li>
<li>Question-based and shared secret authentication (with libotr-4).</li>
<li>Support for both libotr-3 and libotr-4.</li>
<li>Centralized UI for private keys and fingerprints management.</li>
</ul>

<h2>Screenshots</h2>

[img_assist|nid=605|title=Authentication dialog|desc=|link=popup|width=440]

[img_assist|nid=607|title=Managing known fingerprints|desc=|link=popup|width=440]

[img_assist|nid=606|title=Managing account keys|desc=|link=popup|width=440]"
618,page,Azoth MuCommands,1406499089,plugins-azoth-mucommands,"Azoth MuCommands provides some IRC-like commands for Azoth.

Type <code>/help</code> to get the list of available commands in the given chat session, and type <code>/help</code> <em>command</em> to get help on a particular <em>command</em>.

<h2>Available commands</h2>
<ul>
<li><code>/names</code> — Shows the nick names of multiuser chat room participants.</li>
<li><code>/urls</code> — Lists the URLs appeared in the current chat session.</li>
<li><code>/openurl</code> — Opens an URL from the current chat session by its index.</li>
<li><code>/fetchurl</code> — Downloads an URL from the current chat session by its index.</li>
<li><code>/vcard</code> — Shows VCards for the given participants, or a roster entry, or any protocol user identified by their ID.</li>
<li><code>/version</code> — Shows the information about a participant or contact's software.</li>
<li><code>/time</code> — Shows the current time of a participant or a contact or a remote ID.</li>
<li><code>/disco</code> — Opens the service discovery tab for the given participant or ID.</li>
<li><code>/invite</code> — Invites a roster entry into a multiuser chat room.</li>
<li><code>/nick</code> — Changes the nickname used in the current multiuser chat room.</li>
<li><code>/subject; /topic</code> — Changes the subject in the current multiuser chat room.</li>
<li><code>/leave; /part</code> — Leaves the current multiuser chat room.</li>
<li><code>/rejoin</code> — Leaves the current multiuser chat room and then joins it again.</li>
<li><code>/ping</code> — Pings the given contact and shows the round trip time of the ping request.</li>
<li><code>/last</code> — Shows the time of last activity, or connection, or uptime.</li>
<li><code>/listperms</code> — Lists the available permission classes and roles for the current multiuser chat room.</li>
<li><code>/setperm</code> — Sets the permissions (like affiliation or role in case of XMPP) of a given participant in a multiuser chat room.</li>
<li><code>/kick</code> — Kicks the given participant from the current multiuser chat room.</li>
<li><code>/ban</code> — Bans the given participant from the current multiuser chat room.</li>
<li><code>/pm</code> — Sends a private message to a participant of the current multiuser chat room.</li>
<li><code>/whois</code> — Shows the real ID of a multiuser chat participant, if available.</li>
</ul>","Azoth MuCommands provides some IRC-like commands for Azoth.

Type <code>/help</code> to get the list of available commands in the given chat session, and type <code>/help</code> <em>command</em> to get help on a particular <em>command</em>.

<h2>Available commands</h2>
<ul>
<li><code>/names</code> — Shows the nick names of multiuser chat room participants.</li>
<li><code>/urls</code> — Lists the URLs appeared in the current chat session.</li>
<li><code>/openurl</code> — Opens an URL from the current chat session by its index.</li>
<li><code>/fetchurl</code> — Downloads an URL from the current chat session by its index.</li>
<li><code>/vcard</code> — Shows VCards for the given participants, or a roster entry, or any protocol user identified by their ID.</li>
<li><code>/version</code> — Shows the information about a participant or contact's software.</li>
<li><code>/time</code> — Shows the current time of a participant or a contact or a remote ID.</li>
<li><code>/disco</code> — Opens the service discovery tab for the given participant or ID.</li>
<li><code>/invite</code> — Invites a roster entry into a multiuser chat room.</li>
<li><code>/nick</code> — Changes the nickname used in the current multiuser chat room.</li>
<li><code>/subject; /topic</code> — Changes the subject in the current multiuser chat room.</li>
<li><code>/leave; /part</code> — Leaves the current multiuser chat room.</li>
<li><code>/rejoin</code> — Leaves the current multiuser chat room and then joins it again.</li>
<li><code>/ping</code> — Pings the given contact and shows the round trip time of the ping request.</li>
<li><code>/last</code> — Shows the time of last activity, or connection, or uptime.</li>
<li><code>/listperms</code> — Lists the available permission classes and roles for the current multiuser chat room.</li>
<li><code>/setperm</code> — Sets the permissions (like affiliation or role in case of XMPP) of a given participant in a multiuser chat room.</li>
<li><code>/kick</code> — Kicks the given participant from the current multiuser chat room.</li>
<li><code>/ban</code> — Bans the given participant from the current multiuser chat room.</li>
<li><code>/pm</code> — Sends a private message to a participant of the current multiuser chat room.</li>
<li><code>/whois</code> — Shows the real ID of a multiuser chat participant, if available.</li>
</ul>"
620,image,AdvancedNotifications dolle,1406568241,,"",""
621,story,LeechCraft 0.6.70 is released!,1406575190,leechcraft-0.6.70-is-released,"Today LeechCraft 0.6.70 ""Severance"" is released!

Three months and almost two thousands of commits have passed since the previous release, and we are proud to announce some new plugins and quite a few improvements, optimizations and fixes!

Two thousands of commits brought a lot of new features and changes, so this announce covers them from a bird's eye. Please refer to the changelog if you wish more detailed list of changes.

<h2>LMP</h2>

Let's start with the [20: LMP] audio player.

First, it's worth noting the newly added support for creating AdvancedNotifications rules directly from the playlist:
[img_assist|nid=610|title=|desc=|link=popup|width=440]

Choosing the menu item automatically opens AdvancedNotifications settings tab with all fields filled according to the track selected, so all that's left is to configure the notification methods:
[img_assist|nid=611|title=|desc=|link=popup|width=440]

The tracks with the associated rules are marked by a flag colored according to the rule color (that can be set in the [210: Advanced Notifications] settings), filled if the rule is enabled and hollow if it is disabled. It is also possible to directly open the rules configuration from the track menu:
[img_assist|nid=612|title=|desc=|link=popup|width=440]

That's what we call ""modules integration""!

<h3>Effects</h3>

LMP also got support for various filters and effects in the 0.6.65 version, and, as promised, some new effects were added in this release, like [594: FrAdj],a 10-band equalizer effect with presets:
[img_assist|nid=593|title=|desc=|link=popup|width=440]

Perhaps the most interesting effect is [597: HttStream] — streaming module, allowing one to stream music playing in LMP to other devices via HTTP. It is possible to add many copies of this filter, listening on different interfaces/ports and encoding the stream at different bitrates. This way music can be streamed with maximum quality on a local area network, and two instances, with high-quality and medium-quality encoding, can be exposed to the Internet, for example.
[img_assist|nid=596|title=|desc=|link=popup|width=440]

We think of adding a web interface and an RPC API to LMP in nearest releases, which, combined with HttStream, can turn LMP into a small media server.

<h3>BrainSlugz</h3>

Another new LMP subplugin added in this release is [591: BrainSlugz], checking the local user's discography for new missed releases:
[img_assist|nid=590|title=|desc=|link=popup|width=440]

BrainSlugz uses other first-level plugins like MusicZombie (for MusicBrainz) to query the discographies, thus other information sources can easily be added by merely writing a new module without changing BrainSlugz.

<h2>NetStoreManager</h2>

[313: NetStoreManager], our cloud storage manager plugin, has got a submodule for Dropbox support, supporting everything it should support: file uploads, downloads, file listings and so on. Dropbox guys haven't issued a fully working key yet, though.

Also, NetStoreManager now supports parallel mass downloading all selected files from the GUI.

<h2>Eleeminator</h2>

Quite a long-awaited plugin, [588: Eleeminator] brings a terminal emulator to LeechCraft:
[img_assist|nid=586|title=|desc=|link=popup|width=440]

It supports everything one would expect from a terminal emulator: multiple tabs, configurable color schemes, clipboard, links detection and opening. It integrates well with Advanced Notifications, allowing creation of the notification rules for bells in terminals.

Eleeminator also keeps track of the programs running in each terminal tab, updating the title accordingly. It also shows a warning if one tries to close a tab with something running in either background or foreground:
[img_assist|nid=587|title=|desc=|link=popup|width=440]

Eleeminator is based on the QTermWidget library, and some code has been contributed back to that project.

<h2>Poshuku</h2>

[26: Poshuku] is our web browser module, and it has got support for quite a few new plugins and features in this release.

<h3>DC/AC</h3>

A simple but useful module, [614: DC/AC] provides a color invertor working on any site without any custom CSS:

[img_assist|nid=613|title=|desc=|link=popup|width=440]

It also supports a thresholded mode, when colors are inverted only when the web page in question is brighter that some given threshold.

<h3>SpeedDial</h3>

Another long-awaited plugin which, as the name goes, adds Speed Dial functionality to the Poshuku browser:
[img_assist|nid=599|title=|desc=|link=popup|width=440]

[600: SpeedDial] supports automatic mode as well as a static list of pages. In the former case two lists are shown: one for most frequently visited pages and another one for most frequently visited hosts. This way if you visit, say, different Slashdot pages quite often from your RSS feed reader, each page would have quite low visits frequency and rating, but Slashdot would still show up in the list.

<h3>QRd</h3>

Allows one to generate a QR code representing the current page. This can be quite handy to send the URL of a page to a smartphone or a tablet.

<h3>Poshuku itself</h3>

The core of the [26: Poshuku] module has got an SSL badge notifying about the security of the current connection, whether the connection is fully secure, or some elements were loaded via unencrypted connection, or there were some SSL errors. Teh corresponding dialog allows viewing the certificates chain:
[img_assist|nid=602|title=|desc=|link=popup|width=440]
and the list of elements loaded via insecure connection:
[img_assist|nid=603|title=|desc=|link=popup|width=440]

<h2>AdvancedNotifications Dolle</h2>

The OS X-specific notifications module has been refactored out of the Pierre plugin into the Dolle submodule. It now supports showing differently colored badges for different events in the OS X dock, so counters for, say, chat rooms and private messages are shown separately now. Combined with the support for colors in the [210: Advanced Notifications] rules added in this release, this can be used to easily distinguish between different event types:
[img_assist|nid=620|title=|desc=|link=popup|width=440]

<h2>Azoth</h2>

[143: Azoth], the IM client, has been migrated to QtMultimediaKit for the Jingle support. QtMultimediaKit from the QtMobility package provides more solid, stable and glitchless experience than plain QtMultimedia in Qt 4, so the Jingle support can now be considered somewhat completed.

A new module has been added, [618: Azoth MuCommands], providing support for various IRC-like commands, like <code>/whois</code>, <code>/ping</code>, <code>/last</code> and so on. This way, mouseless Azoth became much more feasible and usable. The page dedicated to this plugin contains an up-to-date list of the commands.

File transfer notifications have been improved. They now contain buttons for quickly opening the file just transferred, and a persistent notification has also been added, so that a finished file transfer can be seen even if the original notification has been missed.

The tooltips for the entries in the contact list are now generated lazily on hover, saving around 100 KiB of memory per contact. The tooltips themselves have also become a little bit more neat, showing the client and status icons, as well as the contact's time (if available):
[img_assist|nid=608|title=|desc=|link=popup|width=660]

The [616: OTR support module] now supports question-based and shared secred authentication:
[img_assist|nid=605|title=|desc=|link=popup|width=440]
as well as managing fingerprints:
[img_assist|nid=607|title=|desc=|link=popup|width=440]
and accounts keys:
[img_assist|nid=606|title=|desc=|link=popup|width=440]

The [163: ChatHistory] module has got a new improved search box, along with the forward and case-insensitive search (the latter is available only if SQLite is built with ICU):
[img_assist|nid=609|title=|desc=|link=popup|width=660]

<h2>Monocle</h2>

[381: Monocle] now supports redirection backend plugins that merely convert a document from one format to another one, probably supported by another Monocle plugin.

Annotations' contents can now be copied to clipboard, and the actions shortcuts are now configurable.

The Postrus PostScript support module has been rewritten to just call a converter from <code type=""bash"">.ps</code> to <code type=""bash"">.pdf</code>, as previously calling Ghostscript from the same process Poppler resides in led to nasty crashes.

<h2>Otlozhu</h2>

[333: Otlozhu], our todo manager, now supports hierarchical tasks:
[img_assist|nid=604|title=|desc=|link=popup|width=440]

It has also got a lot of smaller improvements, mostly in GUI. The calendar pane is now resizable, for example, and the comment editing dialog now supports multiline comments.

<h2>Other</h2>

<ul>
<li>LeechCraft as a whole now respects XDG standards a little bit more. Particularly it now stores its non-important data, like browser cache, LMP cache or Azoth avatars, in <code type=""bash"">$XDG_CACHE_DIR</code>.</li>
<li>The utility library has been split into multiple smaller almost independent libraries, allowing the plugins to link to only those libraries they use instead of the big single Util blob.</li>
<li>The Azoth p100q module has been removed since the psto.net microblogging service has been closed quite some time ago in favour of point.im.</li>
<li>The [10: BitTorrent] module now supports adding magnet links via its UI (instead of delegating it from other plugins), and its dialogs became non-modal.</li>
<li>[13: CSTP] module now supports UTF8-encoded content-disposition header.</li>
<li>HotSensors module has got OS X support.</li>
<li>HttHare module now supports FreeBSD.</li>
<li>[22: New Life] now supports importing Opera RSS database, though only the feed list is imported for now.</li>
<li>The SysNotify module, providing notifications via a libnotify daemon, now supports showing images in the notifications if the used daemon supports them.</li>
<li>The [311: TabSessManager] module finally supports multiple windows, recovering the tabs in those windows they were on close.</li>
</ul>

Optimizations:
<ul>
<li>Azoth LastSeen now loads and saves the statistics asynchronously, speeding up load times and avoiding short freezes.</li>
<li>[144: Azoth Xoox] now saves the roster much less frequently, ignoring not interesting events like fetching the same VCard as the one already stored or fetching information about a MUC room participant that is not present in roster anyway.</li>
<li>Azoth Xoox now also saves avatars asynchronously.</li>
<li>[10: BitTorrent] module has been optimized, notifying the UI only about changes in those torrent whose state has been actually changed. This provides quite a big performance and energy efficiency improvement for the cases of having a lot of torrents added.</li>
<li>[20: LMP] now loads album art asynchronously when adding tracks to playlist, speeding up reaction to adding the whole collection, for example, by an order of magnitude.</li>
<li>LMP now also queues up the changed paths and removes any paths that are children of other already scheduled paths, optimizing a lot for the case when a whole directory tree has been changed at once, for example, as a result of directory unmounting.</li>
<li>[433: SB2] now got a much more optimized Desaturate effect, at least on x86 and derivatives.</li>
</ul>

Among the fixes for the nastiest crashes and bugs:
<ul>
<li>NetStoreManager GoogleDrive now correctly handles multipage results, showing all available files.</li>
<li>Fixed a crash in [144: Azoth Xoox] when trying to delete an entry that never came online but is present in the roster.</li>
<li>Fixed a crash in Azoth Xoox when a MUC participant gets the nick of another participant after a rename.</li>
<li>Fixed a few other crashes in Azoth Xoox related to participant renames.</li>
<li>Fixed a crash in [56: DeadLyrics] on receiving an erroneous reply.</li>
<li>Fixed a rare crash in LMP on some systems on switching to Devices pane.</li>
<li>Fixed items filtering in LackMan.</li>
<li>Fixed validating documents in the [579: LHTR] WYSIWYG editor, leading to erroneous LHTR state if the document contained entities not allowed by the XML specification.</li>
<li>Fixed synchronization issues in LMP MTPSync module which tried to query the device the audiofiles currently being transferred to, screwing up the transfers.</li>
<li>Fixed crashes when opening PDF documents if Monocle Postrus module is loaded (yes, that was mentioned earlier, but that's quite an important fix worth mentioning here again).</li>
<li>Fixed a crash in Poshuku when closing a tab with Web Inspector opened.</li>
<li>Dock widgets like Azoth's one now have a corresponding action in main menu. Before this reopening them after closing was impossible without resorting to SB2.</li>
</ul>

The source archive is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/leechcraft-0.6.70.tar.xz"">already available</a>, so is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/LeechCraft-0.6.70.dmg"">OS X bundle</a>. Packages for other OSes are coming soon.

By the way, this is the first release available in the FreeBSD ports collection. To install, just issue <code type=""bash"">portmaster x11/leechcraft</code> or <code>make -C x11/leechcraft install clean</code>. Whole LeechCraft is represented as a single port file for now, please let us know if this seems inconvenient to you!

Anyway, we will continue to work on FreeBSD support in modules like [310: Liznoo] and [366: Vrooby], as well as provide seamless experience for Linux systems without systemd.","Today LeechCraft 0.6.70 ""Severance"" is released!

Three months and almost two thousands of commits have passed since the previous release, and we are proud to announce some new plugins and quite a few improvements, optimizations and fixes!

Two thousands of commits brought a lot of new features and changes, so this announce covers them from a bird's eye. Please refer to the changelog if you wish more detailed list of changes.

<h2>LMP</h2>

Let's start with the [20: LMP] audio player.

First, it's worth noting the newly added support for creating AdvancedNotifications rules directly from the playlist:
[img_assist|nid=610|title=|desc=|link=popup|width=440]

Choosing the menu item automatically opens AdvancedNotifications settings tab with all fields filled according to the track selected, so all that's left is to configure the notification methods:
[img_assist|nid=611|title=|desc=|link=popup|width=440]

The tracks with the associated rules are marked by a flag colored according to the rule color (that can be set in the [210: Advanced Notifications] settings), filled if the rule is enabled and hollow if it is disabled. It is also possible to directly open the rules configuration from the track menu:
[img_assist|nid=612|title=|desc=|link=popup|width=440]

That's what we call ""modules integration""!

<h3>Effects</h3>

LMP also got support for various filters and effects in the 0.6.65 version, and, as promised, some new effects were added in this release, like [594: FrAdj],a 10-band equalizer effect with presets:
[img_assist|nid=593|title=|desc=|link=popup|width=440]

Perhaps the most interesting effect is [597: HttStream] — streaming module, allowing one to stream music playing in LMP to other devices via HTTP. It is possible to add many copies of this filter, listening on different interfaces/ports and encoding the stream at different bitrates. This way music can be streamed with maximum quality on a local area network, and two instances, with high-quality and medium-quality encoding, can be exposed to the Internet, for example.
[img_assist|nid=596|title=|desc=|link=popup|width=440]

We think of adding a web interface and an RPC API to LMP in nearest releases, which, combined with HttStream, can turn LMP into a small media server.

<h3>BrainSlugz</h3>

Another new LMP subplugin added in this release is [591: BrainSlugz], checking the local user's discography for new missed releases:
[img_assist|nid=590|title=|desc=|link=popup|width=440]

BrainSlugz uses other first-level plugins like MusicZombie (for MusicBrainz) to query the discographies, thus other information sources can easily be added by merely writing a new module without changing BrainSlugz.

<h2>NetStoreManager</h2>

[313: NetStoreManager], our cloud storage manager plugin, has got a submodule for Dropbox support, supporting everything it should support: file uploads, downloads, file listings and so on. Dropbox guys haven't issued a fully working key yet, though.

Also, NetStoreManager now supports parallel mass downloading all selected files from the GUI.

<h2>Eleeminator</h2>

Quite a long-awaited plugin, [588: Eleeminator] brings a terminal emulator to LeechCraft:
[img_assist|nid=586|title=|desc=|link=popup|width=440]

It supports everything one would expect from a terminal emulator: multiple tabs, configurable color schemes, clipboard, links detection and opening. It integrates well with Advanced Notifications, allowing creation of the notification rules for bells in terminals.

Eleeminator also keeps track of the programs running in each terminal tab, updating the title accordingly. It also shows a warning if one tries to close a tab with something running in either background or foreground:
[img_assist|nid=587|title=|desc=|link=popup|width=440]

Eleeminator is based on the QTermWidget library, and some code has been contributed back to that project.

<h2>Poshuku</h2>

[26: Poshuku] is our web browser module, and it has got support for quite a few new plugins and features in this release.

<h3>DC/AC</h3>

A simple but useful module, [614: DC/AC] provides a color invertor working on any site without any custom CSS:

[img_assist|nid=613|title=|desc=|link=popup|width=440]

It also supports a thresholded mode, when colors are inverted only when the web page in question is brighter that some given threshold.

<h3>SpeedDial</h3>

Another long-awaited plugin which, as the name goes, adds Speed Dial functionality to the Poshuku browser:
[img_assist|nid=599|title=|desc=|link=popup|width=440]

[600: SpeedDial] supports automatic mode as well as a static list of pages. In the former case two lists are shown: one for most frequently visited pages and another one for most frequently visited hosts. This way if you visit, say, different Slashdot pages quite often from your RSS feed reader, each page would have quite low visits frequency and rating, but Slashdot would still show up in the list.

<h3>QRd</h3>

Allows one to generate a QR code representing the current page. This can be quite handy to send the URL of a page to a smartphone or a tablet.

<h3>Poshuku itself</h3>

The core of the [26: Poshuku] module has got an SSL badge notifying about the security of the current connection, whether the connection is fully secure, or some elements were loaded via unencrypted connection, or there were some SSL errors. Teh corresponding dialog allows viewing the certificates chain:
[img_assist|nid=602|title=|desc=|link=popup|width=440]
and the list of elements loaded via insecure connection:
[img_assist|nid=603|title=|desc=|link=popup|width=440]

<h2>AdvancedNotifications Dolle</h2>

The OS X-specific notifications module has been refactored out of the Pierre plugin into the Dolle submodule. It now supports showing differently colored badges for different events in the OS X dock, so counters for, say, chat rooms and private messages are shown separately now. Combined with the support for colors in the [210: Advanced Notifications] rules added in this release, this can be used to easily distinguish between different event types:
[img_assist|nid=620|title=|desc=|link=popup|width=440]

<h2>Azoth</h2>

[143: Azoth], the IM client, has been migrated to QtMultimediaKit for the Jingle support. QtMultimediaKit from the QtMobility package provides more solid, stable and glitchless experience than plain QtMultimedia in Qt 4, so the Jingle support can now be considered somewhat completed.

A new module has been added, [618: Azoth MuCommands], providing support for various IRC-like commands, like <code>/whois</code>, <code>/ping</code>, <code>/last</code> and so on. This way, mouseless Azoth became much more feasible and usable. The page dedicated to this plugin contains an up-to-date list of the commands.

File transfer notifications have been improved. They now contain buttons for quickly opening the file just transferred, and a persistent notification has also been added, so that a finished file transfer can be seen even if the original notification has been missed.

The tooltips for the entries in the contact list are now generated lazily on hover, saving around 100 KiB of memory per contact. The tooltips themselves have also become a little bit more neat, showing the client and status icons, as well as the contact's time (if available):
[img_assist|nid=608|title=|desc=|link=popup|width=660]

The [616: OTR support module] now supports question-based and shared secred authentication:
[img_assist|nid=605|title=|desc=|link=popup|width=440]
as well as managing fingerprints:
[img_assist|nid=607|title=|desc=|link=popup|width=440]
and accounts keys:
[img_assist|nid=606|title=|desc=|link=popup|width=440]

The [163: ChatHistory] module has got a new improved search box, along with the forward and case-insensitive search (the latter is available only if SQLite is built with ICU):
[img_assist|nid=609|title=|desc=|link=popup|width=660]

<h2>Monocle</h2>

[381: Monocle] now supports redirection backend plugins that merely convert a document from one format to another one, probably supported by another Monocle plugin.

Annotations' contents can now be copied to clipboard, and the actions shortcuts are now configurable.

The Postrus PostScript support module has been rewritten to just call a converter from <code type=""bash"">.ps</code> to <code type=""bash"">.pdf</code>, as previously calling Ghostscript from the same process Poppler resides in led to nasty crashes.

<h2>Otlozhu</h2>

[333: Otlozhu], our todo manager, now supports hierarchical tasks:
[img_assist|nid=604|title=|desc=|link=popup|width=440]

It has also got a lot of smaller improvements, mostly in GUI. The calendar pane is now resizable, for example, and the comment editing dialog now supports multiline comments.

<h2>Other</h2>

<ul>
<li>LeechCraft as a whole now respects XDG standards a little bit more. Particularly it now stores its non-important data, like browser cache, LMP cache or Azoth avatars, in <code type=""bash"">$XDG_CACHE_DIR</code>.</li>
<li>The utility library has been split into multiple smaller almost independent libraries, allowing the plugins to link to only those libraries they use instead of the big single Util blob.</li>
<li>The Azoth p100q module has been removed since the psto.net microblogging service has been closed quite some time ago in favour of point.im.</li>
<li>The [10: BitTorrent] module now supports adding magnet links via its UI (instead of delegating it from other plugins), and its dialogs became non-modal.</li>
<li>[13: CSTP] module now supports UTF8-encoded content-disposition header.</li>
<li>HotSensors module has got OS X support.</li>
<li>HttHare module now supports FreeBSD.</li>
<li>[22: New Life] now supports importing Opera RSS database, though only the feed list is imported for now.</li>
<li>The SysNotify module, providing notifications via a libnotify daemon, now supports showing images in the notifications if the used daemon supports them.</li>
<li>The [311: TabSessManager] module finally supports multiple windows, recovering the tabs in those windows they were on close.</li>
</ul>

Optimizations:
<ul>
<li>Azoth LastSeen now loads and saves the statistics asynchronously, speeding up load times and avoiding short freezes.</li>
<li>[144: Azoth Xoox] now saves the roster much less frequently, ignoring not interesting events like fetching the same VCard as the one already stored or fetching information about a MUC room participant that is not present in roster anyway.</li>
<li>Azoth Xoox now also saves avatars asynchronously.</li>
<li>[10: BitTorrent] module has been optimized, notifying the UI only about changes in those torrent whose state has been actually changed. This provides quite a big performance and energy efficiency improvement for the cases of having a lot of torrents added.</li>
<li>[20: LMP] now loads album art asynchronously when adding tracks to playlist, speeding up reaction to adding the whole collection, for example, by an order of magnitude.</li>
<li>LMP now also queues up the changed paths and removes any paths that are children of other already scheduled paths, optimizing a lot for the case when a whole directory tree has been changed at once, for example, as a result of directory unmounting.</li>
<li>[433: SB2] now got a much more optimized Desaturate effect, at least on x86 and derivatives.</li>
</ul>

Among the fixes for the nastiest crashes and bugs:
<ul>
<li>NetStoreManager GoogleDrive now correctly handles multipage results, showing all available files.</li>
<li>Fixed a crash in [144: Azoth Xoox] when trying to delete an entry that never came online but is present in the roster.</li>
<li>Fixed a crash in Azoth Xoox when a MUC participant gets the nick of another participant after a rename.</li>
<li>Fixed a few other crashes in Azoth Xoox related to participant renames.</li>
<li>Fixed a crash in [56: DeadLyrics] on receiving an erroneous reply.</li>
<li>Fixed a rare crash in LMP on some systems on switching to Devices pane.</li>
<li>Fixed items filtering in LackMan.</li>
<li>Fixed validating documents in the [579: LHTR] WYSIWYG editor, leading to erroneous LHTR state if the document contained entities not allowed by the XML specification.</li>
<li>Fixed synchronization issues in LMP MTPSync module which tried to query the device the audiofiles currently being transferred to, screwing up the transfers.</li>
<li>Fixed crashes when opening PDF documents if Monocle Postrus module is loaded (yes, that was mentioned earlier, but that's quite an important fix worth mentioning here again).</li>
<li>Fixed a crash in Poshuku when closing a tab with Web Inspector opened.</li>
<li>Dock widgets like Azoth's one now have a corresponding action in main menu. Before this reopening them after closing was impossible without resorting to SB2.</li>
</ul>

The source archive is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/leechcraft-0.6.70.tar.xz"">already available</a>, so is <a href=""http://dist.leechcraft.org/LeechCraft/0.6.70/LeechCraft-0.6.70.dmg"">OS X bundle</a>. Packages for other OSes are coming soon.

By the way, this is the first release available in the FreeBSD ports collection. To install, just issue <code type=""bash"">portmaster x11/leechcraft</code> or <code>make -C x11/leechcraft install clean</code>. Whole LeechCraft is represented as a single port file for now, please let us know if this seems inconvenient to you!

Anyway, we will continue to work on FreeBSD support in modules like [310: Liznoo] and [366: Vrooby], as well as provide seamless experience for Linux systems without systemd."
